'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("LMWDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class LMWDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablesp_Company_GetAll As sp_Company_GetAllDataTable
    
    Private tablesp_DayBook_Rpt As sp_DayBook_RptDataTable
    
    Private tablesp_Group_GetAll As sp_Group_GetAllDataTable
    
    Private tablesp_Head_GetAll As sp_Head_GetAllDataTable
    
    Private tablesp_LedgerBook As sp_LedgerBookDataTable
    
    Private tablesp_DayBook_FINAL As sp_DayBook_FINALDataTable
    
    Private tablesp_DayBook_Pyt As sp_DayBook_PytDataTable
    
    Private tablesp_TDCollection As sp_TDCollectionDataTable
    
    Private tablesp_Member_GetAll As sp_Member_GetAllDataTable
    
    Private tablesp_DayBook As sp_DayBookDataTable
    
    Private tablesp_TDClossing_GetAll As sp_TDClossing_GetAllDataTable
    
    Private tablesp_TDRefund_GetAll As sp_TDRefund_GetAllDataTable
    
    Private tablesp_TrailBalance As sp_TrailBalanceDataTable
    
    Private tablesp_ShareCollection_rpt As sp_ShareCollection_rptDataTable
    
    Private tablesp_ShareClossing_GetAll As sp_ShareClossing_GetAllDataTable
    
    Private tablesp_MemberLoan_RptGetall As sp_MemberLoan_RptGetallDataTable
    
    Private tablesp_ShareDivident_GetAll As sp_ShareDivident_GetAllDataTable
    
    Private tablesp_PassBook As sp_PassBookDataTable
    
    Private tablesp_MemberLoan_GetAll As sp_MemberLoan_GetAllDataTable
    
    Private tablesp_LoanDemand As sp_LoanDemandDataTable
    
    Private tablesp_TD_PassBook As sp_TD_PassBookDataTable
    
    Private tablesp_Share_PassBook As sp_Share_PassBookDataTable
    
    Private tablesp_CollectionList_Rpt As sp_CollectionList_RptDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("sp_Company_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Company_GetAllDataTable(ds.Tables("sp_Company_GetAll")))
            End If
            If (Not (ds.Tables("sp_DayBook_Rpt")) Is Nothing) Then
                MyBase.Tables.Add(New sp_DayBook_RptDataTable(ds.Tables("sp_DayBook_Rpt")))
            End If
            If (Not (ds.Tables("sp_Group_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Group_GetAllDataTable(ds.Tables("sp_Group_GetAll")))
            End If
            If (Not (ds.Tables("sp_Head_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Head_GetAllDataTable(ds.Tables("sp_Head_GetAll")))
            End If
            If (Not (ds.Tables("sp_LedgerBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_LedgerBookDataTable(ds.Tables("sp_LedgerBook")))
            End If
            If (Not (ds.Tables("sp_DayBook_FINAL")) Is Nothing) Then
                MyBase.Tables.Add(New sp_DayBook_FINALDataTable(ds.Tables("sp_DayBook_FINAL")))
            End If
            If (Not (ds.Tables("sp_DayBook_Pyt")) Is Nothing) Then
                MyBase.Tables.Add(New sp_DayBook_PytDataTable(ds.Tables("sp_DayBook_Pyt")))
            End If
            If (Not (ds.Tables("sp_TDCollection")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TDCollectionDataTable(ds.Tables("sp_TDCollection")))
            End If
            If (Not (ds.Tables("sp_Member_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Member_GetAllDataTable(ds.Tables("sp_Member_GetAll")))
            End If
            If (Not (ds.Tables("sp_DayBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_DayBookDataTable(ds.Tables("sp_DayBook")))
            End If
            If (Not (ds.Tables("sp_TDClossing_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TDClossing_GetAllDataTable(ds.Tables("sp_TDClossing_GetAll")))
            End If
            If (Not (ds.Tables("sp_TDRefund_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TDRefund_GetAllDataTable(ds.Tables("sp_TDRefund_GetAll")))
            End If
            If (Not (ds.Tables("sp_TrailBalance")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TrailBalanceDataTable(ds.Tables("sp_TrailBalance")))
            End If
            If (Not (ds.Tables("sp_ShareCollection_rpt")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ShareCollection_rptDataTable(ds.Tables("sp_ShareCollection_rpt")))
            End If
            If (Not (ds.Tables("sp_ShareClossing_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ShareClossing_GetAllDataTable(ds.Tables("sp_ShareClossing_GetAll")))
            End If
            If (Not (ds.Tables("sp_MemberLoan_RptGetall")) Is Nothing) Then
                MyBase.Tables.Add(New sp_MemberLoan_RptGetallDataTable(ds.Tables("sp_MemberLoan_RptGetall")))
            End If
            If (Not (ds.Tables("sp_ShareDivident_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ShareDivident_GetAllDataTable(ds.Tables("sp_ShareDivident_GetAll")))
            End If
            If (Not (ds.Tables("sp_PassBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_PassBookDataTable(ds.Tables("sp_PassBook")))
            End If
            If (Not (ds.Tables("sp_MemberLoan_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_MemberLoan_GetAllDataTable(ds.Tables("sp_MemberLoan_GetAll")))
            End If
            If (Not (ds.Tables("sp_LoanDemand")) Is Nothing) Then
                MyBase.Tables.Add(New sp_LoanDemandDataTable(ds.Tables("sp_LoanDemand")))
            End If
            If (Not (ds.Tables("sp_TD_PassBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TD_PassBookDataTable(ds.Tables("sp_TD_PassBook")))
            End If
            If (Not (ds.Tables("sp_Share_PassBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Share_PassBookDataTable(ds.Tables("sp_Share_PassBook")))
            End If
            If (Not (ds.Tables("sp_CollectionList_Rpt")) Is Nothing) Then
                MyBase.Tables.Add(New sp_CollectionList_RptDataTable(ds.Tables("sp_CollectionList_Rpt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_Company_GetAll() As sp_Company_GetAllDataTable
        Get
            Return Me.tablesp_Company_GetAll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_DayBook_Rpt() As sp_DayBook_RptDataTable
        Get
            Return Me.tablesp_DayBook_Rpt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_Group_GetAll() As sp_Group_GetAllDataTable
        Get
            Return Me.tablesp_Group_GetAll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_Head_GetAll() As sp_Head_GetAllDataTable
        Get
            Return Me.tablesp_Head_GetAll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_LedgerBook() As sp_LedgerBookDataTable
        Get
            Return Me.tablesp_LedgerBook
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_DayBook_FINAL() As sp_DayBook_FINALDataTable
        Get
            Return Me.tablesp_DayBook_FINAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_DayBook_Pyt() As sp_DayBook_PytDataTable
        Get
            Return Me.tablesp_DayBook_Pyt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_TDCollection() As sp_TDCollectionDataTable
        Get
            Return Me.tablesp_TDCollection
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_Member_GetAll() As sp_Member_GetAllDataTable
        Get
            Return Me.tablesp_Member_GetAll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_DayBook() As sp_DayBookDataTable
        Get
            Return Me.tablesp_DayBook
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_TDClossing_GetAll() As sp_TDClossing_GetAllDataTable
        Get
            Return Me.tablesp_TDClossing_GetAll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_TDRefund_GetAll() As sp_TDRefund_GetAllDataTable
        Get
            Return Me.tablesp_TDRefund_GetAll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_TrailBalance() As sp_TrailBalanceDataTable
        Get
            Return Me.tablesp_TrailBalance
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_ShareCollection_rpt() As sp_ShareCollection_rptDataTable
        Get
            Return Me.tablesp_ShareCollection_rpt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_ShareClossing_GetAll() As sp_ShareClossing_GetAllDataTable
        Get
            Return Me.tablesp_ShareClossing_GetAll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_MemberLoan_RptGetall() As sp_MemberLoan_RptGetallDataTable
        Get
            Return Me.tablesp_MemberLoan_RptGetall
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_ShareDivident_GetAll() As sp_ShareDivident_GetAllDataTable
        Get
            Return Me.tablesp_ShareDivident_GetAll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_PassBook() As sp_PassBookDataTable
        Get
            Return Me.tablesp_PassBook
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_MemberLoan_GetAll() As sp_MemberLoan_GetAllDataTable
        Get
            Return Me.tablesp_MemberLoan_GetAll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_LoanDemand() As sp_LoanDemandDataTable
        Get
            Return Me.tablesp_LoanDemand
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_TD_PassBook() As sp_TD_PassBookDataTable
        Get
            Return Me.tablesp_TD_PassBook
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_Share_PassBook() As sp_Share_PassBookDataTable
        Get
            Return Me.tablesp_Share_PassBook
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_CollectionList_Rpt() As sp_CollectionList_RptDataTable
        Get
            Return Me.tablesp_CollectionList_Rpt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As LMWDataSet = CType(MyBase.Clone,LMWDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("sp_Company_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Company_GetAllDataTable(ds.Tables("sp_Company_GetAll")))
            End If
            If (Not (ds.Tables("sp_DayBook_Rpt")) Is Nothing) Then
                MyBase.Tables.Add(New sp_DayBook_RptDataTable(ds.Tables("sp_DayBook_Rpt")))
            End If
            If (Not (ds.Tables("sp_Group_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Group_GetAllDataTable(ds.Tables("sp_Group_GetAll")))
            End If
            If (Not (ds.Tables("sp_Head_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Head_GetAllDataTable(ds.Tables("sp_Head_GetAll")))
            End If
            If (Not (ds.Tables("sp_LedgerBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_LedgerBookDataTable(ds.Tables("sp_LedgerBook")))
            End If
            If (Not (ds.Tables("sp_DayBook_FINAL")) Is Nothing) Then
                MyBase.Tables.Add(New sp_DayBook_FINALDataTable(ds.Tables("sp_DayBook_FINAL")))
            End If
            If (Not (ds.Tables("sp_DayBook_Pyt")) Is Nothing) Then
                MyBase.Tables.Add(New sp_DayBook_PytDataTable(ds.Tables("sp_DayBook_Pyt")))
            End If
            If (Not (ds.Tables("sp_TDCollection")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TDCollectionDataTable(ds.Tables("sp_TDCollection")))
            End If
            If (Not (ds.Tables("sp_Member_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Member_GetAllDataTable(ds.Tables("sp_Member_GetAll")))
            End If
            If (Not (ds.Tables("sp_DayBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_DayBookDataTable(ds.Tables("sp_DayBook")))
            End If
            If (Not (ds.Tables("sp_TDClossing_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TDClossing_GetAllDataTable(ds.Tables("sp_TDClossing_GetAll")))
            End If
            If (Not (ds.Tables("sp_TDRefund_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TDRefund_GetAllDataTable(ds.Tables("sp_TDRefund_GetAll")))
            End If
            If (Not (ds.Tables("sp_TrailBalance")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TrailBalanceDataTable(ds.Tables("sp_TrailBalance")))
            End If
            If (Not (ds.Tables("sp_ShareCollection_rpt")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ShareCollection_rptDataTable(ds.Tables("sp_ShareCollection_rpt")))
            End If
            If (Not (ds.Tables("sp_ShareClossing_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ShareClossing_GetAllDataTable(ds.Tables("sp_ShareClossing_GetAll")))
            End If
            If (Not (ds.Tables("sp_MemberLoan_RptGetall")) Is Nothing) Then
                MyBase.Tables.Add(New sp_MemberLoan_RptGetallDataTable(ds.Tables("sp_MemberLoan_RptGetall")))
            End If
            If (Not (ds.Tables("sp_ShareDivident_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ShareDivident_GetAllDataTable(ds.Tables("sp_ShareDivident_GetAll")))
            End If
            If (Not (ds.Tables("sp_PassBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_PassBookDataTable(ds.Tables("sp_PassBook")))
            End If
            If (Not (ds.Tables("sp_MemberLoan_GetAll")) Is Nothing) Then
                MyBase.Tables.Add(New sp_MemberLoan_GetAllDataTable(ds.Tables("sp_MemberLoan_GetAll")))
            End If
            If (Not (ds.Tables("sp_LoanDemand")) Is Nothing) Then
                MyBase.Tables.Add(New sp_LoanDemandDataTable(ds.Tables("sp_LoanDemand")))
            End If
            If (Not (ds.Tables("sp_TD_PassBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_TD_PassBookDataTable(ds.Tables("sp_TD_PassBook")))
            End If
            If (Not (ds.Tables("sp_Share_PassBook")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Share_PassBookDataTable(ds.Tables("sp_Share_PassBook")))
            End If
            If (Not (ds.Tables("sp_CollectionList_Rpt")) Is Nothing) Then
                MyBase.Tables.Add(New sp_CollectionList_RptDataTable(ds.Tables("sp_CollectionList_Rpt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablesp_Company_GetAll = CType(MyBase.Tables("sp_Company_GetAll"),sp_Company_GetAllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_Company_GetAll) Is Nothing) Then
                Me.tablesp_Company_GetAll.InitVars
            End If
        End If
        Me.tablesp_DayBook_Rpt = CType(MyBase.Tables("sp_DayBook_Rpt"),sp_DayBook_RptDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_DayBook_Rpt) Is Nothing) Then
                Me.tablesp_DayBook_Rpt.InitVars
            End If
        End If
        Me.tablesp_Group_GetAll = CType(MyBase.Tables("sp_Group_GetAll"),sp_Group_GetAllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_Group_GetAll) Is Nothing) Then
                Me.tablesp_Group_GetAll.InitVars
            End If
        End If
        Me.tablesp_Head_GetAll = CType(MyBase.Tables("sp_Head_GetAll"),sp_Head_GetAllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_Head_GetAll) Is Nothing) Then
                Me.tablesp_Head_GetAll.InitVars
            End If
        End If
        Me.tablesp_LedgerBook = CType(MyBase.Tables("sp_LedgerBook"),sp_LedgerBookDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_LedgerBook) Is Nothing) Then
                Me.tablesp_LedgerBook.InitVars
            End If
        End If
        Me.tablesp_DayBook_FINAL = CType(MyBase.Tables("sp_DayBook_FINAL"),sp_DayBook_FINALDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_DayBook_FINAL) Is Nothing) Then
                Me.tablesp_DayBook_FINAL.InitVars
            End If
        End If
        Me.tablesp_DayBook_Pyt = CType(MyBase.Tables("sp_DayBook_Pyt"),sp_DayBook_PytDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_DayBook_Pyt) Is Nothing) Then
                Me.tablesp_DayBook_Pyt.InitVars
            End If
        End If
        Me.tablesp_TDCollection = CType(MyBase.Tables("sp_TDCollection"),sp_TDCollectionDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_TDCollection) Is Nothing) Then
                Me.tablesp_TDCollection.InitVars
            End If
        End If
        Me.tablesp_Member_GetAll = CType(MyBase.Tables("sp_Member_GetAll"),sp_Member_GetAllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_Member_GetAll) Is Nothing) Then
                Me.tablesp_Member_GetAll.InitVars
            End If
        End If
        Me.tablesp_DayBook = CType(MyBase.Tables("sp_DayBook"),sp_DayBookDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_DayBook) Is Nothing) Then
                Me.tablesp_DayBook.InitVars
            End If
        End If
        Me.tablesp_TDClossing_GetAll = CType(MyBase.Tables("sp_TDClossing_GetAll"),sp_TDClossing_GetAllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_TDClossing_GetAll) Is Nothing) Then
                Me.tablesp_TDClossing_GetAll.InitVars
            End If
        End If
        Me.tablesp_TDRefund_GetAll = CType(MyBase.Tables("sp_TDRefund_GetAll"),sp_TDRefund_GetAllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_TDRefund_GetAll) Is Nothing) Then
                Me.tablesp_TDRefund_GetAll.InitVars
            End If
        End If
        Me.tablesp_TrailBalance = CType(MyBase.Tables("sp_TrailBalance"),sp_TrailBalanceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_TrailBalance) Is Nothing) Then
                Me.tablesp_TrailBalance.InitVars
            End If
        End If
        Me.tablesp_ShareCollection_rpt = CType(MyBase.Tables("sp_ShareCollection_rpt"),sp_ShareCollection_rptDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_ShareCollection_rpt) Is Nothing) Then
                Me.tablesp_ShareCollection_rpt.InitVars
            End If
        End If
        Me.tablesp_ShareClossing_GetAll = CType(MyBase.Tables("sp_ShareClossing_GetAll"),sp_ShareClossing_GetAllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_ShareClossing_GetAll) Is Nothing) Then
                Me.tablesp_ShareClossing_GetAll.InitVars
            End If
        End If
        Me.tablesp_MemberLoan_RptGetall = CType(MyBase.Tables("sp_MemberLoan_RptGetall"),sp_MemberLoan_RptGetallDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_MemberLoan_RptGetall) Is Nothing) Then
                Me.tablesp_MemberLoan_RptGetall.InitVars
            End If
        End If
        Me.tablesp_ShareDivident_GetAll = CType(MyBase.Tables("sp_ShareDivident_GetAll"),sp_ShareDivident_GetAllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_ShareDivident_GetAll) Is Nothing) Then
                Me.tablesp_ShareDivident_GetAll.InitVars
            End If
        End If
        Me.tablesp_PassBook = CType(MyBase.Tables("sp_PassBook"),sp_PassBookDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_PassBook) Is Nothing) Then
                Me.tablesp_PassBook.InitVars
            End If
        End If
        Me.tablesp_MemberLoan_GetAll = CType(MyBase.Tables("sp_MemberLoan_GetAll"),sp_MemberLoan_GetAllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_MemberLoan_GetAll) Is Nothing) Then
                Me.tablesp_MemberLoan_GetAll.InitVars
            End If
        End If
        Me.tablesp_LoanDemand = CType(MyBase.Tables("sp_LoanDemand"),sp_LoanDemandDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_LoanDemand) Is Nothing) Then
                Me.tablesp_LoanDemand.InitVars
            End If
        End If
        Me.tablesp_TD_PassBook = CType(MyBase.Tables("sp_TD_PassBook"),sp_TD_PassBookDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_TD_PassBook) Is Nothing) Then
                Me.tablesp_TD_PassBook.InitVars
            End If
        End If
        Me.tablesp_Share_PassBook = CType(MyBase.Tables("sp_Share_PassBook"),sp_Share_PassBookDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_Share_PassBook) Is Nothing) Then
                Me.tablesp_Share_PassBook.InitVars
            End If
        End If
        Me.tablesp_CollectionList_Rpt = CType(MyBase.Tables("sp_CollectionList_Rpt"),sp_CollectionList_RptDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_CollectionList_Rpt) Is Nothing) Then
                Me.tablesp_CollectionList_Rpt.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "LMWDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/LMWDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablesp_Company_GetAll = New sp_Company_GetAllDataTable
        MyBase.Tables.Add(Me.tablesp_Company_GetAll)
        Me.tablesp_DayBook_Rpt = New sp_DayBook_RptDataTable
        MyBase.Tables.Add(Me.tablesp_DayBook_Rpt)
        Me.tablesp_Group_GetAll = New sp_Group_GetAllDataTable
        MyBase.Tables.Add(Me.tablesp_Group_GetAll)
        Me.tablesp_Head_GetAll = New sp_Head_GetAllDataTable
        MyBase.Tables.Add(Me.tablesp_Head_GetAll)
        Me.tablesp_LedgerBook = New sp_LedgerBookDataTable
        MyBase.Tables.Add(Me.tablesp_LedgerBook)
        Me.tablesp_DayBook_FINAL = New sp_DayBook_FINALDataTable
        MyBase.Tables.Add(Me.tablesp_DayBook_FINAL)
        Me.tablesp_DayBook_Pyt = New sp_DayBook_PytDataTable
        MyBase.Tables.Add(Me.tablesp_DayBook_Pyt)
        Me.tablesp_TDCollection = New sp_TDCollectionDataTable
        MyBase.Tables.Add(Me.tablesp_TDCollection)
        Me.tablesp_Member_GetAll = New sp_Member_GetAllDataTable
        MyBase.Tables.Add(Me.tablesp_Member_GetAll)
        Me.tablesp_DayBook = New sp_DayBookDataTable
        MyBase.Tables.Add(Me.tablesp_DayBook)
        Me.tablesp_TDClossing_GetAll = New sp_TDClossing_GetAllDataTable
        MyBase.Tables.Add(Me.tablesp_TDClossing_GetAll)
        Me.tablesp_TDRefund_GetAll = New sp_TDRefund_GetAllDataTable
        MyBase.Tables.Add(Me.tablesp_TDRefund_GetAll)
        Me.tablesp_TrailBalance = New sp_TrailBalanceDataTable
        MyBase.Tables.Add(Me.tablesp_TrailBalance)
        Me.tablesp_ShareCollection_rpt = New sp_ShareCollection_rptDataTable
        MyBase.Tables.Add(Me.tablesp_ShareCollection_rpt)
        Me.tablesp_ShareClossing_GetAll = New sp_ShareClossing_GetAllDataTable
        MyBase.Tables.Add(Me.tablesp_ShareClossing_GetAll)
        Me.tablesp_MemberLoan_RptGetall = New sp_MemberLoan_RptGetallDataTable
        MyBase.Tables.Add(Me.tablesp_MemberLoan_RptGetall)
        Me.tablesp_ShareDivident_GetAll = New sp_ShareDivident_GetAllDataTable
        MyBase.Tables.Add(Me.tablesp_ShareDivident_GetAll)
        Me.tablesp_PassBook = New sp_PassBookDataTable
        MyBase.Tables.Add(Me.tablesp_PassBook)
        Me.tablesp_MemberLoan_GetAll = New sp_MemberLoan_GetAllDataTable
        MyBase.Tables.Add(Me.tablesp_MemberLoan_GetAll)
        Me.tablesp_LoanDemand = New sp_LoanDemandDataTable
        MyBase.Tables.Add(Me.tablesp_LoanDemand)
        Me.tablesp_TD_PassBook = New sp_TD_PassBookDataTable
        MyBase.Tables.Add(Me.tablesp_TD_PassBook)
        Me.tablesp_Share_PassBook = New sp_Share_PassBookDataTable
        MyBase.Tables.Add(Me.tablesp_Share_PassBook)
        Me.tablesp_CollectionList_Rpt = New sp_CollectionList_RptDataTable
        MyBase.Tables.Add(Me.tablesp_CollectionList_Rpt)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_Company_GetAll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_DayBook_Rpt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_Group_GetAll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_Head_GetAll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_LedgerBook() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_DayBook_FINAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_DayBook_Pyt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_TDCollection() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_Member_GetAll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_DayBook() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_TDClossing_GetAll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_TDRefund_GetAll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_TrailBalance() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_ShareCollection_rpt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_ShareClossing_GetAll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_MemberLoan_RptGetall() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_ShareDivident_GetAll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_PassBook() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_MemberLoan_GetAll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_LoanDemand() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_TD_PassBook() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_Share_PassBook() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_CollectionList_Rpt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As LMWDataSet = New LMWDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub sp_Company_GetAllRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_Company_GetAllRowChangeEvent)
    
    Public Delegate Sub sp_DayBook_RptRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_DayBook_RptRowChangeEvent)
    
    Public Delegate Sub sp_Group_GetAllRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_Group_GetAllRowChangeEvent)
    
    Public Delegate Sub sp_Head_GetAllRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_Head_GetAllRowChangeEvent)
    
    Public Delegate Sub sp_LedgerBookRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_LedgerBookRowChangeEvent)
    
    Public Delegate Sub sp_DayBook_FINALRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_DayBook_FINALRowChangeEvent)
    
    Public Delegate Sub sp_DayBook_PytRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_DayBook_PytRowChangeEvent)
    
    Public Delegate Sub sp_TDCollectionRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_TDCollectionRowChangeEvent)
    
    Public Delegate Sub sp_Member_GetAllRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_Member_GetAllRowChangeEvent)
    
    Public Delegate Sub sp_DayBookRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_DayBookRowChangeEvent)
    
    Public Delegate Sub sp_TDClossing_GetAllRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_TDClossing_GetAllRowChangeEvent)
    
    Public Delegate Sub sp_TDRefund_GetAllRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_TDRefund_GetAllRowChangeEvent)
    
    Public Delegate Sub sp_TrailBalanceRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_TrailBalanceRowChangeEvent)
    
    Public Delegate Sub sp_ShareCollection_rptRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_ShareCollection_rptRowChangeEvent)
    
    Public Delegate Sub sp_ShareClossing_GetAllRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_ShareClossing_GetAllRowChangeEvent)
    
    Public Delegate Sub sp_MemberLoan_RptGetallRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_MemberLoan_RptGetallRowChangeEvent)
    
    Public Delegate Sub sp_ShareDivident_GetAllRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_ShareDivident_GetAllRowChangeEvent)
    
    Public Delegate Sub sp_PassBookRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_PassBookRowChangeEvent)
    
    Public Delegate Sub sp_MemberLoan_GetAllRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_MemberLoan_GetAllRowChangeEvent)
    
    Public Delegate Sub sp_LoanDemandRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_LoanDemandRowChangeEvent)
    
    Public Delegate Sub sp_TD_PassBookRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_TD_PassBookRowChangeEvent)
    
    Public Delegate Sub sp_Share_PassBookRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_Share_PassBookRowChangeEvent)
    
    Public Delegate Sub sp_CollectionList_RptRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_CollectionList_RptRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_Company_GetAllDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        Private columnCompanyName As Global.System.Data.DataColumn
        
        Private columnShortName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnDistrict As Global.System.Data.DataColumn
        
        Private columnPinCode As Global.System.Data.DataColumn
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnPhoneNo As Global.System.Data.DataColumn
        
        Private columnMobileNo As Global.System.Data.DataColumn
        
        Private columnWebsite As Global.System.Data.DataColumn
        
        Private columnEMail As Global.System.Data.DataColumn
        
        Private columnTINNo As Global.System.Data.DataColumn
        
        Private columnCSTNo As Global.System.Data.DataColumn
        
        Private columnStateCode As Global.System.Data.DataColumn
        
        Private columnInsuranceFlag As Global.System.Data.DataColumn
        
        Private columnTypingFont As Global.System.Data.DataColumn
        
        Private columnsubcentrecode As Global.System.Data.DataColumn
        
        Private columnSighningAuthority As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_Company_GetAll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShortNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShortName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PinCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPinCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhoneNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MobileNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobileNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WebsiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWebsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TINNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTINNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSTNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSTNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStateCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsuranceFlagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsuranceFlag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypingFontColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypingFont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subcentrecodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubcentrecode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SighningAuthorityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSighningAuthority
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_Company_GetAllRow
            Get
                Return CType(Me.Rows(index),sp_Company_GetAllRow)
            End Get
        End Property
        
        Public Event sp_Company_GetAllRowChanging As sp_Company_GetAllRowChangeEventHandler
        
        Public Event sp_Company_GetAllRowChanged As sp_Company_GetAllRowChangeEventHandler
        
        Public Event sp_Company_GetAllRowDeleting As sp_Company_GetAllRowChangeEventHandler
        
        Public Event sp_Company_GetAllRowDeleted As sp_Company_GetAllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_Company_GetAllRow(ByVal row As sp_Company_GetAllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_Company_GetAllRow( _
                    ByVal CompanyCode As Integer,  _
                    ByVal CompanyName As String,  _
                    ByVal ShortName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal District As String,  _
                    ByVal PinCode As String,  _
                    ByVal Logo() As Byte,  _
                    ByVal PhoneNo As String,  _
                    ByVal MobileNo As String,  _
                    ByVal Website As String,  _
                    ByVal EMail As String,  _
                    ByVal TINNo As String,  _
                    ByVal CSTNo As String,  _
                    ByVal StateCode As Integer,  _
                    ByVal InsuranceFlag As String,  _
                    ByVal TypingFont As String,  _
                    ByVal subcentrecode As Integer,  _
                    ByVal SighningAuthority As String) As sp_Company_GetAllRow
            Dim rowsp_Company_GetAllRow As sp_Company_GetAllRow = CType(Me.NewRow,sp_Company_GetAllRow)
            Dim columnValuesArray() As Object = New Object() {CompanyCode, CompanyName, ShortName, Address1, Address2, City, District, PinCode, Logo, PhoneNo, MobileNo, Website, EMail, TINNo, CSTNo, StateCode, InsuranceFlag, TypingFont, subcentrecode, SighningAuthority}
            rowsp_Company_GetAllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_Company_GetAllRow)
            Return rowsp_Company_GetAllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCompanyCode(ByVal CompanyCode As Integer) As sp_Company_GetAllRow
            Return CType(Me.Rows.Find(New Object() {CompanyCode}),sp_Company_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_Company_GetAllDataTable = CType(MyBase.Clone,sp_Company_GetAllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_Company_GetAllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
            Me.columnCompanyName = MyBase.Columns("CompanyName")
            Me.columnShortName = MyBase.Columns("ShortName")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnCity = MyBase.Columns("City")
            Me.columnDistrict = MyBase.Columns("District")
            Me.columnPinCode = MyBase.Columns("PinCode")
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnPhoneNo = MyBase.Columns("PhoneNo")
            Me.columnMobileNo = MyBase.Columns("MobileNo")
            Me.columnWebsite = MyBase.Columns("Website")
            Me.columnEMail = MyBase.Columns("EMail")
            Me.columnTINNo = MyBase.Columns("TINNo")
            Me.columnCSTNo = MyBase.Columns("CSTNo")
            Me.columnStateCode = MyBase.Columns("StateCode")
            Me.columnInsuranceFlag = MyBase.Columns("InsuranceFlag")
            Me.columnTypingFont = MyBase.Columns("TypingFont")
            Me.columnsubcentrecode = MyBase.Columns("subcentrecode")
            Me.columnSighningAuthority = MyBase.Columns("SighningAuthority")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyName)
            Me.columnShortName = New Global.System.Data.DataColumn("ShortName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShortName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnDistrict = New Global.System.Data.DataColumn("District", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrict)
            Me.columnPinCode = New Global.System.Data.DataColumn("PinCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPinCode)
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnPhoneNo = New Global.System.Data.DataColumn("PhoneNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhoneNo)
            Me.columnMobileNo = New Global.System.Data.DataColumn("MobileNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobileNo)
            Me.columnWebsite = New Global.System.Data.DataColumn("Website", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWebsite)
            Me.columnEMail = New Global.System.Data.DataColumn("EMail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMail)
            Me.columnTINNo = New Global.System.Data.DataColumn("TINNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTINNo)
            Me.columnCSTNo = New Global.System.Data.DataColumn("CSTNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSTNo)
            Me.columnStateCode = New Global.System.Data.DataColumn("StateCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStateCode)
            Me.columnInsuranceFlag = New Global.System.Data.DataColumn("InsuranceFlag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsuranceFlag)
            Me.columnTypingFont = New Global.System.Data.DataColumn("TypingFont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypingFont)
            Me.columnsubcentrecode = New Global.System.Data.DataColumn("subcentrecode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubcentrecode)
            Me.columnSighningAuthority = New Global.System.Data.DataColumn("SighningAuthority", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSighningAuthority)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCompanyCode}, true))
            Me.columnCompanyCode.AllowDBNull = false
            Me.columnCompanyCode.Unique = true
            Me.columnCompanyName.AllowDBNull = false
            Me.columnCompanyName.MaxLength = 50
            Me.columnShortName.AllowDBNull = false
            Me.columnShortName.MaxLength = 20
            Me.columnAddress1.MaxLength = 100
            Me.columnAddress2.MaxLength = 100
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 50
            Me.columnDistrict.AllowDBNull = false
            Me.columnDistrict.MaxLength = 50
            Me.columnPinCode.AllowDBNull = false
            Me.columnPinCode.MaxLength = 6
            Me.columnPhoneNo.MaxLength = 30
            Me.columnMobileNo.MaxLength = 30
            Me.columnWebsite.MaxLength = 30
            Me.columnEMail.MaxLength = 30
            Me.columnTINNo.MaxLength = 30
            Me.columnCSTNo.MaxLength = 30
            Me.columnStateCode.AllowDBNull = false
            Me.columnInsuranceFlag.MaxLength = 1
            Me.columnTypingFont.MaxLength = 50
            Me.columnSighningAuthority.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_Company_GetAllRow() As sp_Company_GetAllRow
            Return CType(Me.NewRow,sp_Company_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_Company_GetAllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_Company_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_Company_GetAllRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_Company_GetAllRowChanged(Me, New sp_Company_GetAllRowChangeEvent(CType(e.Row,sp_Company_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_Company_GetAllRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_Company_GetAllRowChanging(Me, New sp_Company_GetAllRowChangeEvent(CType(e.Row,sp_Company_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_Company_GetAllRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_Company_GetAllRowDeleted(Me, New sp_Company_GetAllRowChangeEvent(CType(e.Row,sp_Company_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_Company_GetAllRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_Company_GetAllRowDeleting(Me, New sp_Company_GetAllRowChangeEvent(CType(e.Row,sp_Company_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_Company_GetAllRow(ByVal row As sp_Company_GetAllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_Company_GetAllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_DayBook_RptDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnReceiptDate As Global.System.Data.DataColumn
        
        Private columnRHeadName As Global.System.Data.DataColumn
        
        Private columnRHead1 As Global.System.Data.DataColumn
        
        Private columnRHead2 As Global.System.Data.DataColumn
        
        Private columnRLtr As Global.System.Data.DataColumn
        
        Private columnRCash As Global.System.Data.DataColumn
        
        Private columnRAdjustment As Global.System.Data.DataColumn
        
        Private columnRTotal As Global.System.Data.DataColumn
        
        Private columnRp As Global.System.Data.DataColumn
        
        Private columnpage As Global.System.Data.DataColumn
        
        Private columnreceipt As Global.System.Data.DataColumn
        
        Private columnHeadCode As Global.System.Data.DataColumn
        
        Private columnGroupCode As Global.System.Data.DataColumn
        
        Private columnEntryFrom As Global.System.Data.DataColumn
        
        Private columnVoucherCode As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_DayBook_Rpt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RHeadNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRHeadName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RHead1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRHead1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RHead2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRHead2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RLtrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRLtr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RCashColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRCash
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RAdjustmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAdjustment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property receiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntryFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_DayBook_RptRow
            Get
                Return CType(Me.Rows(index),sp_DayBook_RptRow)
            End Get
        End Property
        
        Public Event sp_DayBook_RptRowChanging As sp_DayBook_RptRowChangeEventHandler
        
        Public Event sp_DayBook_RptRowChanged As sp_DayBook_RptRowChangeEventHandler
        
        Public Event sp_DayBook_RptRowDeleting As sp_DayBook_RptRowChangeEventHandler
        
        Public Event sp_DayBook_RptRowDeleted As sp_DayBook_RptRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_DayBook_RptRow(ByVal row As sp_DayBook_RptRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_DayBook_RptRow( _
                    ByVal ReceiptDate As Date,  _
                    ByVal RHeadName As String,  _
                    ByVal RHead1 As String,  _
                    ByVal RHead2 As String,  _
                    ByVal RLtr As Decimal,  _
                    ByVal RCash As Decimal,  _
                    ByVal RAdjustment As Decimal,  _
                    ByVal RTotal As Decimal,  _
                    ByVal Rp As String,  _
                    ByVal page As Integer,  _
                    ByVal receipt As Integer,  _
                    ByVal HeadCode As Integer,  _
                    ByVal GroupCode As Integer,  _
                    ByVal EntryFrom As String,  _
                    ByVal VoucherCode As Long,  _
                    ByVal Remarks As String) As sp_DayBook_RptRow
            Dim rowsp_DayBook_RptRow As sp_DayBook_RptRow = CType(Me.NewRow,sp_DayBook_RptRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptDate, RHeadName, RHead1, RHead2, RLtr, RCash, RAdjustment, RTotal, Rp, page, receipt, HeadCode, GroupCode, EntryFrom, VoucherCode, Remarks}
            rowsp_DayBook_RptRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_DayBook_RptRow)
            Return rowsp_DayBook_RptRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_DayBook_RptDataTable = CType(MyBase.Clone,sp_DayBook_RptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_DayBook_RptDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptDate = MyBase.Columns("ReceiptDate")
            Me.columnRHeadName = MyBase.Columns("RHeadName")
            Me.columnRHead1 = MyBase.Columns("RHead1")
            Me.columnRHead2 = MyBase.Columns("RHead2")
            Me.columnRLtr = MyBase.Columns("RLtr")
            Me.columnRCash = MyBase.Columns("RCash")
            Me.columnRAdjustment = MyBase.Columns("RAdjustment")
            Me.columnRTotal = MyBase.Columns("RTotal")
            Me.columnRp = MyBase.Columns("Rp")
            Me.columnpage = MyBase.Columns("page")
            Me.columnreceipt = MyBase.Columns("receipt")
            Me.columnHeadCode = MyBase.Columns("HeadCode")
            Me.columnGroupCode = MyBase.Columns("GroupCode")
            Me.columnEntryFrom = MyBase.Columns("EntryFrom")
            Me.columnVoucherCode = MyBase.Columns("VoucherCode")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptDate = New Global.System.Data.DataColumn("ReceiptDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDate)
            Me.columnRHeadName = New Global.System.Data.DataColumn("RHeadName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRHeadName)
            Me.columnRHead1 = New Global.System.Data.DataColumn("RHead1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRHead1)
            Me.columnRHead2 = New Global.System.Data.DataColumn("RHead2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRHead2)
            Me.columnRLtr = New Global.System.Data.DataColumn("RLtr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRLtr)
            Me.columnRCash = New Global.System.Data.DataColumn("RCash", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRCash)
            Me.columnRAdjustment = New Global.System.Data.DataColumn("RAdjustment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAdjustment)
            Me.columnRTotal = New Global.System.Data.DataColumn("RTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRTotal)
            Me.columnRp = New Global.System.Data.DataColumn("Rp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRp)
            Me.columnpage = New Global.System.Data.DataColumn("page", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpage)
            Me.columnreceipt = New Global.System.Data.DataColumn("receipt", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreceipt)
            Me.columnHeadCode = New Global.System.Data.DataColumn("HeadCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadCode)
            Me.columnGroupCode = New Global.System.Data.DataColumn("GroupCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupCode)
            Me.columnEntryFrom = New Global.System.Data.DataColumn("EntryFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryFrom)
            Me.columnVoucherCode = New Global.System.Data.DataColumn("VoucherCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherCode)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnRHeadName.MaxLength = 50
            Me.columnRHead1.MaxLength = 50
            Me.columnRHead2.MaxLength = 50
            Me.columnRp.MaxLength = 1
            Me.columnEntryFrom.MaxLength = 5
            Me.columnRemarks.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_DayBook_RptRow() As sp_DayBook_RptRow
            Return CType(Me.NewRow,sp_DayBook_RptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_DayBook_RptRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_DayBook_RptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_DayBook_RptRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_RptRowChanged(Me, New sp_DayBook_RptRowChangeEvent(CType(e.Row,sp_DayBook_RptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_DayBook_RptRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_RptRowChanging(Me, New sp_DayBook_RptRowChangeEvent(CType(e.Row,sp_DayBook_RptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_DayBook_RptRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_RptRowDeleted(Me, New sp_DayBook_RptRowChangeEvent(CType(e.Row,sp_DayBook_RptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_DayBook_RptRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_RptRowDeleting(Me, New sp_DayBook_RptRowChangeEvent(CType(e.Row,sp_DayBook_RptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_DayBook_RptRow(ByVal row As sp_DayBook_RptRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_DayBook_RptDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_Group_GetAllDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGroupCode As Global.System.Data.DataColumn
        
        Private columnGroupName As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        Private columnOnBalanceSheet As Global.System.Data.DataColumn
        
        Private columnOnProfitLoss As Global.System.Data.DataColumn
        
        Private columnOnTrading As Global.System.Data.DataColumn
        
        Private columnOnReport As Global.System.Data.DataColumn
        
        Private columnAccountTypeCode As Global.System.Data.DataColumn
        
        Private columnDelFlag As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_Group_GetAll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OnBalanceSheetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOnBalanceSheet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OnProfitLossColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOnProfitLoss
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OnTradingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOnTrading
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OnReportColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOnReport
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccountTypeCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountTypeCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DelFlagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelFlag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_Group_GetAllRow
            Get
                Return CType(Me.Rows(index),sp_Group_GetAllRow)
            End Get
        End Property
        
        Public Event sp_Group_GetAllRowChanging As sp_Group_GetAllRowChangeEventHandler
        
        Public Event sp_Group_GetAllRowChanged As sp_Group_GetAllRowChangeEventHandler
        
        Public Event sp_Group_GetAllRowDeleting As sp_Group_GetAllRowChangeEventHandler
        
        Public Event sp_Group_GetAllRowDeleted As sp_Group_GetAllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_Group_GetAllRow(ByVal row As sp_Group_GetAllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_Group_GetAllRow(ByVal GroupCode As Integer, ByVal GroupName As String, ByVal Status As String, ByVal CompanyCode As Integer, ByVal OnBalanceSheet As Boolean, ByVal OnProfitLoss As Boolean, ByVal OnTrading As Boolean, ByVal OnReport As Boolean, ByVal AccountTypeCode As Integer, ByVal DelFlag As Boolean) As sp_Group_GetAllRow
            Dim rowsp_Group_GetAllRow As sp_Group_GetAllRow = CType(Me.NewRow,sp_Group_GetAllRow)
            Dim columnValuesArray() As Object = New Object() {GroupCode, GroupName, Status, CompanyCode, OnBalanceSheet, OnProfitLoss, OnTrading, OnReport, AccountTypeCode, DelFlag}
            rowsp_Group_GetAllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_Group_GetAllRow)
            Return rowsp_Group_GetAllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGroupCode(ByVal GroupCode As Integer) As sp_Group_GetAllRow
            Return CType(Me.Rows.Find(New Object() {GroupCode}),sp_Group_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_Group_GetAllDataTable = CType(MyBase.Clone,sp_Group_GetAllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_Group_GetAllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGroupCode = MyBase.Columns("GroupCode")
            Me.columnGroupName = MyBase.Columns("GroupName")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
            Me.columnOnBalanceSheet = MyBase.Columns("OnBalanceSheet")
            Me.columnOnProfitLoss = MyBase.Columns("OnProfitLoss")
            Me.columnOnTrading = MyBase.Columns("OnTrading")
            Me.columnOnReport = MyBase.Columns("OnReport")
            Me.columnAccountTypeCode = MyBase.Columns("AccountTypeCode")
            Me.columnDelFlag = MyBase.Columns("DelFlag")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGroupCode = New Global.System.Data.DataColumn("GroupCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupCode)
            Me.columnGroupName = New Global.System.Data.DataColumn("GroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupName)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnOnBalanceSheet = New Global.System.Data.DataColumn("OnBalanceSheet", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOnBalanceSheet)
            Me.columnOnProfitLoss = New Global.System.Data.DataColumn("OnProfitLoss", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOnProfitLoss)
            Me.columnOnTrading = New Global.System.Data.DataColumn("OnTrading", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOnTrading)
            Me.columnOnReport = New Global.System.Data.DataColumn("OnReport", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOnReport)
            Me.columnAccountTypeCode = New Global.System.Data.DataColumn("AccountTypeCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountTypeCode)
            Me.columnDelFlag = New Global.System.Data.DataColumn("DelFlag", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelFlag)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGroupCode}, true))
            Me.columnGroupCode.AllowDBNull = false
            Me.columnGroupCode.Unique = true
            Me.columnGroupName.AllowDBNull = false
            Me.columnGroupName.MaxLength = 50
            Me.columnStatus.ReadOnly = true
            Me.columnStatus.MaxLength = 8
            Me.columnCompanyCode.AllowDBNull = false
            Me.columnOnTrading.AllowDBNull = false
            Me.columnOnReport.AllowDBNull = false
            Me.columnDelFlag.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_Group_GetAllRow() As sp_Group_GetAllRow
            Return CType(Me.NewRow,sp_Group_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_Group_GetAllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_Group_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_Group_GetAllRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_Group_GetAllRowChanged(Me, New sp_Group_GetAllRowChangeEvent(CType(e.Row,sp_Group_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_Group_GetAllRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_Group_GetAllRowChanging(Me, New sp_Group_GetAllRowChangeEvent(CType(e.Row,sp_Group_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_Group_GetAllRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_Group_GetAllRowDeleted(Me, New sp_Group_GetAllRowChangeEvent(CType(e.Row,sp_Group_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_Group_GetAllRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_Group_GetAllRowDeleting(Me, New sp_Group_GetAllRowChangeEvent(CType(e.Row,sp_Group_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_Group_GetAllRow(ByVal row As sp_Group_GetAllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_Group_GetAllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_Head_GetAllDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        Private columnHeadCode As Global.System.Data.DataColumn
        
        Private columnHeadName As Global.System.Data.DataColumn
        
        Private columnGroupCode As Global.System.Data.DataColumn
        
        Private columnGroupName As Global.System.Data.DataColumn
        
        Private columnOpeningBalance As Global.System.Data.DataColumn
        
        Private columnRp As Global.System.Data.DataColumn
        
        Private columnHeadOpeningCode As Global.System.Data.DataColumn
        
        Private columnOnVoucherNumber_YesNo As Global.System.Data.DataColumn
        
        Private columnDelFlag As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_Head_GetAll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpeningBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpeningBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadOpeningCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadOpeningCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OnVoucherNumber_YesNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOnVoucherNumber_YesNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DelFlagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelFlag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_Head_GetAllRow
            Get
                Return CType(Me.Rows(index),sp_Head_GetAllRow)
            End Get
        End Property
        
        Public Event sp_Head_GetAllRowChanging As sp_Head_GetAllRowChangeEventHandler
        
        Public Event sp_Head_GetAllRowChanged As sp_Head_GetAllRowChangeEventHandler
        
        Public Event sp_Head_GetAllRowDeleting As sp_Head_GetAllRowChangeEventHandler
        
        Public Event sp_Head_GetAllRowDeleted As sp_Head_GetAllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_Head_GetAllRow(ByVal row As sp_Head_GetAllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_Head_GetAllRow(ByVal CompanyCode As Integer, ByVal HeadCode As Integer, ByVal HeadName As String, ByVal GroupCode As Integer, ByVal GroupName As String, ByVal OpeningBalance As Decimal, ByVal Rp As Boolean, ByVal HeadOpeningCode As Integer, ByVal OnVoucherNumber_YesNo As Boolean, ByVal DelFlag As Boolean) As sp_Head_GetAllRow
            Dim rowsp_Head_GetAllRow As sp_Head_GetAllRow = CType(Me.NewRow,sp_Head_GetAllRow)
            Dim columnValuesArray() As Object = New Object() {CompanyCode, HeadCode, HeadName, GroupCode, GroupName, OpeningBalance, Rp, HeadOpeningCode, OnVoucherNumber_YesNo, DelFlag}
            rowsp_Head_GetAllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_Head_GetAllRow)
            Return rowsp_Head_GetAllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_Head_GetAllDataTable = CType(MyBase.Clone,sp_Head_GetAllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_Head_GetAllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
            Me.columnHeadCode = MyBase.Columns("HeadCode")
            Me.columnHeadName = MyBase.Columns("HeadName")
            Me.columnGroupCode = MyBase.Columns("GroupCode")
            Me.columnGroupName = MyBase.Columns("GroupName")
            Me.columnOpeningBalance = MyBase.Columns("OpeningBalance")
            Me.columnRp = MyBase.Columns("Rp")
            Me.columnHeadOpeningCode = MyBase.Columns("HeadOpeningCode")
            Me.columnOnVoucherNumber_YesNo = MyBase.Columns("OnVoucherNumber_YesNo")
            Me.columnDelFlag = MyBase.Columns("DelFlag")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnHeadCode = New Global.System.Data.DataColumn("HeadCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadCode)
            Me.columnHeadName = New Global.System.Data.DataColumn("HeadName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadName)
            Me.columnGroupCode = New Global.System.Data.DataColumn("GroupCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupCode)
            Me.columnGroupName = New Global.System.Data.DataColumn("GroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupName)
            Me.columnOpeningBalance = New Global.System.Data.DataColumn("OpeningBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpeningBalance)
            Me.columnRp = New Global.System.Data.DataColumn("Rp", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRp)
            Me.columnHeadOpeningCode = New Global.System.Data.DataColumn("HeadOpeningCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadOpeningCode)
            Me.columnOnVoucherNumber_YesNo = New Global.System.Data.DataColumn("OnVoucherNumber_YesNo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOnVoucherNumber_YesNo)
            Me.columnDelFlag = New Global.System.Data.DataColumn("DelFlag", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelFlag)
            Me.columnCompanyCode.AllowDBNull = false
            Me.columnHeadCode.AllowDBNull = false
            Me.columnHeadName.AllowDBNull = false
            Me.columnHeadName.MaxLength = 50
            Me.columnGroupCode.AllowDBNull = false
            Me.columnGroupName.MaxLength = 50
            Me.columnOpeningBalance.ReadOnly = true
            Me.columnRp.ReadOnly = true
            Me.columnDelFlag.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_Head_GetAllRow() As sp_Head_GetAllRow
            Return CType(Me.NewRow,sp_Head_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_Head_GetAllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_Head_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_Head_GetAllRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_Head_GetAllRowChanged(Me, New sp_Head_GetAllRowChangeEvent(CType(e.Row,sp_Head_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_Head_GetAllRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_Head_GetAllRowChanging(Me, New sp_Head_GetAllRowChangeEvent(CType(e.Row,sp_Head_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_Head_GetAllRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_Head_GetAllRowDeleted(Me, New sp_Head_GetAllRowChangeEvent(CType(e.Row,sp_Head_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_Head_GetAllRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_Head_GetAllRowDeleting(Me, New sp_Head_GetAllRowChangeEvent(CType(e.Row,sp_Head_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_Head_GetAllRow(ByVal row As sp_Head_GetAllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_Head_GetAllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_LedgerBookDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnVoucherDate As Global.System.Data.DataColumn
        
        Private columnHeadName As Global.System.Data.DataColumn
        
        Private columnHead1 As Global.System.Data.DataColumn
        
        Private columnHead2 As Global.System.Data.DataColumn
        
        Private columnLtr As Global.System.Data.DataColumn
        
        Private columnCash As Global.System.Data.DataColumn
        
        Private columnAdjustment As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnRp As Global.System.Data.DataColumn
        
        Private columnHeadCode As Global.System.Data.DataColumn
        
        Private columnGroupCode As Global.System.Data.DataColumn
        
        Private columnEntryFrom As Global.System.Data.DataColumn
        
        Private columnVoucherCode As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnpage As Global.System.Data.DataColumn
        
        Private columnreceipt As Global.System.Data.DataColumn
        
        Private columnMNO As Global.System.Data.DataColumn
        
        Private columnDATE1 As Global.System.Data.DataColumn
        
        Private columnDATE2 As Global.System.Data.DataColumn
        
        Private columnOPNBALANCE As Global.System.Data.DataColumn
        
        Private columnOPN_RP As Global.System.Data.DataColumn
        
        Private columnREPT As Global.System.Data.DataColumn
        
        Private columnPYMT As Global.System.Data.DataColumn
        
        Private columnTOTREPT As Global.System.Data.DataColumn
        
        Private columnTOTPYMT As Global.System.Data.DataColumn
        
        Private columnLedgerReceipt As Global.System.Data.DataColumn
        
        Private columnLedgerPayment As Global.System.Data.DataColumn
        
        Private columnOnReport As Global.System.Data.DataColumn
        
        Private columnAccountTypeCode As Global.System.Data.DataColumn
        
        Private columnGroupName As Global.System.Data.DataColumn
        
        Private columnGroupAcTypeCode As Global.System.Data.DataColumn
        
        Private columnACNO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_LedgerBook"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Head1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHead1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Head2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHead2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LtrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLtr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCash
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntryFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property receiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPNBALANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPNBALANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPN_RPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPN_RP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PYMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPYMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTREPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTREPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTPYMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTPYMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LedgerReceiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLedgerReceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LedgerPaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLedgerPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OnReportColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOnReport
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccountTypeCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountTypeCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupAcTypeCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupAcTypeCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_LedgerBookRow
            Get
                Return CType(Me.Rows(index),sp_LedgerBookRow)
            End Get
        End Property
        
        Public Event sp_LedgerBookRowChanging As sp_LedgerBookRowChangeEventHandler
        
        Public Event sp_LedgerBookRowChanged As sp_LedgerBookRowChangeEventHandler
        
        Public Event sp_LedgerBookRowDeleting As sp_LedgerBookRowChangeEventHandler
        
        Public Event sp_LedgerBookRowDeleted As sp_LedgerBookRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_LedgerBookRow(ByVal row As sp_LedgerBookRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_LedgerBookRow( _
                    ByVal VoucherDate As Date,  _
                    ByVal HeadName As String,  _
                    ByVal Head1 As String,  _
                    ByVal Head2 As String,  _
                    ByVal Ltr As Decimal,  _
                    ByVal Cash As Decimal,  _
                    ByVal Adjustment As Decimal,  _
                    ByVal Total As Decimal,  _
                    ByVal Rp As String,  _
                    ByVal HeadCode As Integer,  _
                    ByVal GroupCode As Integer,  _
                    ByVal EntryFrom As String,  _
                    ByVal VoucherCode As Long,  _
                    ByVal Remarks As String,  _
                    ByVal page As Integer,  _
                    ByVal receipt As Integer,  _
                    ByVal MNO As Integer,  _
                    ByVal DATE1 As Date,  _
                    ByVal DATE2 As Date,  _
                    ByVal OPNBALANCE As Decimal,  _
                    ByVal OPN_RP As String,  _
                    ByVal REPT As Decimal,  _
                    ByVal PYMT As Decimal,  _
                    ByVal TOTREPT As Decimal,  _
                    ByVal TOTPYMT As Decimal,  _
                    ByVal LedgerReceipt As Decimal,  _
                    ByVal LedgerPayment As Decimal,  _
                    ByVal OnReport As Boolean,  _
                    ByVal AccountTypeCode As Integer,  _
                    ByVal GroupName As String,  _
                    ByVal GroupAcTypeCode As Integer,  _
                    ByVal ACNO As Decimal) As sp_LedgerBookRow
            Dim rowsp_LedgerBookRow As sp_LedgerBookRow = CType(Me.NewRow,sp_LedgerBookRow)
            Dim columnValuesArray() As Object = New Object() {VoucherDate, HeadName, Head1, Head2, Ltr, Cash, Adjustment, Total, Rp, HeadCode, GroupCode, EntryFrom, VoucherCode, Remarks, page, receipt, MNO, DATE1, DATE2, OPNBALANCE, OPN_RP, REPT, PYMT, TOTREPT, TOTPYMT, LedgerReceipt, LedgerPayment, OnReport, AccountTypeCode, GroupName, GroupAcTypeCode, ACNO}
            rowsp_LedgerBookRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_LedgerBookRow)
            Return rowsp_LedgerBookRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_LedgerBookDataTable = CType(MyBase.Clone,sp_LedgerBookDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_LedgerBookDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVoucherDate = MyBase.Columns("VoucherDate")
            Me.columnHeadName = MyBase.Columns("HeadName")
            Me.columnHead1 = MyBase.Columns("Head1")
            Me.columnHead2 = MyBase.Columns("Head2")
            Me.columnLtr = MyBase.Columns("Ltr")
            Me.columnCash = MyBase.Columns("Cash")
            Me.columnAdjustment = MyBase.Columns("Adjustment")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnRp = MyBase.Columns("Rp")
            Me.columnHeadCode = MyBase.Columns("HeadCode")
            Me.columnGroupCode = MyBase.Columns("GroupCode")
            Me.columnEntryFrom = MyBase.Columns("EntryFrom")
            Me.columnVoucherCode = MyBase.Columns("VoucherCode")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnpage = MyBase.Columns("page")
            Me.columnreceipt = MyBase.Columns("receipt")
            Me.columnMNO = MyBase.Columns("MNO")
            Me.columnDATE1 = MyBase.Columns("DATE1")
            Me.columnDATE2 = MyBase.Columns("DATE2")
            Me.columnOPNBALANCE = MyBase.Columns("OPNBALANCE")
            Me.columnOPN_RP = MyBase.Columns("OPN_RP")
            Me.columnREPT = MyBase.Columns("REPT")
            Me.columnPYMT = MyBase.Columns("PYMT")
            Me.columnTOTREPT = MyBase.Columns("TOTREPT")
            Me.columnTOTPYMT = MyBase.Columns("TOTPYMT")
            Me.columnLedgerReceipt = MyBase.Columns("LedgerReceipt")
            Me.columnLedgerPayment = MyBase.Columns("LedgerPayment")
            Me.columnOnReport = MyBase.Columns("OnReport")
            Me.columnAccountTypeCode = MyBase.Columns("AccountTypeCode")
            Me.columnGroupName = MyBase.Columns("GroupName")
            Me.columnGroupAcTypeCode = MyBase.Columns("GroupAcTypeCode")
            Me.columnACNO = MyBase.Columns("ACNO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVoucherDate = New Global.System.Data.DataColumn("VoucherDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherDate)
            Me.columnHeadName = New Global.System.Data.DataColumn("HeadName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadName)
            Me.columnHead1 = New Global.System.Data.DataColumn("Head1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHead1)
            Me.columnHead2 = New Global.System.Data.DataColumn("Head2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHead2)
            Me.columnLtr = New Global.System.Data.DataColumn("Ltr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLtr)
            Me.columnCash = New Global.System.Data.DataColumn("Cash", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCash)
            Me.columnAdjustment = New Global.System.Data.DataColumn("Adjustment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustment)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnRp = New Global.System.Data.DataColumn("Rp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRp)
            Me.columnHeadCode = New Global.System.Data.DataColumn("HeadCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadCode)
            Me.columnGroupCode = New Global.System.Data.DataColumn("GroupCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupCode)
            Me.columnEntryFrom = New Global.System.Data.DataColumn("EntryFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryFrom)
            Me.columnVoucherCode = New Global.System.Data.DataColumn("VoucherCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherCode)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnpage = New Global.System.Data.DataColumn("page", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpage)
            Me.columnreceipt = New Global.System.Data.DataColumn("receipt", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreceipt)
            Me.columnMNO = New Global.System.Data.DataColumn("MNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMNO)
            Me.columnDATE1 = New Global.System.Data.DataColumn("DATE1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE1)
            Me.columnDATE2 = New Global.System.Data.DataColumn("DATE2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE2)
            Me.columnOPNBALANCE = New Global.System.Data.DataColumn("OPNBALANCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPNBALANCE)
            Me.columnOPN_RP = New Global.System.Data.DataColumn("OPN_RP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPN_RP)
            Me.columnREPT = New Global.System.Data.DataColumn("REPT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPT)
            Me.columnPYMT = New Global.System.Data.DataColumn("PYMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPYMT)
            Me.columnTOTREPT = New Global.System.Data.DataColumn("TOTREPT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTREPT)
            Me.columnTOTPYMT = New Global.System.Data.DataColumn("TOTPYMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTPYMT)
            Me.columnLedgerReceipt = New Global.System.Data.DataColumn("LedgerReceipt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLedgerReceipt)
            Me.columnLedgerPayment = New Global.System.Data.DataColumn("LedgerPayment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLedgerPayment)
            Me.columnOnReport = New Global.System.Data.DataColumn("OnReport", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOnReport)
            Me.columnAccountTypeCode = New Global.System.Data.DataColumn("AccountTypeCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountTypeCode)
            Me.columnGroupName = New Global.System.Data.DataColumn("GroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupName)
            Me.columnGroupAcTypeCode = New Global.System.Data.DataColumn("GroupAcTypeCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupAcTypeCode)
            Me.columnACNO = New Global.System.Data.DataColumn("ACNO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACNO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGroupAcTypeCode}, false))
            Me.columnHeadName.MaxLength = 50
            Me.columnHead1.MaxLength = 50
            Me.columnHead2.MaxLength = 50
            Me.columnRp.MaxLength = 1
            Me.columnEntryFrom.MaxLength = 5
            Me.columnRemarks.MaxLength = 150
            Me.columnMNO.ReadOnly = true
            Me.columnOPN_RP.MaxLength = 1
            Me.columnTOTREPT.ReadOnly = true
            Me.columnTOTPYMT.ReadOnly = true
            Me.columnLedgerReceipt.ReadOnly = true
            Me.columnLedgerPayment.ReadOnly = true
            Me.columnGroupName.MaxLength = 50
            Me.columnGroupAcTypeCode.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_LedgerBookRow() As sp_LedgerBookRow
            Return CType(Me.NewRow,sp_LedgerBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_LedgerBookRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_LedgerBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_LedgerBookRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_LedgerBookRowChanged(Me, New sp_LedgerBookRowChangeEvent(CType(e.Row,sp_LedgerBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_LedgerBookRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_LedgerBookRowChanging(Me, New sp_LedgerBookRowChangeEvent(CType(e.Row,sp_LedgerBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_LedgerBookRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_LedgerBookRowDeleted(Me, New sp_LedgerBookRowChangeEvent(CType(e.Row,sp_LedgerBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_LedgerBookRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_LedgerBookRowDeleting(Me, New sp_LedgerBookRowChangeEvent(CType(e.Row,sp_LedgerBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_LedgerBookRow(ByVal row As sp_LedgerBookRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_LedgerBookDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_DayBook_FINALDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnROWNO As Global.System.Data.DataColumn
        
        Private columnVOUCHERDATE As Global.System.Data.DataColumn
        
        Private columnHEADNAME As Global.System.Data.DataColumn
        
        Private columnHEAD1 As Global.System.Data.DataColumn
        
        Private columnHEAD2 As Global.System.Data.DataColumn
        
        Private columnLTR As Global.System.Data.DataColumn
        
        Private columnCASH As Global.System.Data.DataColumn
        
        Private columnADJUSTMENT As Global.System.Data.DataColumn
        
        Private columnTOTAL As Global.System.Data.DataColumn
        
        Private columnRP As Global.System.Data.DataColumn
        
        Private columnHEADCODE As Global.System.Data.DataColumn
        
        Private columnGROUPCODE As Global.System.Data.DataColumn
        
        Private columnOPENINGBALANCE As Global.System.Data.DataColumn
        
        Private columnCLOSSINGBALANCE As Global.System.Data.DataColumn
        
        Private columnENTRYFROM As Global.System.Data.DataColumn
        
        Private columnNUMWORD As Global.System.Data.DataColumn
        
        Private columnVOUCHERCODE As Global.System.Data.DataColumn
        
        Private columnREMARKS As Global.System.Data.DataColumn
        
        Private columnPAGE As Global.System.Data.DataColumn
        
        Private columnRECEIPT As Global.System.Data.DataColumn
        
        Private columnPROWNO As Global.System.Data.DataColumn
        
        Private columnPHEADNAME As Global.System.Data.DataColumn
        
        Private columnPHEAD1 As Global.System.Data.DataColumn
        
        Private columnPHEAD2 As Global.System.Data.DataColumn
        
        Private columnPLTR As Global.System.Data.DataColumn
        
        Private columnPCASH As Global.System.Data.DataColumn
        
        Private columnPADJUSTMENT As Global.System.Data.DataColumn
        
        Private columnPTOTAL As Global.System.Data.DataColumn
        
        Private columnPRP As Global.System.Data.DataColumn
        
        Private columnPHEADCODE As Global.System.Data.DataColumn
        
        Private columnPGROUPCODE As Global.System.Data.DataColumn
        
        Private columnPOPENINGBALANCE As Global.System.Data.DataColumn
        
        Private columnPCLOSSINGBALANCE As Global.System.Data.DataColumn
        
        Private columnPENTRYFROM As Global.System.Data.DataColumn
        
        Private columnPNUMWORD As Global.System.Data.DataColumn
        
        Private columnPVOUCHERCODE As Global.System.Data.DataColumn
        
        Private columnPREMARKS As Global.System.Data.DataColumn
        
        Private columnPPAGE As Global.System.Data.DataColumn
        
        Private columnPRECEIPT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_DayBook_FINAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROWNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROWNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VOUCHERDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOUCHERDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEAD1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEAD1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEAD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEAD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LTRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLTR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCASH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADJUSTMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADJUSTMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GROUPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPENINGBALANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPENINGBALANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLOSSINGBALANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLOSSINGBALANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENTRYFROMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENTRYFROM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMWORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMWORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VOUCHERCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOUCHERCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMARKSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROWNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROWNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHEADNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHEADNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHEAD1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHEAD1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHEAD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHEAD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLTRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLTR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PCASHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPCASH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PADJUSTMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPADJUSTMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHEADCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHEADCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGROUPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGROUPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POPENINGBALANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOPENINGBALANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PCLOSSINGBALANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPCLOSSINGBALANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PENTRYFROMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPENTRYFROM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PNUMWORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPNUMWORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PVOUCHERCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPVOUCHERCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREMARKSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREMARKS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PPAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECEIPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECEIPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_DayBook_FINALRow
            Get
                Return CType(Me.Rows(index),sp_DayBook_FINALRow)
            End Get
        End Property
        
        Public Event sp_DayBook_FINALRowChanging As sp_DayBook_FINALRowChangeEventHandler
        
        Public Event sp_DayBook_FINALRowChanged As sp_DayBook_FINALRowChangeEventHandler
        
        Public Event sp_DayBook_FINALRowDeleting As sp_DayBook_FINALRowChangeEventHandler
        
        Public Event sp_DayBook_FINALRowDeleted As sp_DayBook_FINALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_DayBook_FINALRow(ByVal row As sp_DayBook_FINALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_DayBook_FINALRow( _
                    ByVal ROWNO As Long,  _
                    ByVal VOUCHERDATE As Date,  _
                    ByVal HEADNAME As String,  _
                    ByVal HEAD1 As String,  _
                    ByVal HEAD2 As String,  _
                    ByVal LTR As Decimal,  _
                    ByVal CASH As Decimal,  _
                    ByVal ADJUSTMENT As Decimal,  _
                    ByVal TOTAL As Decimal,  _
                    ByVal RP As String,  _
                    ByVal HEADCODE As Integer,  _
                    ByVal GROUPCODE As Integer,  _
                    ByVal OPENINGBALANCE As Decimal,  _
                    ByVal CLOSSINGBALANCE As Decimal,  _
                    ByVal ENTRYFROM As String,  _
                    ByVal NUMWORD As String,  _
                    ByVal VOUCHERCODE As Long,  _
                    ByVal REMARKS As String,  _
                    ByVal PAGE As Integer,  _
                    ByVal RECEIPT As Integer,  _
                    ByVal PROWNO As Long,  _
                    ByVal PHEADNAME As String,  _
                    ByVal PHEAD1 As String,  _
                    ByVal PHEAD2 As String,  _
                    ByVal PLTR As Decimal,  _
                    ByVal PCASH As Decimal,  _
                    ByVal PADJUSTMENT As Decimal,  _
                    ByVal PTOTAL As Decimal,  _
                    ByVal PRP As String,  _
                    ByVal PHEADCODE As Integer,  _
                    ByVal PGROUPCODE As Integer,  _
                    ByVal POPENINGBALANCE As Decimal,  _
                    ByVal PCLOSSINGBALANCE As Decimal,  _
                    ByVal PENTRYFROM As String,  _
                    ByVal PNUMWORD As String,  _
                    ByVal PVOUCHERCODE As Long,  _
                    ByVal PREMARKS As String,  _
                    ByVal PPAGE As Integer,  _
                    ByVal PRECEIPT As Integer) As sp_DayBook_FINALRow
            Dim rowsp_DayBook_FINALRow As sp_DayBook_FINALRow = CType(Me.NewRow,sp_DayBook_FINALRow)
            Dim columnValuesArray() As Object = New Object() {ROWNO, VOUCHERDATE, HEADNAME, HEAD1, HEAD2, LTR, CASH, ADJUSTMENT, TOTAL, RP, HEADCODE, GROUPCODE, OPENINGBALANCE, CLOSSINGBALANCE, ENTRYFROM, NUMWORD, VOUCHERCODE, REMARKS, PAGE, RECEIPT, PROWNO, PHEADNAME, PHEAD1, PHEAD2, PLTR, PCASH, PADJUSTMENT, PTOTAL, PRP, PHEADCODE, PGROUPCODE, POPENINGBALANCE, PCLOSSINGBALANCE, PENTRYFROM, PNUMWORD, PVOUCHERCODE, PREMARKS, PPAGE, PRECEIPT}
            rowsp_DayBook_FINALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_DayBook_FINALRow)
            Return rowsp_DayBook_FINALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_DayBook_FINALDataTable = CType(MyBase.Clone,sp_DayBook_FINALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_DayBook_FINALDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnROWNO = MyBase.Columns("ROWNO")
            Me.columnVOUCHERDATE = MyBase.Columns("VOUCHERDATE")
            Me.columnHEADNAME = MyBase.Columns("HEADNAME")
            Me.columnHEAD1 = MyBase.Columns("HEAD1")
            Me.columnHEAD2 = MyBase.Columns("HEAD2")
            Me.columnLTR = MyBase.Columns("LTR")
            Me.columnCASH = MyBase.Columns("CASH")
            Me.columnADJUSTMENT = MyBase.Columns("ADJUSTMENT")
            Me.columnTOTAL = MyBase.Columns("TOTAL")
            Me.columnRP = MyBase.Columns("RP")
            Me.columnHEADCODE = MyBase.Columns("HEADCODE")
            Me.columnGROUPCODE = MyBase.Columns("GROUPCODE")
            Me.columnOPENINGBALANCE = MyBase.Columns("OPENINGBALANCE")
            Me.columnCLOSSINGBALANCE = MyBase.Columns("CLOSSINGBALANCE")
            Me.columnENTRYFROM = MyBase.Columns("ENTRYFROM")
            Me.columnNUMWORD = MyBase.Columns("NUMWORD")
            Me.columnVOUCHERCODE = MyBase.Columns("VOUCHERCODE")
            Me.columnREMARKS = MyBase.Columns("REMARKS")
            Me.columnPAGE = MyBase.Columns("PAGE")
            Me.columnRECEIPT = MyBase.Columns("RECEIPT")
            Me.columnPROWNO = MyBase.Columns("PROWNO")
            Me.columnPHEADNAME = MyBase.Columns("PHEADNAME")
            Me.columnPHEAD1 = MyBase.Columns("PHEAD1")
            Me.columnPHEAD2 = MyBase.Columns("PHEAD2")
            Me.columnPLTR = MyBase.Columns("PLTR")
            Me.columnPCASH = MyBase.Columns("PCASH")
            Me.columnPADJUSTMENT = MyBase.Columns("PADJUSTMENT")
            Me.columnPTOTAL = MyBase.Columns("PTOTAL")
            Me.columnPRP = MyBase.Columns("PRP")
            Me.columnPHEADCODE = MyBase.Columns("PHEADCODE")
            Me.columnPGROUPCODE = MyBase.Columns("PGROUPCODE")
            Me.columnPOPENINGBALANCE = MyBase.Columns("POPENINGBALANCE")
            Me.columnPCLOSSINGBALANCE = MyBase.Columns("PCLOSSINGBALANCE")
            Me.columnPENTRYFROM = MyBase.Columns("PENTRYFROM")
            Me.columnPNUMWORD = MyBase.Columns("PNUMWORD")
            Me.columnPVOUCHERCODE = MyBase.Columns("PVOUCHERCODE")
            Me.columnPREMARKS = MyBase.Columns("PREMARKS")
            Me.columnPPAGE = MyBase.Columns("PPAGE")
            Me.columnPRECEIPT = MyBase.Columns("PRECEIPT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnROWNO = New Global.System.Data.DataColumn("ROWNO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROWNO)
            Me.columnVOUCHERDATE = New Global.System.Data.DataColumn("VOUCHERDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOUCHERDATE)
            Me.columnHEADNAME = New Global.System.Data.DataColumn("HEADNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADNAME)
            Me.columnHEAD1 = New Global.System.Data.DataColumn("HEAD1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEAD1)
            Me.columnHEAD2 = New Global.System.Data.DataColumn("HEAD2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEAD2)
            Me.columnLTR = New Global.System.Data.DataColumn("LTR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLTR)
            Me.columnCASH = New Global.System.Data.DataColumn("CASH", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASH)
            Me.columnADJUSTMENT = New Global.System.Data.DataColumn("ADJUSTMENT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADJUSTMENT)
            Me.columnTOTAL = New Global.System.Data.DataColumn("TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL)
            Me.columnRP = New Global.System.Data.DataColumn("RP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRP)
            Me.columnHEADCODE = New Global.System.Data.DataColumn("HEADCODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADCODE)
            Me.columnGROUPCODE = New Global.System.Data.DataColumn("GROUPCODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROUPCODE)
            Me.columnOPENINGBALANCE = New Global.System.Data.DataColumn("OPENINGBALANCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPENINGBALANCE)
            Me.columnCLOSSINGBALANCE = New Global.System.Data.DataColumn("CLOSSINGBALANCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLOSSINGBALANCE)
            Me.columnENTRYFROM = New Global.System.Data.DataColumn("ENTRYFROM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENTRYFROM)
            Me.columnNUMWORD = New Global.System.Data.DataColumn("NUMWORD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMWORD)
            Me.columnVOUCHERCODE = New Global.System.Data.DataColumn("VOUCHERCODE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOUCHERCODE)
            Me.columnREMARKS = New Global.System.Data.DataColumn("REMARKS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMARKS)
            Me.columnPAGE = New Global.System.Data.DataColumn("PAGE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGE)
            Me.columnRECEIPT = New Global.System.Data.DataColumn("RECEIPT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIPT)
            Me.columnPROWNO = New Global.System.Data.DataColumn("PROWNO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROWNO)
            Me.columnPHEADNAME = New Global.System.Data.DataColumn("PHEADNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHEADNAME)
            Me.columnPHEAD1 = New Global.System.Data.DataColumn("PHEAD1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHEAD1)
            Me.columnPHEAD2 = New Global.System.Data.DataColumn("PHEAD2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHEAD2)
            Me.columnPLTR = New Global.System.Data.DataColumn("PLTR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLTR)
            Me.columnPCASH = New Global.System.Data.DataColumn("PCASH", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPCASH)
            Me.columnPADJUSTMENT = New Global.System.Data.DataColumn("PADJUSTMENT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPADJUSTMENT)
            Me.columnPTOTAL = New Global.System.Data.DataColumn("PTOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPTOTAL)
            Me.columnPRP = New Global.System.Data.DataColumn("PRP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRP)
            Me.columnPHEADCODE = New Global.System.Data.DataColumn("PHEADCODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHEADCODE)
            Me.columnPGROUPCODE = New Global.System.Data.DataColumn("PGROUPCODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGROUPCODE)
            Me.columnPOPENINGBALANCE = New Global.System.Data.DataColumn("POPENINGBALANCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOPENINGBALANCE)
            Me.columnPCLOSSINGBALANCE = New Global.System.Data.DataColumn("PCLOSSINGBALANCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPCLOSSINGBALANCE)
            Me.columnPENTRYFROM = New Global.System.Data.DataColumn("PENTRYFROM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPENTRYFROM)
            Me.columnPNUMWORD = New Global.System.Data.DataColumn("PNUMWORD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPNUMWORD)
            Me.columnPVOUCHERCODE = New Global.System.Data.DataColumn("PVOUCHERCODE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPVOUCHERCODE)
            Me.columnPREMARKS = New Global.System.Data.DataColumn("PREMARKS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREMARKS)
            Me.columnPPAGE = New Global.System.Data.DataColumn("PPAGE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPAGE)
            Me.columnPRECEIPT = New Global.System.Data.DataColumn("PRECEIPT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECEIPT)
            Me.columnROWNO.ReadOnly = true
            Me.columnVOUCHERDATE.ReadOnly = true
            Me.columnHEADNAME.MaxLength = 50
            Me.columnHEAD1.MaxLength = 50
            Me.columnHEAD2.MaxLength = 50
            Me.columnRP.MaxLength = 1
            Me.columnENTRYFROM.MaxLength = 5
            Me.columnNUMWORD.MaxLength = 2147483647
            Me.columnREMARKS.MaxLength = 150
            Me.columnPROWNO.ReadOnly = true
            Me.columnPHEADNAME.MaxLength = 50
            Me.columnPHEAD1.MaxLength = 50
            Me.columnPHEAD2.MaxLength = 50
            Me.columnPRP.MaxLength = 1
            Me.columnPENTRYFROM.MaxLength = 5
            Me.columnPNUMWORD.MaxLength = 2147483647
            Me.columnPREMARKS.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_DayBook_FINALRow() As sp_DayBook_FINALRow
            Return CType(Me.NewRow,sp_DayBook_FINALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_DayBook_FINALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_DayBook_FINALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_DayBook_FINALRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_FINALRowChanged(Me, New sp_DayBook_FINALRowChangeEvent(CType(e.Row,sp_DayBook_FINALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_DayBook_FINALRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_FINALRowChanging(Me, New sp_DayBook_FINALRowChangeEvent(CType(e.Row,sp_DayBook_FINALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_DayBook_FINALRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_FINALRowDeleted(Me, New sp_DayBook_FINALRowChangeEvent(CType(e.Row,sp_DayBook_FINALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_DayBook_FINALRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_FINALRowDeleting(Me, New sp_DayBook_FINALRowChangeEvent(CType(e.Row,sp_DayBook_FINALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_DayBook_FINALRow(ByVal row As sp_DayBook_FINALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_DayBook_FINALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_DayBook_PytDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnpaymentDate As Global.System.Data.DataColumn
        
        Private columnPHeadName As Global.System.Data.DataColumn
        
        Private columnPHead1 As Global.System.Data.DataColumn
        
        Private columnPHead2 As Global.System.Data.DataColumn
        
        Private columnPLtr As Global.System.Data.DataColumn
        
        Private columnPCash As Global.System.Data.DataColumn
        
        Private columnPAdjustment As Global.System.Data.DataColumn
        
        Private columnPTotal As Global.System.Data.DataColumn
        
        Private columnRp As Global.System.Data.DataColumn
        
        Private columnpage As Global.System.Data.DataColumn
        
        Private columnHeadCode As Global.System.Data.DataColumn
        
        Private columnGroupCode As Global.System.Data.DataColumn
        
        Private columnEntryFrom As Global.System.Data.DataColumn
        
        Private columnVoucherCode As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnreceipt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_DayBook_Pyt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paymentDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaymentDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHeadNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHeadName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHead1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHead1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHead2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHead2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLtrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLtr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PCashColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPCash
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAdjustmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAdjustment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntryFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property receiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_DayBook_PytRow
            Get
                Return CType(Me.Rows(index),sp_DayBook_PytRow)
            End Get
        End Property
        
        Public Event sp_DayBook_PytRowChanging As sp_DayBook_PytRowChangeEventHandler
        
        Public Event sp_DayBook_PytRowChanged As sp_DayBook_PytRowChangeEventHandler
        
        Public Event sp_DayBook_PytRowDeleting As sp_DayBook_PytRowChangeEventHandler
        
        Public Event sp_DayBook_PytRowDeleted As sp_DayBook_PytRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_DayBook_PytRow(ByVal row As sp_DayBook_PytRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_DayBook_PytRow( _
                    ByVal paymentDate As Date,  _
                    ByVal PHeadName As String,  _
                    ByVal PHead1 As String,  _
                    ByVal PHead2 As String,  _
                    ByVal PLtr As Decimal,  _
                    ByVal PCash As Decimal,  _
                    ByVal PAdjustment As Decimal,  _
                    ByVal PTotal As Decimal,  _
                    ByVal Rp As String,  _
                    ByVal page As Integer,  _
                    ByVal HeadCode As Integer,  _
                    ByVal GroupCode As Integer,  _
                    ByVal EntryFrom As String,  _
                    ByVal VoucherCode As Long,  _
                    ByVal Remarks As String,  _
                    ByVal receipt As Integer) As sp_DayBook_PytRow
            Dim rowsp_DayBook_PytRow As sp_DayBook_PytRow = CType(Me.NewRow,sp_DayBook_PytRow)
            Dim columnValuesArray() As Object = New Object() {paymentDate, PHeadName, PHead1, PHead2, PLtr, PCash, PAdjustment, PTotal, Rp, page, HeadCode, GroupCode, EntryFrom, VoucherCode, Remarks, receipt}
            rowsp_DayBook_PytRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_DayBook_PytRow)
            Return rowsp_DayBook_PytRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_DayBook_PytDataTable = CType(MyBase.Clone,sp_DayBook_PytDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_DayBook_PytDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpaymentDate = MyBase.Columns("paymentDate")
            Me.columnPHeadName = MyBase.Columns("PHeadName")
            Me.columnPHead1 = MyBase.Columns("PHead1")
            Me.columnPHead2 = MyBase.Columns("PHead2")
            Me.columnPLtr = MyBase.Columns("PLtr")
            Me.columnPCash = MyBase.Columns("PCash")
            Me.columnPAdjustment = MyBase.Columns("PAdjustment")
            Me.columnPTotal = MyBase.Columns("PTotal")
            Me.columnRp = MyBase.Columns("Rp")
            Me.columnpage = MyBase.Columns("page")
            Me.columnHeadCode = MyBase.Columns("HeadCode")
            Me.columnGroupCode = MyBase.Columns("GroupCode")
            Me.columnEntryFrom = MyBase.Columns("EntryFrom")
            Me.columnVoucherCode = MyBase.Columns("VoucherCode")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnreceipt = MyBase.Columns("receipt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpaymentDate = New Global.System.Data.DataColumn("paymentDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaymentDate)
            Me.columnPHeadName = New Global.System.Data.DataColumn("PHeadName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHeadName)
            Me.columnPHead1 = New Global.System.Data.DataColumn("PHead1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHead1)
            Me.columnPHead2 = New Global.System.Data.DataColumn("PHead2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHead2)
            Me.columnPLtr = New Global.System.Data.DataColumn("PLtr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLtr)
            Me.columnPCash = New Global.System.Data.DataColumn("PCash", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPCash)
            Me.columnPAdjustment = New Global.System.Data.DataColumn("PAdjustment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAdjustment)
            Me.columnPTotal = New Global.System.Data.DataColumn("PTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPTotal)
            Me.columnRp = New Global.System.Data.DataColumn("Rp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRp)
            Me.columnpage = New Global.System.Data.DataColumn("page", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpage)
            Me.columnHeadCode = New Global.System.Data.DataColumn("HeadCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadCode)
            Me.columnGroupCode = New Global.System.Data.DataColumn("GroupCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupCode)
            Me.columnEntryFrom = New Global.System.Data.DataColumn("EntryFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryFrom)
            Me.columnVoucherCode = New Global.System.Data.DataColumn("VoucherCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherCode)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnreceipt = New Global.System.Data.DataColumn("receipt", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreceipt)
            Me.columnPHeadName.MaxLength = 50
            Me.columnPHead1.MaxLength = 50
            Me.columnPHead2.MaxLength = 50
            Me.columnRp.MaxLength = 1
            Me.columnEntryFrom.MaxLength = 5
            Me.columnRemarks.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_DayBook_PytRow() As sp_DayBook_PytRow
            Return CType(Me.NewRow,sp_DayBook_PytRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_DayBook_PytRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_DayBook_PytRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_DayBook_PytRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_PytRowChanged(Me, New sp_DayBook_PytRowChangeEvent(CType(e.Row,sp_DayBook_PytRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_DayBook_PytRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_PytRowChanging(Me, New sp_DayBook_PytRowChangeEvent(CType(e.Row,sp_DayBook_PytRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_DayBook_PytRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_PytRowDeleted(Me, New sp_DayBook_PytRowChangeEvent(CType(e.Row,sp_DayBook_PytRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_DayBook_PytRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_DayBook_PytRowDeleting(Me, New sp_DayBook_PytRowChangeEvent(CType(e.Row,sp_DayBook_PytRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_DayBook_PytRow(ByVal row As sp_DayBook_PytRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_DayBook_PytDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_TDCollectionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRowNo As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnMembername As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnTDOpening As Global.System.Data.DataColumn
        
        Private columnAPril As Global.System.Data.DataColumn
        
        Private columnMay As Global.System.Data.DataColumn
        
        Private columnJune As Global.System.Data.DataColumn
        
        Private columnJuly As Global.System.Data.DataColumn
        
        Private columnAugust As Global.System.Data.DataColumn
        
        Private columnSeptember As Global.System.Data.DataColumn
        
        Private columnOctober As Global.System.Data.DataColumn
        
        Private columnNovember As Global.System.Data.DataColumn
        
        Private columnDecember As Global.System.Data.DataColumn
        
        Private columnJanuary As Global.System.Data.DataColumn
        
        Private columnFebruary As Global.System.Data.DataColumn
        
        Private columnMarch As Global.System.Data.DataColumn
        
        Private columnTotalCollection As Global.System.Data.DataColumn
        
        Private columnClossingBalance As Global.System.Data.DataColumn
        
        Private columncompanycode As Global.System.Data.DataColumn
        
        Private columnintonopening As Global.System.Data.DataColumn
        
        Private columnintoncollection As Global.System.Data.DataColumn
        
        Private columnInsurance As Global.System.Data.DataColumn
        
        Private columnPayment As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_TDCollection"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MembernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMembername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APrilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPril
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JulyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJuly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AugustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAugust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeptemberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeptember
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OctoberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOctober
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NovemberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNovember
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DecemberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDecember
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JanuaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJanuary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FebruaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFebruary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClossingBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClossingBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property companycodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompanycode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property intonopeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnintonopening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property intoncollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnintoncollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsuranceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsurance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_TDCollectionRow
            Get
                Return CType(Me.Rows(index),sp_TDCollectionRow)
            End Get
        End Property
        
        Public Event sp_TDCollectionRowChanging As sp_TDCollectionRowChangeEventHandler
        
        Public Event sp_TDCollectionRowChanged As sp_TDCollectionRowChangeEventHandler
        
        Public Event sp_TDCollectionRowDeleting As sp_TDCollectionRowChangeEventHandler
        
        Public Event sp_TDCollectionRowDeleted As sp_TDCollectionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_TDCollectionRow(ByVal row As sp_TDCollectionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_TDCollectionRow( _
                    ByVal RowNo As Long,  _
                    ByVal MemberCode As Long,  _
                    ByVal EmployeeNumber As Integer,  _
                    ByVal Membername As String,  _
                    ByVal Number As Integer,  _
                    ByVal TDOpening As Decimal,  _
                    ByVal APril As Decimal,  _
                    ByVal May As Decimal,  _
                    ByVal June As Decimal,  _
                    ByVal July As Decimal,  _
                    ByVal August As Decimal,  _
                    ByVal September As Decimal,  _
                    ByVal October As Decimal,  _
                    ByVal November As Decimal,  _
                    ByVal December As Decimal,  _
                    ByVal January As Decimal,  _
                    ByVal February As Decimal,  _
                    ByVal March As Decimal,  _
                    ByVal TotalCollection As Decimal,  _
                    ByVal ClossingBalance As Decimal,  _
                    ByVal companycode As Integer,  _
                    ByVal intonopening As Decimal,  _
                    ByVal intoncollection As Decimal,  _
                    ByVal Insurance As Decimal,  _
                    ByVal Payment As Decimal) As sp_TDCollectionRow
            Dim rowsp_TDCollectionRow As sp_TDCollectionRow = CType(Me.NewRow,sp_TDCollectionRow)
            Dim columnValuesArray() As Object = New Object() {RowNo, MemberCode, EmployeeNumber, Membername, Number, TDOpening, APril, May, June, July, August, September, October, November, December, January, February, March, TotalCollection, ClossingBalance, companycode, intonopening, intoncollection, Insurance, Payment}
            rowsp_TDCollectionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_TDCollectionRow)
            Return rowsp_TDCollectionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberCode(ByVal MemberCode As Long) As sp_TDCollectionRow
            Return CType(Me.Rows.Find(New Object() {MemberCode}),sp_TDCollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_TDCollectionDataTable = CType(MyBase.Clone,sp_TDCollectionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_TDCollectionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRowNo = MyBase.Columns("RowNo")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnMembername = MyBase.Columns("Membername")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnTDOpening = MyBase.Columns("TDOpening")
            Me.columnAPril = MyBase.Columns("APril")
            Me.columnMay = MyBase.Columns("May")
            Me.columnJune = MyBase.Columns("June")
            Me.columnJuly = MyBase.Columns("July")
            Me.columnAugust = MyBase.Columns("August")
            Me.columnSeptember = MyBase.Columns("September")
            Me.columnOctober = MyBase.Columns("October")
            Me.columnNovember = MyBase.Columns("November")
            Me.columnDecember = MyBase.Columns("December")
            Me.columnJanuary = MyBase.Columns("January")
            Me.columnFebruary = MyBase.Columns("February")
            Me.columnMarch = MyBase.Columns("March")
            Me.columnTotalCollection = MyBase.Columns("TotalCollection")
            Me.columnClossingBalance = MyBase.Columns("ClossingBalance")
            Me.columncompanycode = MyBase.Columns("companycode")
            Me.columnintonopening = MyBase.Columns("intonopening")
            Me.columnintoncollection = MyBase.Columns("intoncollection")
            Me.columnInsurance = MyBase.Columns("Insurance")
            Me.columnPayment = MyBase.Columns("Payment")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRowNo = New Global.System.Data.DataColumn("RowNo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowNo)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnMembername = New Global.System.Data.DataColumn("Membername", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMembername)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnTDOpening = New Global.System.Data.DataColumn("TDOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOpening)
            Me.columnAPril = New Global.System.Data.DataColumn("APril", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPril)
            Me.columnMay = New Global.System.Data.DataColumn("May", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMay)
            Me.columnJune = New Global.System.Data.DataColumn("June", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJune)
            Me.columnJuly = New Global.System.Data.DataColumn("July", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJuly)
            Me.columnAugust = New Global.System.Data.DataColumn("August", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAugust)
            Me.columnSeptember = New Global.System.Data.DataColumn("September", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeptember)
            Me.columnOctober = New Global.System.Data.DataColumn("October", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOctober)
            Me.columnNovember = New Global.System.Data.DataColumn("November", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNovember)
            Me.columnDecember = New Global.System.Data.DataColumn("December", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDecember)
            Me.columnJanuary = New Global.System.Data.DataColumn("January", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJanuary)
            Me.columnFebruary = New Global.System.Data.DataColumn("February", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFebruary)
            Me.columnMarch = New Global.System.Data.DataColumn("March", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarch)
            Me.columnTotalCollection = New Global.System.Data.DataColumn("TotalCollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCollection)
            Me.columnClossingBalance = New Global.System.Data.DataColumn("ClossingBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClossingBalance)
            Me.columncompanycode = New Global.System.Data.DataColumn("companycode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompanycode)
            Me.columnintonopening = New Global.System.Data.DataColumn("intonopening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnintonopening)
            Me.columnintoncollection = New Global.System.Data.DataColumn("intoncollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnintoncollection)
            Me.columnInsurance = New Global.System.Data.DataColumn("Insurance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsurance)
            Me.columnPayment = New Global.System.Data.DataColumn("Payment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayment)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberCode}, true))
            Me.columnRowNo.ReadOnly = true
            Me.columnMemberCode.AllowDBNull = false
            Me.columnMemberCode.Unique = true
            Me.columnEmployeeNumber.AllowDBNull = false
            Me.columnMembername.MaxLength = 50
            Me.columnNumber.AllowDBNull = false
            Me.columnTDOpening.AllowDBNull = false
            Me.columnTotalCollection.ReadOnly = true
            Me.columnClossingBalance.ReadOnly = true
            Me.columncompanycode.ReadOnly = true
            Me.columnPayment.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_TDCollectionRow() As sp_TDCollectionRow
            Return CType(Me.NewRow,sp_TDCollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_TDCollectionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_TDCollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_TDCollectionRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_TDCollectionRowChanged(Me, New sp_TDCollectionRowChangeEvent(CType(e.Row,sp_TDCollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_TDCollectionRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_TDCollectionRowChanging(Me, New sp_TDCollectionRowChangeEvent(CType(e.Row,sp_TDCollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_TDCollectionRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_TDCollectionRowDeleted(Me, New sp_TDCollectionRowChangeEvent(CType(e.Row,sp_TDCollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_TDCollectionRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_TDCollectionRowDeleting(Me, New sp_TDCollectionRowChangeEvent(CType(e.Row,sp_TDCollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_TDCollectionRow(ByVal row As sp_TDCollectionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_TDCollectionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_Member_GetAllDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnTDOpening As Global.System.Data.DataColumn
        
        Private columnstrEmpNo As Global.System.Data.DataColumn
        
        Private columnMemberName As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnMEMBERTYPE1 As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnAddress4 As Global.System.Data.DataColumn
        
        Private columnMobileNo As Global.System.Data.DataColumn
        
        Private columnMemberType As Global.System.Data.DataColumn
        
        Private columnShareOpening As Global.System.Data.DataColumn
        
        Private columnMemberName_Tamil As Global.System.Data.DataColumn
        
        Private columnAddress_Tamil1 As Global.System.Data.DataColumn
        
        Private columnAddress_Tamil2 As Global.System.Data.DataColumn
        
        Private columnAddress_Tamil3 As Global.System.Data.DataColumn
        
        Private columnAddress_Tamil4 As Global.System.Data.DataColumn
        
        Private columnPhoto_Image As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_Member_GetAll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strEmpNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrEmpNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEMBERTYPE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBERTYPE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MobileNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobileNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberName_TamilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName_Tamil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address_Tamil1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress_Tamil1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address_Tamil2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress_Tamil2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address_Tamil3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress_Tamil3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address_Tamil4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress_Tamil4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Photo_ImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhoto_Image
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_Member_GetAllRow
            Get
                Return CType(Me.Rows(index),sp_Member_GetAllRow)
            End Get
        End Property
        
        Public Event sp_Member_GetAllRowChanging As sp_Member_GetAllRowChangeEventHandler
        
        Public Event sp_Member_GetAllRowChanged As sp_Member_GetAllRowChangeEventHandler
        
        Public Event sp_Member_GetAllRowDeleting As sp_Member_GetAllRowChangeEventHandler
        
        Public Event sp_Member_GetAllRowDeleted As sp_Member_GetAllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_Member_GetAllRow(ByVal row As sp_Member_GetAllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_Member_GetAllRow( _
                    ByVal MemberCode As Long,  _
                    ByVal Number As Integer,  _
                    ByVal EmployeeNumber As Integer,  _
                    ByVal TDOpening As Decimal,  _
                    ByVal strEmpNo As String,  _
                    ByVal MemberName As String,  _
                    ByVal Status As Boolean,  _
                    ByVal MEMBERTYPE1 As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Address4 As String,  _
                    ByVal MobileNo As String,  _
                    ByVal MemberType As String,  _
                    ByVal ShareOpening As Decimal,  _
                    ByVal MemberName_Tamil As String,  _
                    ByVal Address_Tamil1 As String,  _
                    ByVal Address_Tamil2 As String,  _
                    ByVal Address_Tamil3 As String,  _
                    ByVal Address_Tamil4 As String,  _
                    ByVal Photo_Image() As Byte) As sp_Member_GetAllRow
            Dim rowsp_Member_GetAllRow As sp_Member_GetAllRow = CType(Me.NewRow,sp_Member_GetAllRow)
            Dim columnValuesArray() As Object = New Object() {MemberCode, Number, EmployeeNumber, TDOpening, strEmpNo, MemberName, Status, MEMBERTYPE1, Address1, Address2, Address3, Address4, MobileNo, MemberType, ShareOpening, MemberName_Tamil, Address_Tamil1, Address_Tamil2, Address_Tamil3, Address_Tamil4, Photo_Image}
            rowsp_Member_GetAllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_Member_GetAllRow)
            Return rowsp_Member_GetAllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberCode(ByVal MemberCode As Long) As sp_Member_GetAllRow
            Return CType(Me.Rows.Find(New Object() {MemberCode}),sp_Member_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_Member_GetAllDataTable = CType(MyBase.Clone,sp_Member_GetAllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_Member_GetAllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnTDOpening = MyBase.Columns("TDOpening")
            Me.columnstrEmpNo = MyBase.Columns("strEmpNo")
            Me.columnMemberName = MyBase.Columns("MemberName")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnMEMBERTYPE1 = MyBase.Columns("MEMBERTYPE1")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnAddress4 = MyBase.Columns("Address4")
            Me.columnMobileNo = MyBase.Columns("MobileNo")
            Me.columnMemberType = MyBase.Columns("MemberType")
            Me.columnShareOpening = MyBase.Columns("ShareOpening")
            Me.columnMemberName_Tamil = MyBase.Columns("MemberName_Tamil")
            Me.columnAddress_Tamil1 = MyBase.Columns("Address_Tamil1")
            Me.columnAddress_Tamil2 = MyBase.Columns("Address_Tamil2")
            Me.columnAddress_Tamil3 = MyBase.Columns("Address_Tamil3")
            Me.columnAddress_Tamil4 = MyBase.Columns("Address_Tamil4")
            Me.columnPhoto_Image = MyBase.Columns("Photo_Image")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnTDOpening = New Global.System.Data.DataColumn("TDOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOpening)
            Me.columnstrEmpNo = New Global.System.Data.DataColumn("strEmpNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrEmpNo)
            Me.columnMemberName = New Global.System.Data.DataColumn("MemberName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnMEMBERTYPE1 = New Global.System.Data.DataColumn("MEMBERTYPE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBERTYPE1)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnAddress4 = New Global.System.Data.DataColumn("Address4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress4)
            Me.columnMobileNo = New Global.System.Data.DataColumn("MobileNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobileNo)
            Me.columnMemberType = New Global.System.Data.DataColumn("MemberType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberType)
            Me.columnShareOpening = New Global.System.Data.DataColumn("ShareOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareOpening)
            Me.columnMemberName_Tamil = New Global.System.Data.DataColumn("MemberName_Tamil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName_Tamil)
            Me.columnAddress_Tamil1 = New Global.System.Data.DataColumn("Address_Tamil1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress_Tamil1)
            Me.columnAddress_Tamil2 = New Global.System.Data.DataColumn("Address_Tamil2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress_Tamil2)
            Me.columnAddress_Tamil3 = New Global.System.Data.DataColumn("Address_Tamil3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress_Tamil3)
            Me.columnAddress_Tamil4 = New Global.System.Data.DataColumn("Address_Tamil4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress_Tamil4)
            Me.columnPhoto_Image = New Global.System.Data.DataColumn("Photo_Image", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhoto_Image)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberCode}, true))
            Me.columnMemberCode.AllowDBNull = false
            Me.columnMemberCode.Unique = true
            Me.columnNumber.AllowDBNull = false
            Me.columnEmployeeNumber.AllowDBNull = false
            Me.columnTDOpening.AllowDBNull = false
            Me.columnstrEmpNo.ReadOnly = true
            Me.columnstrEmpNo.MaxLength = 30
            Me.columnMemberName.MaxLength = 50
            Me.columnStatus.AllowDBNull = false
            Me.columnMEMBERTYPE1.MaxLength = 50
            Me.columnAddress1.MaxLength = 50
            Me.columnAddress2.MaxLength = 50
            Me.columnAddress3.MaxLength = 50
            Me.columnAddress4.MaxLength = 50
            Me.columnMobileNo.MaxLength = 50
            Me.columnMemberType.MaxLength = 50
            Me.columnShareOpening.AllowDBNull = false
            Me.columnMemberName_Tamil.MaxLength = 100
            Me.columnAddress_Tamil1.MaxLength = 100
            Me.columnAddress_Tamil2.MaxLength = 100
            Me.columnAddress_Tamil3.MaxLength = 100
            Me.columnAddress_Tamil4.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_Member_GetAllRow() As sp_Member_GetAllRow
            Return CType(Me.NewRow,sp_Member_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_Member_GetAllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_Member_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_Member_GetAllRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_Member_GetAllRowChanged(Me, New sp_Member_GetAllRowChangeEvent(CType(e.Row,sp_Member_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_Member_GetAllRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_Member_GetAllRowChanging(Me, New sp_Member_GetAllRowChangeEvent(CType(e.Row,sp_Member_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_Member_GetAllRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_Member_GetAllRowDeleted(Me, New sp_Member_GetAllRowChangeEvent(CType(e.Row,sp_Member_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_Member_GetAllRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_Member_GetAllRowDeleting(Me, New sp_Member_GetAllRowChangeEvent(CType(e.Row,sp_Member_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_Member_GetAllRow(ByVal row As sp_Member_GetAllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_Member_GetAllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_DayBookDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRowId As Global.System.Data.DataColumn
        
        Private columnVoucherDate As Global.System.Data.DataColumn
        
        Private columnHeadName As Global.System.Data.DataColumn
        
        Private columnHead1 As Global.System.Data.DataColumn
        
        Private columnHead2 As Global.System.Data.DataColumn
        
        Private columnLtr As Global.System.Data.DataColumn
        
        Private columnCash As Global.System.Data.DataColumn
        
        Private columnAdjustment As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnRp As Global.System.Data.DataColumn
        
        Private columnHeadCode As Global.System.Data.DataColumn
        
        Private columnGroupCode As Global.System.Data.DataColumn
        
        Private columnOpeningBalance As Global.System.Data.DataColumn
        
        Private columnClossingBalance As Global.System.Data.DataColumn
        
        Private columnEntryFrom As Global.System.Data.DataColumn
        
        Private columnnumword As Global.System.Data.DataColumn
        
        Private columnVoucherCode As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnpage As Global.System.Data.DataColumn
        
        Private columnreceipt As Global.System.Data.DataColumn
        
        Private columnRptAdjs As Global.System.Data.DataColumn
        
        Private columnPytAdjs As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_DayBook"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Head1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHead1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Head2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHead2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LtrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLtr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCash
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpeningBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpeningBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClossingBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClossingBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntryFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numwordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property receiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RptAdjsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRptAdjs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PytAdjsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPytAdjs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_DayBookRow
            Get
                Return CType(Me.Rows(index),sp_DayBookRow)
            End Get
        End Property
        
        Public Event sp_DayBookRowChanging As sp_DayBookRowChangeEventHandler
        
        Public Event sp_DayBookRowChanged As sp_DayBookRowChangeEventHandler
        
        Public Event sp_DayBookRowDeleting As sp_DayBookRowChangeEventHandler
        
        Public Event sp_DayBookRowDeleted As sp_DayBookRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_DayBookRow(ByVal row As sp_DayBookRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_DayBookRow( _
                    ByVal VoucherDate As Date,  _
                    ByVal HeadName As String,  _
                    ByVal Head1 As String,  _
                    ByVal Head2 As String,  _
                    ByVal Ltr As Decimal,  _
                    ByVal Cash As Decimal,  _
                    ByVal Adjustment As Decimal,  _
                    ByVal Total As Decimal,  _
                    ByVal Rp As String,  _
                    ByVal HeadCode As Integer,  _
                    ByVal GroupCode As Integer,  _
                    ByVal OpeningBalance As Decimal,  _
                    ByVal ClossingBalance As Decimal,  _
                    ByVal EntryFrom As String,  _
                    ByVal numword As String,  _
                    ByVal VoucherCode As Long,  _
                    ByVal Remarks As String,  _
                    ByVal page As Integer,  _
                    ByVal receipt As Integer,  _
                    ByVal RptAdjs As Decimal,  _
                    ByVal PytAdjs As Decimal) As sp_DayBookRow
            Dim rowsp_DayBookRow As sp_DayBookRow = CType(Me.NewRow,sp_DayBookRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, VoucherDate, HeadName, Head1, Head2, Ltr, Cash, Adjustment, Total, Rp, HeadCode, GroupCode, OpeningBalance, ClossingBalance, EntryFrom, numword, VoucherCode, Remarks, page, receipt, RptAdjs, PytAdjs}
            rowsp_DayBookRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_DayBookRow)
            Return rowsp_DayBookRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_DayBookDataTable = CType(MyBase.Clone,sp_DayBookDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_DayBookDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRowId = MyBase.Columns("RowId")
            Me.columnVoucherDate = MyBase.Columns("VoucherDate")
            Me.columnHeadName = MyBase.Columns("HeadName")
            Me.columnHead1 = MyBase.Columns("Head1")
            Me.columnHead2 = MyBase.Columns("Head2")
            Me.columnLtr = MyBase.Columns("Ltr")
            Me.columnCash = MyBase.Columns("Cash")
            Me.columnAdjustment = MyBase.Columns("Adjustment")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnRp = MyBase.Columns("Rp")
            Me.columnHeadCode = MyBase.Columns("HeadCode")
            Me.columnGroupCode = MyBase.Columns("GroupCode")
            Me.columnOpeningBalance = MyBase.Columns("OpeningBalance")
            Me.columnClossingBalance = MyBase.Columns("ClossingBalance")
            Me.columnEntryFrom = MyBase.Columns("EntryFrom")
            Me.columnnumword = MyBase.Columns("numword")
            Me.columnVoucherCode = MyBase.Columns("VoucherCode")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnpage = MyBase.Columns("page")
            Me.columnreceipt = MyBase.Columns("receipt")
            Me.columnRptAdjs = MyBase.Columns("RptAdjs")
            Me.columnPytAdjs = MyBase.Columns("PytAdjs")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRowId = New Global.System.Data.DataColumn("RowId", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowId)
            Me.columnVoucherDate = New Global.System.Data.DataColumn("VoucherDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherDate)
            Me.columnHeadName = New Global.System.Data.DataColumn("HeadName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadName)
            Me.columnHead1 = New Global.System.Data.DataColumn("Head1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHead1)
            Me.columnHead2 = New Global.System.Data.DataColumn("Head2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHead2)
            Me.columnLtr = New Global.System.Data.DataColumn("Ltr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLtr)
            Me.columnCash = New Global.System.Data.DataColumn("Cash", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCash)
            Me.columnAdjustment = New Global.System.Data.DataColumn("Adjustment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustment)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnRp = New Global.System.Data.DataColumn("Rp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRp)
            Me.columnHeadCode = New Global.System.Data.DataColumn("HeadCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadCode)
            Me.columnGroupCode = New Global.System.Data.DataColumn("GroupCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupCode)
            Me.columnOpeningBalance = New Global.System.Data.DataColumn("OpeningBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpeningBalance)
            Me.columnClossingBalance = New Global.System.Data.DataColumn("ClossingBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClossingBalance)
            Me.columnEntryFrom = New Global.System.Data.DataColumn("EntryFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryFrom)
            Me.columnnumword = New Global.System.Data.DataColumn("numword", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumword)
            Me.columnVoucherCode = New Global.System.Data.DataColumn("VoucherCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherCode)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnpage = New Global.System.Data.DataColumn("page", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpage)
            Me.columnreceipt = New Global.System.Data.DataColumn("receipt", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreceipt)
            Me.columnRptAdjs = New Global.System.Data.DataColumn("RptAdjs", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRptAdjs)
            Me.columnPytAdjs = New Global.System.Data.DataColumn("PytAdjs", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPytAdjs)
            Me.columnRowId.AutoIncrement = true
            Me.columnRowId.AllowDBNull = false
            Me.columnRowId.ReadOnly = true
            Me.columnHeadName.MaxLength = 50
            Me.columnHead1.MaxLength = 50
            Me.columnHead2.MaxLength = 50
            Me.columnRp.MaxLength = 1
            Me.columnEntryFrom.MaxLength = 5
            Me.columnnumword.MaxLength = 2147483647
            Me.columnRemarks.MaxLength = 150
            Me.columnRptAdjs.ReadOnly = true
            Me.columnPytAdjs.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_DayBookRow() As sp_DayBookRow
            Return CType(Me.NewRow,sp_DayBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_DayBookRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_DayBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_DayBookRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_DayBookRowChanged(Me, New sp_DayBookRowChangeEvent(CType(e.Row,sp_DayBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_DayBookRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_DayBookRowChanging(Me, New sp_DayBookRowChangeEvent(CType(e.Row,sp_DayBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_DayBookRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_DayBookRowDeleted(Me, New sp_DayBookRowChangeEvent(CType(e.Row,sp_DayBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_DayBookRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_DayBookRowDeleting(Me, New sp_DayBookRowChangeEvent(CType(e.Row,sp_DayBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_DayBookRow(ByVal row As sp_DayBookRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_DayBookDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_TDClossing_GetAllDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTDClossingCode As Global.System.Data.DataColumn
        
        Private columnTDClossingDate As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnOpeningAmt As Global.System.Data.DataColumn
        
        Private columnTDCollection As Global.System.Data.DataColumn
        
        Private columnIntonOpening As Global.System.Data.DataColumn
        
        Private columnIntonCollection As Global.System.Data.DataColumn
        
        Private columnTotalPayment As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnTDOpening As Global.System.Data.DataColumn
        
        Private columnMemberName As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnROI As Global.System.Data.DataColumn
        
        Private columnOtherReceipt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_TDClossing_GetAll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDClossingCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDClossingCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDClossingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDClossingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpeningAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpeningAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDCollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntonOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntonOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntonCollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntonCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherReceiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherReceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_TDClossing_GetAllRow
            Get
                Return CType(Me.Rows(index),sp_TDClossing_GetAllRow)
            End Get
        End Property
        
        Public Event sp_TDClossing_GetAllRowChanging As sp_TDClossing_GetAllRowChangeEventHandler
        
        Public Event sp_TDClossing_GetAllRowChanged As sp_TDClossing_GetAllRowChangeEventHandler
        
        Public Event sp_TDClossing_GetAllRowDeleting As sp_TDClossing_GetAllRowChangeEventHandler
        
        Public Event sp_TDClossing_GetAllRowDeleted As sp_TDClossing_GetAllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_TDClossing_GetAllRow(ByVal row As sp_TDClossing_GetAllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_TDClossing_GetAllRow(ByVal TDClossingCode As Integer, ByVal TDClossingDate As Date, ByVal MemberCode As Long, ByVal OpeningAmt As Decimal, ByVal TDCollection As Decimal, ByVal IntonOpening As Decimal, ByVal IntonCollection As Decimal, ByVal TotalPayment As Decimal, ByVal Number As Integer, ByVal EmployeeNumber As Integer, ByVal TDOpening As Decimal, ByVal MemberName As String, ByVal Status As Boolean, ByVal ROI As Decimal, ByVal OtherReceipt As Decimal) As sp_TDClossing_GetAllRow
            Dim rowsp_TDClossing_GetAllRow As sp_TDClossing_GetAllRow = CType(Me.NewRow,sp_TDClossing_GetAllRow)
            Dim columnValuesArray() As Object = New Object() {TDClossingCode, TDClossingDate, MemberCode, OpeningAmt, TDCollection, IntonOpening, IntonCollection, TotalPayment, Number, EmployeeNumber, TDOpening, MemberName, Status, ROI, OtherReceipt}
            rowsp_TDClossing_GetAllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_TDClossing_GetAllRow)
            Return rowsp_TDClossing_GetAllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTDClossingCode(ByVal TDClossingCode As Integer) As sp_TDClossing_GetAllRow
            Return CType(Me.Rows.Find(New Object() {TDClossingCode}),sp_TDClossing_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_TDClossing_GetAllDataTable = CType(MyBase.Clone,sp_TDClossing_GetAllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_TDClossing_GetAllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTDClossingCode = MyBase.Columns("TDClossingCode")
            Me.columnTDClossingDate = MyBase.Columns("TDClossingDate")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnOpeningAmt = MyBase.Columns("OpeningAmt")
            Me.columnTDCollection = MyBase.Columns("TDCollection")
            Me.columnIntonOpening = MyBase.Columns("IntonOpening")
            Me.columnIntonCollection = MyBase.Columns("IntonCollection")
            Me.columnTotalPayment = MyBase.Columns("TotalPayment")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnTDOpening = MyBase.Columns("TDOpening")
            Me.columnMemberName = MyBase.Columns("MemberName")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnROI = MyBase.Columns("ROI")
            Me.columnOtherReceipt = MyBase.Columns("OtherReceipt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTDClossingCode = New Global.System.Data.DataColumn("TDClossingCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDClossingCode)
            Me.columnTDClossingDate = New Global.System.Data.DataColumn("TDClossingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDClossingDate)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnOpeningAmt = New Global.System.Data.DataColumn("OpeningAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpeningAmt)
            Me.columnTDCollection = New Global.System.Data.DataColumn("TDCollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDCollection)
            Me.columnIntonOpening = New Global.System.Data.DataColumn("IntonOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntonOpening)
            Me.columnIntonCollection = New Global.System.Data.DataColumn("IntonCollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntonCollection)
            Me.columnTotalPayment = New Global.System.Data.DataColumn("TotalPayment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPayment)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnTDOpening = New Global.System.Data.DataColumn("TDOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOpening)
            Me.columnMemberName = New Global.System.Data.DataColumn("MemberName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnROI = New Global.System.Data.DataColumn("ROI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROI)
            Me.columnOtherReceipt = New Global.System.Data.DataColumn("OtherReceipt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherReceipt)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTDClossingCode}, true))
            Me.columnTDClossingCode.AllowDBNull = false
            Me.columnTDClossingCode.Unique = true
            Me.columnMemberCode.AllowDBNull = false
            Me.columnMemberName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_TDClossing_GetAllRow() As sp_TDClossing_GetAllRow
            Return CType(Me.NewRow,sp_TDClossing_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_TDClossing_GetAllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_TDClossing_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_TDClossing_GetAllRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_TDClossing_GetAllRowChanged(Me, New sp_TDClossing_GetAllRowChangeEvent(CType(e.Row,sp_TDClossing_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_TDClossing_GetAllRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_TDClossing_GetAllRowChanging(Me, New sp_TDClossing_GetAllRowChangeEvent(CType(e.Row,sp_TDClossing_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_TDClossing_GetAllRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_TDClossing_GetAllRowDeleted(Me, New sp_TDClossing_GetAllRowChangeEvent(CType(e.Row,sp_TDClossing_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_TDClossing_GetAllRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_TDClossing_GetAllRowDeleting(Me, New sp_TDClossing_GetAllRowChangeEvent(CType(e.Row,sp_TDClossing_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_TDClossing_GetAllRow(ByVal row As sp_TDClossing_GetAllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_TDClossing_GetAllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_TDRefund_GetAllDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRefundCode As Global.System.Data.DataColumn
        
        Private columnRefundDate As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnOpeningAmt As Global.System.Data.DataColumn
        
        Private columnTDCollection As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnTDOpening As Global.System.Data.DataColumn
        
        Private columnMemberName As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnRefundAmount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_TDRefund_GetAll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefundCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefundCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefundDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefundDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpeningAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpeningAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDCollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefundAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefundAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_TDRefund_GetAllRow
            Get
                Return CType(Me.Rows(index),sp_TDRefund_GetAllRow)
            End Get
        End Property
        
        Public Event sp_TDRefund_GetAllRowChanging As sp_TDRefund_GetAllRowChangeEventHandler
        
        Public Event sp_TDRefund_GetAllRowChanged As sp_TDRefund_GetAllRowChangeEventHandler
        
        Public Event sp_TDRefund_GetAllRowDeleting As sp_TDRefund_GetAllRowChangeEventHandler
        
        Public Event sp_TDRefund_GetAllRowDeleted As sp_TDRefund_GetAllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_TDRefund_GetAllRow(ByVal row As sp_TDRefund_GetAllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_TDRefund_GetAllRow(ByVal RefundCode As Integer, ByVal RefundDate As Date, ByVal MemberCode As Long, ByVal OpeningAmt As Decimal, ByVal TDCollection As Decimal, ByVal Number As Integer, ByVal EmployeeNumber As Integer, ByVal TDOpening As Decimal, ByVal MemberName As String, ByVal Status As Boolean, ByVal RefundAmount As Decimal) As sp_TDRefund_GetAllRow
            Dim rowsp_TDRefund_GetAllRow As sp_TDRefund_GetAllRow = CType(Me.NewRow,sp_TDRefund_GetAllRow)
            Dim columnValuesArray() As Object = New Object() {RefundCode, RefundDate, MemberCode, OpeningAmt, TDCollection, Number, EmployeeNumber, TDOpening, MemberName, Status, RefundAmount}
            rowsp_TDRefund_GetAllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_TDRefund_GetAllRow)
            Return rowsp_TDRefund_GetAllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRefundCode(ByVal RefundCode As Integer) As sp_TDRefund_GetAllRow
            Return CType(Me.Rows.Find(New Object() {RefundCode}),sp_TDRefund_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_TDRefund_GetAllDataTable = CType(MyBase.Clone,sp_TDRefund_GetAllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_TDRefund_GetAllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRefundCode = MyBase.Columns("RefundCode")
            Me.columnRefundDate = MyBase.Columns("RefundDate")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnOpeningAmt = MyBase.Columns("OpeningAmt")
            Me.columnTDCollection = MyBase.Columns("TDCollection")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnTDOpening = MyBase.Columns("TDOpening")
            Me.columnMemberName = MyBase.Columns("MemberName")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnRefundAmount = MyBase.Columns("RefundAmount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRefundCode = New Global.System.Data.DataColumn("RefundCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefundCode)
            Me.columnRefundDate = New Global.System.Data.DataColumn("RefundDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefundDate)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnOpeningAmt = New Global.System.Data.DataColumn("OpeningAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpeningAmt)
            Me.columnTDCollection = New Global.System.Data.DataColumn("TDCollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDCollection)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnTDOpening = New Global.System.Data.DataColumn("TDOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOpening)
            Me.columnMemberName = New Global.System.Data.DataColumn("MemberName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnRefundAmount = New Global.System.Data.DataColumn("RefundAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefundAmount)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRefundCode}, true))
            Me.columnRefundCode.AllowDBNull = false
            Me.columnRefundCode.Unique = true
            Me.columnRefundDate.AllowDBNull = false
            Me.columnMemberCode.AllowDBNull = false
            Me.columnMemberName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_TDRefund_GetAllRow() As sp_TDRefund_GetAllRow
            Return CType(Me.NewRow,sp_TDRefund_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_TDRefund_GetAllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_TDRefund_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_TDRefund_GetAllRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_TDRefund_GetAllRowChanged(Me, New sp_TDRefund_GetAllRowChangeEvent(CType(e.Row,sp_TDRefund_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_TDRefund_GetAllRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_TDRefund_GetAllRowChanging(Me, New sp_TDRefund_GetAllRowChangeEvent(CType(e.Row,sp_TDRefund_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_TDRefund_GetAllRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_TDRefund_GetAllRowDeleted(Me, New sp_TDRefund_GetAllRowChangeEvent(CType(e.Row,sp_TDRefund_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_TDRefund_GetAllRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_TDRefund_GetAllRowDeleting(Me, New sp_TDRefund_GetAllRowChangeEvent(CType(e.Row,sp_TDRefund_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_TDRefund_GetAllRow(ByVal row As sp_TDRefund_GetAllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_TDRefund_GetAllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_TrailBalanceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOrderno As Global.System.Data.DataColumn
        
        Private columnGroupCode As Global.System.Data.DataColumn
        
        Private columnGroupName As Global.System.Data.DataColumn
        
        Private columnopnDebit As Global.System.Data.DataColumn
        
        Private columnopnCredit As Global.System.Data.DataColumn
        
        Private columnVDebit As Global.System.Data.DataColumn
        
        Private columnVCredit As Global.System.Data.DataColumn
        
        Private columnCDebit As Global.System.Data.DataColumn
        
        Private columnCCredit As Global.System.Data.DataColumn
        
        Private columnFromDate As Global.System.Data.DataColumn
        
        Private columnTodate As Global.System.Data.DataColumn
        
        Private columnHeadCode As Global.System.Data.DataColumn
        
        Private columnHeadName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_TrailBalance"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdernoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property opnDebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnopnDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property opnCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnopnCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VDebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FromDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFromDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TodateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTodate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeadNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeadName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_TrailBalanceRow
            Get
                Return CType(Me.Rows(index),sp_TrailBalanceRow)
            End Get
        End Property
        
        Public Event sp_TrailBalanceRowChanging As sp_TrailBalanceRowChangeEventHandler
        
        Public Event sp_TrailBalanceRowChanged As sp_TrailBalanceRowChangeEventHandler
        
        Public Event sp_TrailBalanceRowDeleting As sp_TrailBalanceRowChangeEventHandler
        
        Public Event sp_TrailBalanceRowDeleted As sp_TrailBalanceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_TrailBalanceRow(ByVal row As sp_TrailBalanceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_TrailBalanceRow(ByVal Orderno As Integer, ByVal GroupCode As Integer, ByVal GroupName As String, ByVal opnDebit As Decimal, ByVal opnCredit As Decimal, ByVal VDebit As Decimal, ByVal VCredit As Decimal, ByVal CDebit As Decimal, ByVal CCredit As Decimal, ByVal FromDate As Date, ByVal Todate As Date, ByVal HeadCode As Integer, ByVal HeadName As String) As sp_TrailBalanceRow
            Dim rowsp_TrailBalanceRow As sp_TrailBalanceRow = CType(Me.NewRow,sp_TrailBalanceRow)
            Dim columnValuesArray() As Object = New Object() {Orderno, GroupCode, GroupName, opnDebit, opnCredit, VDebit, VCredit, CDebit, CCredit, FromDate, Todate, HeadCode, HeadName}
            rowsp_TrailBalanceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_TrailBalanceRow)
            Return rowsp_TrailBalanceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByHeadCode(ByVal HeadCode As Integer) As sp_TrailBalanceRow
            Return CType(Me.Rows.Find(New Object() {HeadCode}),sp_TrailBalanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_TrailBalanceDataTable = CType(MyBase.Clone,sp_TrailBalanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_TrailBalanceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOrderno = MyBase.Columns("Orderno")
            Me.columnGroupCode = MyBase.Columns("GroupCode")
            Me.columnGroupName = MyBase.Columns("GroupName")
            Me.columnopnDebit = MyBase.Columns("opnDebit")
            Me.columnopnCredit = MyBase.Columns("opnCredit")
            Me.columnVDebit = MyBase.Columns("VDebit")
            Me.columnVCredit = MyBase.Columns("VCredit")
            Me.columnCDebit = MyBase.Columns("CDebit")
            Me.columnCCredit = MyBase.Columns("CCredit")
            Me.columnFromDate = MyBase.Columns("FromDate")
            Me.columnTodate = MyBase.Columns("Todate")
            Me.columnHeadCode = MyBase.Columns("HeadCode")
            Me.columnHeadName = MyBase.Columns("HeadName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOrderno = New Global.System.Data.DataColumn("Orderno", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderno)
            Me.columnGroupCode = New Global.System.Data.DataColumn("GroupCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupCode)
            Me.columnGroupName = New Global.System.Data.DataColumn("GroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupName)
            Me.columnopnDebit = New Global.System.Data.DataColumn("opnDebit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnopnDebit)
            Me.columnopnCredit = New Global.System.Data.DataColumn("opnCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnopnCredit)
            Me.columnVDebit = New Global.System.Data.DataColumn("VDebit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVDebit)
            Me.columnVCredit = New Global.System.Data.DataColumn("VCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVCredit)
            Me.columnCDebit = New Global.System.Data.DataColumn("CDebit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDebit)
            Me.columnCCredit = New Global.System.Data.DataColumn("CCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCredit)
            Me.columnFromDate = New Global.System.Data.DataColumn("FromDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFromDate)
            Me.columnTodate = New Global.System.Data.DataColumn("Todate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTodate)
            Me.columnHeadCode = New Global.System.Data.DataColumn("HeadCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadCode)
            Me.columnHeadName = New Global.System.Data.DataColumn("HeadName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeadName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnHeadCode}, true))
            Me.columnGroupCode.AllowDBNull = false
            Me.columnGroupName.MaxLength = 50
            Me.columnopnDebit.ReadOnly = true
            Me.columnopnCredit.ReadOnly = true
            Me.columnVDebit.ReadOnly = true
            Me.columnVCredit.ReadOnly = true
            Me.columnCDebit.ReadOnly = true
            Me.columnCCredit.ReadOnly = true
            Me.columnFromDate.ReadOnly = true
            Me.columnTodate.ReadOnly = true
            Me.columnHeadCode.AllowDBNull = false
            Me.columnHeadCode.Unique = true
            Me.columnHeadName.AllowDBNull = false
            Me.columnHeadName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_TrailBalanceRow() As sp_TrailBalanceRow
            Return CType(Me.NewRow,sp_TrailBalanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_TrailBalanceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_TrailBalanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_TrailBalanceRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_TrailBalanceRowChanged(Me, New sp_TrailBalanceRowChangeEvent(CType(e.Row,sp_TrailBalanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_TrailBalanceRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_TrailBalanceRowChanging(Me, New sp_TrailBalanceRowChangeEvent(CType(e.Row,sp_TrailBalanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_TrailBalanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_TrailBalanceRowDeleted(Me, New sp_TrailBalanceRowChangeEvent(CType(e.Row,sp_TrailBalanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_TrailBalanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_TrailBalanceRowDeleting(Me, New sp_TrailBalanceRowChangeEvent(CType(e.Row,sp_TrailBalanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_TrailBalanceRow(ByVal row As sp_TrailBalanceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_TrailBalanceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_ShareCollection_rptDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncompanycode As Global.System.Data.DataColumn
        
        Private columnRowNo As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnMembername As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnTDOpening As Global.System.Data.DataColumn
        
        Private columnAPril As Global.System.Data.DataColumn
        
        Private columnMay As Global.System.Data.DataColumn
        
        Private columnJune As Global.System.Data.DataColumn
        
        Private columnJuly As Global.System.Data.DataColumn
        
        Private columnAugust As Global.System.Data.DataColumn
        
        Private columnSeptember As Global.System.Data.DataColumn
        
        Private columnOctober As Global.System.Data.DataColumn
        
        Private columnNovember As Global.System.Data.DataColumn
        
        Private columnDecember As Global.System.Data.DataColumn
        
        Private columnJanuary As Global.System.Data.DataColumn
        
        Private columnFebruary As Global.System.Data.DataColumn
        
        Private columnMarch As Global.System.Data.DataColumn
        
        Private columnTotalCollection As Global.System.Data.DataColumn
        
        Private columnintonopening As Global.System.Data.DataColumn
        
        Private columnintoncollection As Global.System.Data.DataColumn
        
        Private columninsurance As Global.System.Data.DataColumn
        
        Private columnClossingBalance As Global.System.Data.DataColumn
        
        Private columnpayment As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_ShareCollection_rpt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property companycodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompanycode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MembernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMembername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APrilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPril
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JulyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJuly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AugustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAugust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeptemberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeptember
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OctoberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOctober
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NovemberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNovember
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DecemberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDecember
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JanuaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJanuary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FebruaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFebruary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property intonopeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnintonopening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property intoncollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnintoncollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property insuranceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninsurance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClossingBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClossingBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_ShareCollection_rptRow
            Get
                Return CType(Me.Rows(index),sp_ShareCollection_rptRow)
            End Get
        End Property
        
        Public Event sp_ShareCollection_rptRowChanging As sp_ShareCollection_rptRowChangeEventHandler
        
        Public Event sp_ShareCollection_rptRowChanged As sp_ShareCollection_rptRowChangeEventHandler
        
        Public Event sp_ShareCollection_rptRowDeleting As sp_ShareCollection_rptRowChangeEventHandler
        
        Public Event sp_ShareCollection_rptRowDeleted As sp_ShareCollection_rptRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_ShareCollection_rptRow(ByVal row As sp_ShareCollection_rptRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_ShareCollection_rptRow( _
                    ByVal companycode As Integer,  _
                    ByVal RowNo As Long,  _
                    ByVal MemberCode As Long,  _
                    ByVal EmployeeNumber As Integer,  _
                    ByVal Membername As String,  _
                    ByVal Number As Integer,  _
                    ByVal TDOpening As Decimal,  _
                    ByVal APril As Decimal,  _
                    ByVal May As Decimal,  _
                    ByVal June As Decimal,  _
                    ByVal July As Decimal,  _
                    ByVal August As Decimal,  _
                    ByVal September As Decimal,  _
                    ByVal October As Decimal,  _
                    ByVal November As Decimal,  _
                    ByVal December As Decimal,  _
                    ByVal January As Decimal,  _
                    ByVal February As Decimal,  _
                    ByVal March As Decimal,  _
                    ByVal TotalCollection As Decimal,  _
                    ByVal intonopening As Decimal,  _
                    ByVal intoncollection As Decimal,  _
                    ByVal insurance As Decimal,  _
                    ByVal ClossingBalance As Decimal,  _
                    ByVal payment As Decimal) As sp_ShareCollection_rptRow
            Dim rowsp_ShareCollection_rptRow As sp_ShareCollection_rptRow = CType(Me.NewRow,sp_ShareCollection_rptRow)
            Dim columnValuesArray() As Object = New Object() {companycode, RowNo, MemberCode, EmployeeNumber, Membername, Number, TDOpening, APril, May, June, July, August, September, October, November, December, January, February, March, TotalCollection, intonopening, intoncollection, insurance, ClossingBalance, payment}
            rowsp_ShareCollection_rptRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_ShareCollection_rptRow)
            Return rowsp_ShareCollection_rptRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMemberCode(ByVal MemberCode As Long) As sp_ShareCollection_rptRow
            Return CType(Me.Rows.Find(New Object() {MemberCode}),sp_ShareCollection_rptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_ShareCollection_rptDataTable = CType(MyBase.Clone,sp_ShareCollection_rptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_ShareCollection_rptDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncompanycode = MyBase.Columns("companycode")
            Me.columnRowNo = MyBase.Columns("RowNo")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnMembername = MyBase.Columns("Membername")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnTDOpening = MyBase.Columns("TDOpening")
            Me.columnAPril = MyBase.Columns("APril")
            Me.columnMay = MyBase.Columns("May")
            Me.columnJune = MyBase.Columns("June")
            Me.columnJuly = MyBase.Columns("July")
            Me.columnAugust = MyBase.Columns("August")
            Me.columnSeptember = MyBase.Columns("September")
            Me.columnOctober = MyBase.Columns("October")
            Me.columnNovember = MyBase.Columns("November")
            Me.columnDecember = MyBase.Columns("December")
            Me.columnJanuary = MyBase.Columns("January")
            Me.columnFebruary = MyBase.Columns("February")
            Me.columnMarch = MyBase.Columns("March")
            Me.columnTotalCollection = MyBase.Columns("TotalCollection")
            Me.columnintonopening = MyBase.Columns("intonopening")
            Me.columnintoncollection = MyBase.Columns("intoncollection")
            Me.columninsurance = MyBase.Columns("insurance")
            Me.columnClossingBalance = MyBase.Columns("ClossingBalance")
            Me.columnpayment = MyBase.Columns("payment")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncompanycode = New Global.System.Data.DataColumn("companycode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompanycode)
            Me.columnRowNo = New Global.System.Data.DataColumn("RowNo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowNo)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnMembername = New Global.System.Data.DataColumn("Membername", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMembername)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnTDOpening = New Global.System.Data.DataColumn("TDOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOpening)
            Me.columnAPril = New Global.System.Data.DataColumn("APril", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPril)
            Me.columnMay = New Global.System.Data.DataColumn("May", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMay)
            Me.columnJune = New Global.System.Data.DataColumn("June", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJune)
            Me.columnJuly = New Global.System.Data.DataColumn("July", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJuly)
            Me.columnAugust = New Global.System.Data.DataColumn("August", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAugust)
            Me.columnSeptember = New Global.System.Data.DataColumn("September", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeptember)
            Me.columnOctober = New Global.System.Data.DataColumn("October", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOctober)
            Me.columnNovember = New Global.System.Data.DataColumn("November", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNovember)
            Me.columnDecember = New Global.System.Data.DataColumn("December", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDecember)
            Me.columnJanuary = New Global.System.Data.DataColumn("January", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJanuary)
            Me.columnFebruary = New Global.System.Data.DataColumn("February", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFebruary)
            Me.columnMarch = New Global.System.Data.DataColumn("March", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarch)
            Me.columnTotalCollection = New Global.System.Data.DataColumn("TotalCollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCollection)
            Me.columnintonopening = New Global.System.Data.DataColumn("intonopening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnintonopening)
            Me.columnintoncollection = New Global.System.Data.DataColumn("intoncollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnintoncollection)
            Me.columninsurance = New Global.System.Data.DataColumn("insurance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninsurance)
            Me.columnClossingBalance = New Global.System.Data.DataColumn("ClossingBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClossingBalance)
            Me.columnpayment = New Global.System.Data.DataColumn("payment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayment)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMemberCode}, true))
            Me.columncompanycode.ReadOnly = true
            Me.columnRowNo.ReadOnly = true
            Me.columnMemberCode.AllowDBNull = false
            Me.columnMemberCode.Unique = true
            Me.columnEmployeeNumber.AllowDBNull = false
            Me.columnMembername.MaxLength = 50
            Me.columnNumber.AllowDBNull = false
            Me.columnTotalCollection.ReadOnly = true
            Me.columnClossingBalance.ReadOnly = true
            Me.columnpayment.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_ShareCollection_rptRow() As sp_ShareCollection_rptRow
            Return CType(Me.NewRow,sp_ShareCollection_rptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_ShareCollection_rptRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_ShareCollection_rptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_ShareCollection_rptRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_ShareCollection_rptRowChanged(Me, New sp_ShareCollection_rptRowChangeEvent(CType(e.Row,sp_ShareCollection_rptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_ShareCollection_rptRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_ShareCollection_rptRowChanging(Me, New sp_ShareCollection_rptRowChangeEvent(CType(e.Row,sp_ShareCollection_rptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_ShareCollection_rptRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_ShareCollection_rptRowDeleted(Me, New sp_ShareCollection_rptRowChangeEvent(CType(e.Row,sp_ShareCollection_rptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_ShareCollection_rptRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_ShareCollection_rptRowDeleting(Me, New sp_ShareCollection_rptRowChangeEvent(CType(e.Row,sp_ShareCollection_rptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_ShareCollection_rptRow(ByVal row As sp_ShareCollection_rptRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_ShareCollection_rptDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_ShareClossing_GetAllDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnShareClossingCode As Global.System.Data.DataColumn
        
        Private columnShareClossingDate As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnOpeningAmt As Global.System.Data.DataColumn
        
        Private columnTDCollection As Global.System.Data.DataColumn
        
        Private columnIntonOpening As Global.System.Data.DataColumn
        
        Private columnIntonCollection As Global.System.Data.DataColumn
        
        Private columnTotalPayment As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnTDOpening As Global.System.Data.DataColumn
        
        Private columnMemberName As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnROI As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_ShareClossing_GetAll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareClossingCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareClossingCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareClossingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareClossingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpeningAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpeningAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDCollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntonOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntonOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntonCollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntonCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_ShareClossing_GetAllRow
            Get
                Return CType(Me.Rows(index),sp_ShareClossing_GetAllRow)
            End Get
        End Property
        
        Public Event sp_ShareClossing_GetAllRowChanging As sp_ShareClossing_GetAllRowChangeEventHandler
        
        Public Event sp_ShareClossing_GetAllRowChanged As sp_ShareClossing_GetAllRowChangeEventHandler
        
        Public Event sp_ShareClossing_GetAllRowDeleting As sp_ShareClossing_GetAllRowChangeEventHandler
        
        Public Event sp_ShareClossing_GetAllRowDeleted As sp_ShareClossing_GetAllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_ShareClossing_GetAllRow(ByVal row As sp_ShareClossing_GetAllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_ShareClossing_GetAllRow(ByVal ShareClossingCode As Integer, ByVal ShareClossingDate As Date, ByVal MemberCode As Long, ByVal OpeningAmt As Decimal, ByVal TDCollection As Decimal, ByVal IntonOpening As Decimal, ByVal IntonCollection As Decimal, ByVal TotalPayment As Decimal, ByVal Number As Integer, ByVal EmployeeNumber As Integer, ByVal TDOpening As Decimal, ByVal MemberName As String, ByVal Status As Boolean, ByVal ROI As Decimal) As sp_ShareClossing_GetAllRow
            Dim rowsp_ShareClossing_GetAllRow As sp_ShareClossing_GetAllRow = CType(Me.NewRow,sp_ShareClossing_GetAllRow)
            Dim columnValuesArray() As Object = New Object() {ShareClossingCode, ShareClossingDate, MemberCode, OpeningAmt, TDCollection, IntonOpening, IntonCollection, TotalPayment, Number, EmployeeNumber, TDOpening, MemberName, Status, ROI}
            rowsp_ShareClossing_GetAllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_ShareClossing_GetAllRow)
            Return rowsp_ShareClossing_GetAllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByShareClossingCode(ByVal ShareClossingCode As Integer) As sp_ShareClossing_GetAllRow
            Return CType(Me.Rows.Find(New Object() {ShareClossingCode}),sp_ShareClossing_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_ShareClossing_GetAllDataTable = CType(MyBase.Clone,sp_ShareClossing_GetAllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_ShareClossing_GetAllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnShareClossingCode = MyBase.Columns("ShareClossingCode")
            Me.columnShareClossingDate = MyBase.Columns("ShareClossingDate")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnOpeningAmt = MyBase.Columns("OpeningAmt")
            Me.columnTDCollection = MyBase.Columns("TDCollection")
            Me.columnIntonOpening = MyBase.Columns("IntonOpening")
            Me.columnIntonCollection = MyBase.Columns("IntonCollection")
            Me.columnTotalPayment = MyBase.Columns("TotalPayment")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnTDOpening = MyBase.Columns("TDOpening")
            Me.columnMemberName = MyBase.Columns("MemberName")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnROI = MyBase.Columns("ROI")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnShareClossingCode = New Global.System.Data.DataColumn("ShareClossingCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareClossingCode)
            Me.columnShareClossingDate = New Global.System.Data.DataColumn("ShareClossingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareClossingDate)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnOpeningAmt = New Global.System.Data.DataColumn("OpeningAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpeningAmt)
            Me.columnTDCollection = New Global.System.Data.DataColumn("TDCollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDCollection)
            Me.columnIntonOpening = New Global.System.Data.DataColumn("IntonOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntonOpening)
            Me.columnIntonCollection = New Global.System.Data.DataColumn("IntonCollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntonCollection)
            Me.columnTotalPayment = New Global.System.Data.DataColumn("TotalPayment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPayment)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnTDOpening = New Global.System.Data.DataColumn("TDOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOpening)
            Me.columnMemberName = New Global.System.Data.DataColumn("MemberName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnROI = New Global.System.Data.DataColumn("ROI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROI)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnShareClossingCode}, true))
            Me.columnShareClossingCode.AllowDBNull = false
            Me.columnShareClossingCode.Unique = true
            Me.columnMemberCode.AllowDBNull = false
            Me.columnMemberName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_ShareClossing_GetAllRow() As sp_ShareClossing_GetAllRow
            Return CType(Me.NewRow,sp_ShareClossing_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_ShareClossing_GetAllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_ShareClossing_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_ShareClossing_GetAllRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_ShareClossing_GetAllRowChanged(Me, New sp_ShareClossing_GetAllRowChangeEvent(CType(e.Row,sp_ShareClossing_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_ShareClossing_GetAllRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_ShareClossing_GetAllRowChanging(Me, New sp_ShareClossing_GetAllRowChangeEvent(CType(e.Row,sp_ShareClossing_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_ShareClossing_GetAllRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_ShareClossing_GetAllRowDeleted(Me, New sp_ShareClossing_GetAllRowChangeEvent(CType(e.Row,sp_ShareClossing_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_ShareClossing_GetAllRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_ShareClossing_GetAllRowDeleting(Me, New sp_ShareClossing_GetAllRowChangeEvent(CType(e.Row,sp_ShareClossing_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_ShareClossing_GetAllRow(ByVal row As sp_ShareClossing_GetAllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_ShareClossing_GetAllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_MemberLoan_RptGetallDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLoanCode As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnMemberName As Global.System.Data.DataColumn
        
        Private columnMemberName_Tamil As Global.System.Data.DataColumn
        
        Private columnMemberType As Global.System.Data.DataColumn
        
        Private columnLoanNamecode As Global.System.Data.DataColumn
        
        Private columnLoanName As Global.System.Data.DataColumn
        
        Private columnLoanNumber As Global.System.Data.DataColumn
        
        Private columnStrLoanNumber As Global.System.Data.DataColumn
        
        Private columnLoanDate As Global.System.Data.DataColumn
        
        Private columnROI As Global.System.Data.DataColumn
        
        Private columnLoanAmount As Global.System.Data.DataColumn
        
        Private columnLoanPeriod As Global.System.Data.DataColumn
        
        Private columnLastPaidDate As Global.System.Data.DataColumn
        
        Private columnEmi_Amount As Global.System.Data.DataColumn
        
        Private columnpaymode As Global.System.Data.DataColumn
        
        Private columnLoanOutStanding As Global.System.Data.DataColumn
        
        Private columnPrincipal As Global.System.Data.DataColumn
        
        Private columnODPrincipal As Global.System.Data.DataColumn
        
        Private columnInterest As Global.System.Data.DataColumn
        
        Private columnODInterest As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_MemberLoan_RptGetall"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberName_TamilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName_Tamil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNamecodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanNamecode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StrLoanNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStrLoanNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanPeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Emi_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmi_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paymodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaymode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanOutStandingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanOutStanding
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrincipalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ODPrincipalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnODPrincipal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InterestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ODInterestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnODInterest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_MemberLoan_RptGetallRow
            Get
                Return CType(Me.Rows(index),sp_MemberLoan_RptGetallRow)
            End Get
        End Property
        
        Public Event sp_MemberLoan_RptGetallRowChanging As sp_MemberLoan_RptGetallRowChangeEventHandler
        
        Public Event sp_MemberLoan_RptGetallRowChanged As sp_MemberLoan_RptGetallRowChangeEventHandler
        
        Public Event sp_MemberLoan_RptGetallRowDeleting As sp_MemberLoan_RptGetallRowChangeEventHandler
        
        Public Event sp_MemberLoan_RptGetallRowDeleted As sp_MemberLoan_RptGetallRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_MemberLoan_RptGetallRow(ByVal row As sp_MemberLoan_RptGetallRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_MemberLoan_RptGetallRow( _
                    ByVal LoanCode As Integer,  _
                    ByVal MemberCode As Long,  _
                    ByVal Number As Integer,  _
                    ByVal EmployeeNumber As Integer,  _
                    ByVal MemberName As String,  _
                    ByVal MemberName_Tamil As String,  _
                    ByVal MemberType As String,  _
                    ByVal LoanNamecode As Integer,  _
                    ByVal LoanName As String,  _
                    ByVal LoanNumber As String,  _
                    ByVal StrLoanNumber As String,  _
                    ByVal LoanDate As Date,  _
                    ByVal ROI As Decimal,  _
                    ByVal LoanAmount As Decimal,  _
                    ByVal LoanPeriod As Integer,  _
                    ByVal LastPaidDate As Date,  _
                    ByVal Emi_Amount As Decimal,  _
                    ByVal paymode As Integer,  _
                    ByVal LoanOutStanding As Decimal,  _
                    ByVal Principal As Decimal,  _
                    ByVal ODPrincipal As Decimal,  _
                    ByVal Interest As Decimal,  _
                    ByVal ODInterest As Decimal) As sp_MemberLoan_RptGetallRow
            Dim rowsp_MemberLoan_RptGetallRow As sp_MemberLoan_RptGetallRow = CType(Me.NewRow,sp_MemberLoan_RptGetallRow)
            Dim columnValuesArray() As Object = New Object() {LoanCode, MemberCode, Number, EmployeeNumber, MemberName, MemberName_Tamil, MemberType, LoanNamecode, LoanName, LoanNumber, StrLoanNumber, LoanDate, ROI, LoanAmount, LoanPeriod, LastPaidDate, Emi_Amount, paymode, LoanOutStanding, Principal, ODPrincipal, Interest, ODInterest}
            rowsp_MemberLoan_RptGetallRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_MemberLoan_RptGetallRow)
            Return rowsp_MemberLoan_RptGetallRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLoanCode(ByVal LoanCode As Integer) As sp_MemberLoan_RptGetallRow
            Return CType(Me.Rows.Find(New Object() {LoanCode}),sp_MemberLoan_RptGetallRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_MemberLoan_RptGetallDataTable = CType(MyBase.Clone,sp_MemberLoan_RptGetallDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_MemberLoan_RptGetallDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLoanCode = MyBase.Columns("LoanCode")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnMemberName = MyBase.Columns("MemberName")
            Me.columnMemberName_Tamil = MyBase.Columns("MemberName_Tamil")
            Me.columnMemberType = MyBase.Columns("MemberType")
            Me.columnLoanNamecode = MyBase.Columns("LoanNamecode")
            Me.columnLoanName = MyBase.Columns("LoanName")
            Me.columnLoanNumber = MyBase.Columns("LoanNumber")
            Me.columnStrLoanNumber = MyBase.Columns("StrLoanNumber")
            Me.columnLoanDate = MyBase.Columns("LoanDate")
            Me.columnROI = MyBase.Columns("ROI")
            Me.columnLoanAmount = MyBase.Columns("LoanAmount")
            Me.columnLoanPeriod = MyBase.Columns("LoanPeriod")
            Me.columnLastPaidDate = MyBase.Columns("LastPaidDate")
            Me.columnEmi_Amount = MyBase.Columns("Emi_Amount")
            Me.columnpaymode = MyBase.Columns("paymode")
            Me.columnLoanOutStanding = MyBase.Columns("LoanOutStanding")
            Me.columnPrincipal = MyBase.Columns("Principal")
            Me.columnODPrincipal = MyBase.Columns("ODPrincipal")
            Me.columnInterest = MyBase.Columns("Interest")
            Me.columnODInterest = MyBase.Columns("ODInterest")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLoanCode = New Global.System.Data.DataColumn("LoanCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanCode)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnMemberName = New Global.System.Data.DataColumn("MemberName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName)
            Me.columnMemberName_Tamil = New Global.System.Data.DataColumn("MemberName_Tamil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName_Tamil)
            Me.columnMemberType = New Global.System.Data.DataColumn("MemberType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberType)
            Me.columnLoanNamecode = New Global.System.Data.DataColumn("LoanNamecode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanNamecode)
            Me.columnLoanName = New Global.System.Data.DataColumn("LoanName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanName)
            Me.columnLoanNumber = New Global.System.Data.DataColumn("LoanNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanNumber)
            Me.columnStrLoanNumber = New Global.System.Data.DataColumn("StrLoanNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStrLoanNumber)
            Me.columnLoanDate = New Global.System.Data.DataColumn("LoanDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanDate)
            Me.columnROI = New Global.System.Data.DataColumn("ROI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROI)
            Me.columnLoanAmount = New Global.System.Data.DataColumn("LoanAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanAmount)
            Me.columnLoanPeriod = New Global.System.Data.DataColumn("LoanPeriod", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanPeriod)
            Me.columnLastPaidDate = New Global.System.Data.DataColumn("LastPaidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaidDate)
            Me.columnEmi_Amount = New Global.System.Data.DataColumn("Emi_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmi_Amount)
            Me.columnpaymode = New Global.System.Data.DataColumn("paymode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaymode)
            Me.columnLoanOutStanding = New Global.System.Data.DataColumn("LoanOutStanding", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanOutStanding)
            Me.columnPrincipal = New Global.System.Data.DataColumn("Principal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipal)
            Me.columnODPrincipal = New Global.System.Data.DataColumn("ODPrincipal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnODPrincipal)
            Me.columnInterest = New Global.System.Data.DataColumn("Interest", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterest)
            Me.columnODInterest = New Global.System.Data.DataColumn("ODInterest", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnODInterest)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLoanCode}, true))
            Me.columnLoanCode.AllowDBNull = false
            Me.columnLoanCode.Unique = true
            Me.columnMemberCode.AllowDBNull = false
            Me.columnMemberName.MaxLength = 50
            Me.columnMemberName_Tamil.MaxLength = 100
            Me.columnMemberType.MaxLength = 50
            Me.columnLoanNamecode.AllowDBNull = false
            Me.columnLoanName.MaxLength = 50
            Me.columnLoanNumber.AllowDBNull = false
            Me.columnLoanNumber.MaxLength = 50
            Me.columnStrLoanNumber.ReadOnly = true
            Me.columnStrLoanNumber.MaxLength = 50
            Me.columnLoanDate.AllowDBNull = false
            Me.columnROI.AllowDBNull = false
            Me.columnLoanAmount.AllowDBNull = false
            Me.columnLoanPeriod.AllowDBNull = false
            Me.columnpaymode.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_MemberLoan_RptGetallRow() As sp_MemberLoan_RptGetallRow
            Return CType(Me.NewRow,sp_MemberLoan_RptGetallRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_MemberLoan_RptGetallRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_MemberLoan_RptGetallRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_MemberLoan_RptGetallRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_MemberLoan_RptGetallRowChanged(Me, New sp_MemberLoan_RptGetallRowChangeEvent(CType(e.Row,sp_MemberLoan_RptGetallRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_MemberLoan_RptGetallRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_MemberLoan_RptGetallRowChanging(Me, New sp_MemberLoan_RptGetallRowChangeEvent(CType(e.Row,sp_MemberLoan_RptGetallRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_MemberLoan_RptGetallRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_MemberLoan_RptGetallRowDeleted(Me, New sp_MemberLoan_RptGetallRowChangeEvent(CType(e.Row,sp_MemberLoan_RptGetallRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_MemberLoan_RptGetallRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_MemberLoan_RptGetallRowDeleting(Me, New sp_MemberLoan_RptGetallRowChangeEvent(CType(e.Row,sp_MemberLoan_RptGetallRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_MemberLoan_RptGetallRow(ByVal row As sp_MemberLoan_RptGetallRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_MemberLoan_RptGetallDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_ShareDivident_GetAllDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnShareDividentCode As Global.System.Data.DataColumn
        
        Private columnTDFromDate As Global.System.Data.DataColumn
        
        Private columnTDToDate As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnOpeningAmount As Global.System.Data.DataColumn
        
        Private columnTDCollection As Global.System.Data.DataColumn
        
        Private columnIntOnOpening As Global.System.Data.DataColumn
        
        Private columnIntonCollection As Global.System.Data.DataColumn
        
        Private columnTotalPayment As Global.System.Data.DataColumn
        
        Private columnNettTotal As Global.System.Data.DataColumn
        
        Private columnROI As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnMemberName_Tamil As Global.System.Data.DataColumn
        
        Private columnShareOpening As Global.System.Data.DataColumn
        
        Private columnMemberName As Global.System.Data.DataColumn
        
        Private columnShareClossingDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_ShareDivident_GetAll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareDividentCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareDividentCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDFromDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDFromDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDToDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDToDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpeningAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpeningAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDCollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntOnOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntOnOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntonCollectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntonCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NettTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNettTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberName_TamilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName_Tamil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareOpeningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareOpening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareClossingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareClossingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_ShareDivident_GetAllRow
            Get
                Return CType(Me.Rows(index),sp_ShareDivident_GetAllRow)
            End Get
        End Property
        
        Public Event sp_ShareDivident_GetAllRowChanging As sp_ShareDivident_GetAllRowChangeEventHandler
        
        Public Event sp_ShareDivident_GetAllRowChanged As sp_ShareDivident_GetAllRowChangeEventHandler
        
        Public Event sp_ShareDivident_GetAllRowDeleting As sp_ShareDivident_GetAllRowChangeEventHandler
        
        Public Event sp_ShareDivident_GetAllRowDeleted As sp_ShareDivident_GetAllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_ShareDivident_GetAllRow(ByVal row As sp_ShareDivident_GetAllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_ShareDivident_GetAllRow( _
                    ByVal ShareDividentCode As Integer,  _
                    ByVal TDFromDate As Date,  _
                    ByVal TDToDate As Date,  _
                    ByVal MemberCode As Long,  _
                    ByVal OpeningAmount As Decimal,  _
                    ByVal TDCollection As Decimal,  _
                    ByVal IntOnOpening As Decimal,  _
                    ByVal IntonCollection As Decimal,  _
                    ByVal TotalPayment As Decimal,  _
                    ByVal NettTotal As Decimal,  _
                    ByVal ROI As Decimal,  _
                    ByVal Number As Integer,  _
                    ByVal EmployeeNumber As Integer,  _
                    ByVal MemberName_Tamil As String,  _
                    ByVal ShareOpening As Decimal,  _
                    ByVal MemberName As String,  _
                    ByVal ShareClossingDate As Date) As sp_ShareDivident_GetAllRow
            Dim rowsp_ShareDivident_GetAllRow As sp_ShareDivident_GetAllRow = CType(Me.NewRow,sp_ShareDivident_GetAllRow)
            Dim columnValuesArray() As Object = New Object() {ShareDividentCode, TDFromDate, TDToDate, MemberCode, OpeningAmount, TDCollection, IntOnOpening, IntonCollection, TotalPayment, NettTotal, ROI, Number, EmployeeNumber, MemberName_Tamil, ShareOpening, MemberName, ShareClossingDate}
            rowsp_ShareDivident_GetAllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_ShareDivident_GetAllRow)
            Return rowsp_ShareDivident_GetAllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByShareDividentCode(ByVal ShareDividentCode As Integer) As sp_ShareDivident_GetAllRow
            Return CType(Me.Rows.Find(New Object() {ShareDividentCode}),sp_ShareDivident_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_ShareDivident_GetAllDataTable = CType(MyBase.Clone,sp_ShareDivident_GetAllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_ShareDivident_GetAllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnShareDividentCode = MyBase.Columns("ShareDividentCode")
            Me.columnTDFromDate = MyBase.Columns("TDFromDate")
            Me.columnTDToDate = MyBase.Columns("TDToDate")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnOpeningAmount = MyBase.Columns("OpeningAmount")
            Me.columnTDCollection = MyBase.Columns("TDCollection")
            Me.columnIntOnOpening = MyBase.Columns("IntOnOpening")
            Me.columnIntonCollection = MyBase.Columns("IntonCollection")
            Me.columnTotalPayment = MyBase.Columns("TotalPayment")
            Me.columnNettTotal = MyBase.Columns("NettTotal")
            Me.columnROI = MyBase.Columns("ROI")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnMemberName_Tamil = MyBase.Columns("MemberName_Tamil")
            Me.columnShareOpening = MyBase.Columns("ShareOpening")
            Me.columnMemberName = MyBase.Columns("MemberName")
            Me.columnShareClossingDate = MyBase.Columns("ShareClossingDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnShareDividentCode = New Global.System.Data.DataColumn("ShareDividentCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareDividentCode)
            Me.columnTDFromDate = New Global.System.Data.DataColumn("TDFromDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDFromDate)
            Me.columnTDToDate = New Global.System.Data.DataColumn("TDToDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDToDate)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnOpeningAmount = New Global.System.Data.DataColumn("OpeningAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpeningAmount)
            Me.columnTDCollection = New Global.System.Data.DataColumn("TDCollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDCollection)
            Me.columnIntOnOpening = New Global.System.Data.DataColumn("IntOnOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntOnOpening)
            Me.columnIntonCollection = New Global.System.Data.DataColumn("IntonCollection", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntonCollection)
            Me.columnTotalPayment = New Global.System.Data.DataColumn("TotalPayment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPayment)
            Me.columnNettTotal = New Global.System.Data.DataColumn("NettTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNettTotal)
            Me.columnROI = New Global.System.Data.DataColumn("ROI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROI)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnMemberName_Tamil = New Global.System.Data.DataColumn("MemberName_Tamil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName_Tamil)
            Me.columnShareOpening = New Global.System.Data.DataColumn("ShareOpening", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareOpening)
            Me.columnMemberName = New Global.System.Data.DataColumn("MemberName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName)
            Me.columnShareClossingDate = New Global.System.Data.DataColumn("ShareClossingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareClossingDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnShareDividentCode}, true))
            Me.columnShareDividentCode.AllowDBNull = false
            Me.columnShareDividentCode.Unique = true
            Me.columnTDFromDate.AllowDBNull = false
            Me.columnTDToDate.AllowDBNull = false
            Me.columnMemberCode.AllowDBNull = false
            Me.columnOpeningAmount.AllowDBNull = false
            Me.columnTDCollection.AllowDBNull = false
            Me.columnIntOnOpening.AllowDBNull = false
            Me.columnIntonCollection.AllowDBNull = false
            Me.columnTotalPayment.AllowDBNull = false
            Me.columnNettTotal.AllowDBNull = false
            Me.columnROI.AllowDBNull = false
            Me.columnMemberName_Tamil.MaxLength = 100
            Me.columnMemberName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_ShareDivident_GetAllRow() As sp_ShareDivident_GetAllRow
            Return CType(Me.NewRow,sp_ShareDivident_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_ShareDivident_GetAllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_ShareDivident_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_ShareDivident_GetAllRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_ShareDivident_GetAllRowChanged(Me, New sp_ShareDivident_GetAllRowChangeEvent(CType(e.Row,sp_ShareDivident_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_ShareDivident_GetAllRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_ShareDivident_GetAllRowChanging(Me, New sp_ShareDivident_GetAllRowChangeEvent(CType(e.Row,sp_ShareDivident_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_ShareDivident_GetAllRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_ShareDivident_GetAllRowDeleted(Me, New sp_ShareDivident_GetAllRowChangeEvent(CType(e.Row,sp_ShareDivident_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_ShareDivident_GetAllRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_ShareDivident_GetAllRowDeleting(Me, New sp_ShareDivident_GetAllRowChangeEvent(CType(e.Row,sp_ShareDivident_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_ShareDivident_GetAllRow(ByVal row As sp_ShareDivident_GetAllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_ShareDivident_GetAllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_PassBookDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCollectionDate As Global.System.Data.DataColumn
        
        Private columnParticulars As Global.System.Data.DataColumn
        
        Private columnPrinciple As Global.System.Data.DataColumn
        
        Private columnInt As Global.System.Data.DataColumn
        
        Private columnBal_OS As Global.System.Data.DataColumn
        
        Private columnLoanCode As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnROI As Global.System.Data.DataColumn
        
        Private columnPageNo As Global.System.Data.DataColumn
        
        Private columnLNo As Global.System.Data.DataColumn
        
        Private columnsno As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_PassBook"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CollectionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCollectionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParticularsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParticulars
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrincipleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinciple
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bal_OSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBal_OS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PageNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property snoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_PassBookRow
            Get
                Return CType(Me.Rows(index),sp_PassBookRow)
            End Get
        End Property
        
        Public Event sp_PassBookRowChanging As sp_PassBookRowChangeEventHandler
        
        Public Event sp_PassBookRowChanged As sp_PassBookRowChangeEventHandler
        
        Public Event sp_PassBookRowDeleting As sp_PassBookRowChangeEventHandler
        
        Public Event sp_PassBookRowDeleted As sp_PassBookRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_PassBookRow(ByVal row As sp_PassBookRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_PassBookRow(ByVal CollectionDate As Date, ByVal Particulars As String, ByVal Principle As Decimal, ByVal Int As Decimal, ByVal Bal_OS As Decimal, ByVal LoanCode As Integer, ByVal MemberCode As Integer, ByVal ROI As Decimal, ByVal PageNo As Integer, ByVal LNo As Integer, ByVal sno As Integer) As sp_PassBookRow
            Dim rowsp_PassBookRow As sp_PassBookRow = CType(Me.NewRow,sp_PassBookRow)
            Dim columnValuesArray() As Object = New Object() {CollectionDate, Particulars, Principle, Int, Bal_OS, LoanCode, MemberCode, ROI, PageNo, LNo, sno}
            rowsp_PassBookRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_PassBookRow)
            Return rowsp_PassBookRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_PassBookDataTable = CType(MyBase.Clone,sp_PassBookDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_PassBookDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCollectionDate = MyBase.Columns("CollectionDate")
            Me.columnParticulars = MyBase.Columns("Particulars")
            Me.columnPrinciple = MyBase.Columns("Principle")
            Me.columnInt = MyBase.Columns("Int")
            Me.columnBal_OS = MyBase.Columns("Bal_OS")
            Me.columnLoanCode = MyBase.Columns("LoanCode")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnROI = MyBase.Columns("ROI")
            Me.columnPageNo = MyBase.Columns("PageNo")
            Me.columnLNo = MyBase.Columns("LNo")
            Me.columnsno = MyBase.Columns("sno")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCollectionDate = New Global.System.Data.DataColumn("CollectionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCollectionDate)
            Me.columnParticulars = New Global.System.Data.DataColumn("Particulars", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParticulars)
            Me.columnPrinciple = New Global.System.Data.DataColumn("Principle", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinciple)
            Me.columnInt = New Global.System.Data.DataColumn("Int", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInt)
            Me.columnBal_OS = New Global.System.Data.DataColumn("Bal_OS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBal_OS)
            Me.columnLoanCode = New Global.System.Data.DataColumn("LoanCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanCode)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnROI = New Global.System.Data.DataColumn("ROI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROI)
            Me.columnPageNo = New Global.System.Data.DataColumn("PageNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPageNo)
            Me.columnLNo = New Global.System.Data.DataColumn("LNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLNo)
            Me.columnsno = New Global.System.Data.DataColumn("sno", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsno)
            Me.columnParticulars.ReadOnly = true
            Me.columnParticulars.MaxLength = 17
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_PassBookRow() As sp_PassBookRow
            Return CType(Me.NewRow,sp_PassBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_PassBookRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_PassBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_PassBookRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_PassBookRowChanged(Me, New sp_PassBookRowChangeEvent(CType(e.Row,sp_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_PassBookRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_PassBookRowChanging(Me, New sp_PassBookRowChangeEvent(CType(e.Row,sp_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_PassBookRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_PassBookRowDeleted(Me, New sp_PassBookRowChangeEvent(CType(e.Row,sp_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_PassBookRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_PassBookRowDeleting(Me, New sp_PassBookRowChangeEvent(CType(e.Row,sp_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_PassBookRow(ByVal row As sp_PassBookRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_PassBookDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_MemberLoan_GetAllDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLoanCode As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnMemberName As Global.System.Data.DataColumn
        
        Private columnMemberName_Tamil As Global.System.Data.DataColumn
        
        Private columnMemberType As Global.System.Data.DataColumn
        
        Private columnLoanNamecode As Global.System.Data.DataColumn
        
        Private columnLoanName As Global.System.Data.DataColumn
        
        Private columnLoanNumber As Global.System.Data.DataColumn
        
        Private columnStrLoanNumber As Global.System.Data.DataColumn
        
        Private columnLoanDate As Global.System.Data.DataColumn
        
        Private columnROI As Global.System.Data.DataColumn
        
        Private columnLoanAmount As Global.System.Data.DataColumn
        
        Private columnLoanPeriod As Global.System.Data.DataColumn
        
        Private columnLastPaidDate As Global.System.Data.DataColumn
        
        Private columnEmi_Amount As Global.System.Data.DataColumn
        
        Private columnpaymode As Global.System.Data.DataColumn
        
        Private columnLoanOutstanding As Global.System.Data.DataColumn
        
        Private columnPrincipal As Global.System.Data.DataColumn
        
        Private columnODPrincipal As Global.System.Data.DataColumn
        
        Private columnInterest As Global.System.Data.DataColumn
        
        Private columnODInterest As Global.System.Data.DataColumn
        
        Private columnMaturityDate As Global.System.Data.DataColumn
        
        Private columnLoanClossedStatus As Global.System.Data.DataColumn
        
        Private columnDemand As Global.System.Data.DataColumn
        
        Private columnDemandType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_MemberLoan_GetAll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberName_TamilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName_Tamil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNamecodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanNamecode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StrLoanNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStrLoanNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanPeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastPaidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastPaidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Emi_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmi_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paymodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaymode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanOutstandingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanOutstanding
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrincipalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ODPrincipalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnODPrincipal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InterestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ODInterestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnODInterest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanClossedStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanClossedStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemandTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemandType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_MemberLoan_GetAllRow
            Get
                Return CType(Me.Rows(index),sp_MemberLoan_GetAllRow)
            End Get
        End Property
        
        Public Event sp_MemberLoan_GetAllRowChanging As sp_MemberLoan_GetAllRowChangeEventHandler
        
        Public Event sp_MemberLoan_GetAllRowChanged As sp_MemberLoan_GetAllRowChangeEventHandler
        
        Public Event sp_MemberLoan_GetAllRowDeleting As sp_MemberLoan_GetAllRowChangeEventHandler
        
        Public Event sp_MemberLoan_GetAllRowDeleted As sp_MemberLoan_GetAllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_MemberLoan_GetAllRow(ByVal row As sp_MemberLoan_GetAllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_MemberLoan_GetAllRow( _
                    ByVal LoanCode As Integer,  _
                    ByVal MemberCode As Long,  _
                    ByVal Number As Integer,  _
                    ByVal EmployeeNumber As Integer,  _
                    ByVal MemberName As String,  _
                    ByVal MemberName_Tamil As String,  _
                    ByVal MemberType As String,  _
                    ByVal LoanNamecode As Integer,  _
                    ByVal LoanName As String,  _
                    ByVal LoanNumber As String,  _
                    ByVal StrLoanNumber As String,  _
                    ByVal LoanDate As Date,  _
                    ByVal ROI As Decimal,  _
                    ByVal LoanAmount As Decimal,  _
                    ByVal LoanPeriod As Integer,  _
                    ByVal LastPaidDate As Date,  _
                    ByVal Emi_Amount As Decimal,  _
                    ByVal paymode As Integer,  _
                    ByVal LoanOutstanding As Decimal,  _
                    ByVal Principal As Decimal,  _
                    ByVal ODPrincipal As Decimal,  _
                    ByVal Interest As Decimal,  _
                    ByVal ODInterest As Decimal,  _
                    ByVal MaturityDate As Date,  _
                    ByVal LoanClossedStatus As Boolean,  _
                    ByVal Demand As Boolean,  _
                    ByVal DemandType As Integer) As sp_MemberLoan_GetAllRow
            Dim rowsp_MemberLoan_GetAllRow As sp_MemberLoan_GetAllRow = CType(Me.NewRow,sp_MemberLoan_GetAllRow)
            Dim columnValuesArray() As Object = New Object() {LoanCode, MemberCode, Number, EmployeeNumber, MemberName, MemberName_Tamil, MemberType, LoanNamecode, LoanName, LoanNumber, StrLoanNumber, LoanDate, ROI, LoanAmount, LoanPeriod, LastPaidDate, Emi_Amount, paymode, LoanOutstanding, Principal, ODPrincipal, Interest, ODInterest, MaturityDate, LoanClossedStatus, Demand, DemandType}
            rowsp_MemberLoan_GetAllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_MemberLoan_GetAllRow)
            Return rowsp_MemberLoan_GetAllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLoanCode(ByVal LoanCode As Integer) As sp_MemberLoan_GetAllRow
            Return CType(Me.Rows.Find(New Object() {LoanCode}),sp_MemberLoan_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_MemberLoan_GetAllDataTable = CType(MyBase.Clone,sp_MemberLoan_GetAllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_MemberLoan_GetAllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLoanCode = MyBase.Columns("LoanCode")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnMemberName = MyBase.Columns("MemberName")
            Me.columnMemberName_Tamil = MyBase.Columns("MemberName_Tamil")
            Me.columnMemberType = MyBase.Columns("MemberType")
            Me.columnLoanNamecode = MyBase.Columns("LoanNamecode")
            Me.columnLoanName = MyBase.Columns("LoanName")
            Me.columnLoanNumber = MyBase.Columns("LoanNumber")
            Me.columnStrLoanNumber = MyBase.Columns("StrLoanNumber")
            Me.columnLoanDate = MyBase.Columns("LoanDate")
            Me.columnROI = MyBase.Columns("ROI")
            Me.columnLoanAmount = MyBase.Columns("LoanAmount")
            Me.columnLoanPeriod = MyBase.Columns("LoanPeriod")
            Me.columnLastPaidDate = MyBase.Columns("LastPaidDate")
            Me.columnEmi_Amount = MyBase.Columns("Emi_Amount")
            Me.columnpaymode = MyBase.Columns("paymode")
            Me.columnLoanOutstanding = MyBase.Columns("LoanOutstanding")
            Me.columnPrincipal = MyBase.Columns("Principal")
            Me.columnODPrincipal = MyBase.Columns("ODPrincipal")
            Me.columnInterest = MyBase.Columns("Interest")
            Me.columnODInterest = MyBase.Columns("ODInterest")
            Me.columnMaturityDate = MyBase.Columns("MaturityDate")
            Me.columnLoanClossedStatus = MyBase.Columns("LoanClossedStatus")
            Me.columnDemand = MyBase.Columns("Demand")
            Me.columnDemandType = MyBase.Columns("DemandType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLoanCode = New Global.System.Data.DataColumn("LoanCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanCode)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnMemberName = New Global.System.Data.DataColumn("MemberName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName)
            Me.columnMemberName_Tamil = New Global.System.Data.DataColumn("MemberName_Tamil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName_Tamil)
            Me.columnMemberType = New Global.System.Data.DataColumn("MemberType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberType)
            Me.columnLoanNamecode = New Global.System.Data.DataColumn("LoanNamecode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanNamecode)
            Me.columnLoanName = New Global.System.Data.DataColumn("LoanName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanName)
            Me.columnLoanNumber = New Global.System.Data.DataColumn("LoanNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanNumber)
            Me.columnStrLoanNumber = New Global.System.Data.DataColumn("StrLoanNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStrLoanNumber)
            Me.columnLoanDate = New Global.System.Data.DataColumn("LoanDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanDate)
            Me.columnROI = New Global.System.Data.DataColumn("ROI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROI)
            Me.columnLoanAmount = New Global.System.Data.DataColumn("LoanAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanAmount)
            Me.columnLoanPeriod = New Global.System.Data.DataColumn("LoanPeriod", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanPeriod)
            Me.columnLastPaidDate = New Global.System.Data.DataColumn("LastPaidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastPaidDate)
            Me.columnEmi_Amount = New Global.System.Data.DataColumn("Emi_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmi_Amount)
            Me.columnpaymode = New Global.System.Data.DataColumn("paymode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaymode)
            Me.columnLoanOutstanding = New Global.System.Data.DataColumn("LoanOutstanding", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanOutstanding)
            Me.columnPrincipal = New Global.System.Data.DataColumn("Principal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipal)
            Me.columnODPrincipal = New Global.System.Data.DataColumn("ODPrincipal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnODPrincipal)
            Me.columnInterest = New Global.System.Data.DataColumn("Interest", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterest)
            Me.columnODInterest = New Global.System.Data.DataColumn("ODInterest", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnODInterest)
            Me.columnMaturityDate = New Global.System.Data.DataColumn("MaturityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaturityDate)
            Me.columnLoanClossedStatus = New Global.System.Data.DataColumn("LoanClossedStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanClossedStatus)
            Me.columnDemand = New Global.System.Data.DataColumn("Demand", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemand)
            Me.columnDemandType = New Global.System.Data.DataColumn("DemandType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemandType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLoanCode}, true))
            Me.columnLoanCode.AllowDBNull = false
            Me.columnLoanCode.Unique = true
            Me.columnMemberCode.AllowDBNull = false
            Me.columnMemberName.MaxLength = 50
            Me.columnMemberName_Tamil.MaxLength = 100
            Me.columnMemberType.MaxLength = 50
            Me.columnLoanNamecode.AllowDBNull = false
            Me.columnLoanName.MaxLength = 50
            Me.columnLoanNumber.AllowDBNull = false
            Me.columnLoanNumber.MaxLength = 50
            Me.columnStrLoanNumber.ReadOnly = true
            Me.columnStrLoanNumber.MaxLength = 50
            Me.columnLoanDate.AllowDBNull = false
            Me.columnROI.AllowDBNull = false
            Me.columnLoanAmount.AllowDBNull = false
            Me.columnLoanPeriod.AllowDBNull = false
            Me.columnpaymode.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_MemberLoan_GetAllRow() As sp_MemberLoan_GetAllRow
            Return CType(Me.NewRow,sp_MemberLoan_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_MemberLoan_GetAllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_MemberLoan_GetAllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_MemberLoan_GetAllRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_MemberLoan_GetAllRowChanged(Me, New sp_MemberLoan_GetAllRowChangeEvent(CType(e.Row,sp_MemberLoan_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_MemberLoan_GetAllRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_MemberLoan_GetAllRowChanging(Me, New sp_MemberLoan_GetAllRowChangeEvent(CType(e.Row,sp_MemberLoan_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_MemberLoan_GetAllRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_MemberLoan_GetAllRowDeleted(Me, New sp_MemberLoan_GetAllRowChangeEvent(CType(e.Row,sp_MemberLoan_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_MemberLoan_GetAllRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_MemberLoan_GetAllRowDeleting(Me, New sp_MemberLoan_GetAllRowChangeEvent(CType(e.Row,sp_MemberLoan_GetAllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_MemberLoan_GetAllRow(ByVal row As sp_MemberLoan_GetAllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_MemberLoan_GetAllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_LoanDemandDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnMemberName As Global.System.Data.DataColumn
        
        Private columnnumber As Global.System.Data.DataColumn
        
        Private columnmembertype As Global.System.Data.DataColumn
        
        Private columnFDBAL As Global.System.Data.DataColumn
        
        Private columnFDPRN As Global.System.Data.DataColumn
        
        Private columnFDINT As Global.System.Data.DataColumn
        
        Private columnJLBAL As Global.System.Data.DataColumn
        
        Private columnJLPRN As Global.System.Data.DataColumn
        
        Private columnJLINT As Global.System.Data.DataColumn
        
        Private columnLDBAL As Global.System.Data.DataColumn
        
        Private columnLDPRN As Global.System.Data.DataColumn
        
        Private columnLDINT As Global.System.Data.DataColumn
        
        Private columnTotalBalance As Global.System.Data.DataColumn
        
        Private columnTotalDemand As Global.System.Data.DataColumn
        
        Private columnFromDate As Global.System.Data.DataColumn
        
        Private columnToDate As Global.System.Data.DataColumn
        
        Private columnLoanNameCode As Global.System.Data.DataColumn
        
        Private columnLoanName As Global.System.Data.DataColumn
        
        Private columnDemandType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_LoanDemand"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property membertypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmembertype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FDBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFDBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FDPRNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFDPRN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FDINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFDINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JLBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJLBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JLPRNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJLPRN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JLINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJLINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LDBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLDBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LDPRNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLDPRN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LDINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLDINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDemand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FromDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFromDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNameCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanNameCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemandTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemandType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_LoanDemandRow
            Get
                Return CType(Me.Rows(index),sp_LoanDemandRow)
            End Get
        End Property
        
        Public Event sp_LoanDemandRowChanging As sp_LoanDemandRowChangeEventHandler
        
        Public Event sp_LoanDemandRowChanged As sp_LoanDemandRowChangeEventHandler
        
        Public Event sp_LoanDemandRowDeleting As sp_LoanDemandRowChangeEventHandler
        
        Public Event sp_LoanDemandRowDeleted As sp_LoanDemandRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_LoanDemandRow(ByVal row As sp_LoanDemandRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_LoanDemandRow( _
                    ByVal EmployeeNumber As Integer,  _
                    ByVal MemberCode As Integer,  _
                    ByVal MemberName As String,  _
                    ByVal number As Integer,  _
                    ByVal membertype As String,  _
                    ByVal FDBAL As Decimal,  _
                    ByVal FDPRN As Decimal,  _
                    ByVal FDINT As Decimal,  _
                    ByVal JLBAL As Decimal,  _
                    ByVal JLPRN As Decimal,  _
                    ByVal JLINT As Decimal,  _
                    ByVal LDBAL As Decimal,  _
                    ByVal LDPRN As Decimal,  _
                    ByVal LDINT As Decimal,  _
                    ByVal TotalBalance As Decimal,  _
                    ByVal TotalDemand As Decimal,  _
                    ByVal FromDate As Date,  _
                    ByVal ToDate As Date,  _
                    ByVal LoanNameCode As Integer,  _
                    ByVal LoanName As String,  _
                    ByVal DemandType As Integer) As sp_LoanDemandRow
            Dim rowsp_LoanDemandRow As sp_LoanDemandRow = CType(Me.NewRow,sp_LoanDemandRow)
            Dim columnValuesArray() As Object = New Object() {EmployeeNumber, MemberCode, MemberName, number, membertype, FDBAL, FDPRN, FDINT, JLBAL, JLPRN, JLINT, LDBAL, LDPRN, LDINT, TotalBalance, TotalDemand, FromDate, ToDate, LoanNameCode, LoanName, DemandType}
            rowsp_LoanDemandRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_LoanDemandRow)
            Return rowsp_LoanDemandRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_LoanDemandDataTable = CType(MyBase.Clone,sp_LoanDemandDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_LoanDemandDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnMemberName = MyBase.Columns("MemberName")
            Me.columnnumber = MyBase.Columns("number")
            Me.columnmembertype = MyBase.Columns("membertype")
            Me.columnFDBAL = MyBase.Columns("FDBAL")
            Me.columnFDPRN = MyBase.Columns("FDPRN")
            Me.columnFDINT = MyBase.Columns("FDINT")
            Me.columnJLBAL = MyBase.Columns("JLBAL")
            Me.columnJLPRN = MyBase.Columns("JLPRN")
            Me.columnJLINT = MyBase.Columns("JLINT")
            Me.columnLDBAL = MyBase.Columns("LDBAL")
            Me.columnLDPRN = MyBase.Columns("LDPRN")
            Me.columnLDINT = MyBase.Columns("LDINT")
            Me.columnTotalBalance = MyBase.Columns("TotalBalance")
            Me.columnTotalDemand = MyBase.Columns("TotalDemand")
            Me.columnFromDate = MyBase.Columns("FromDate")
            Me.columnToDate = MyBase.Columns("ToDate")
            Me.columnLoanNameCode = MyBase.Columns("LoanNameCode")
            Me.columnLoanName = MyBase.Columns("LoanName")
            Me.columnDemandType = MyBase.Columns("DemandType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnMemberName = New Global.System.Data.DataColumn("MemberName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName)
            Me.columnnumber = New Global.System.Data.DataColumn("number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumber)
            Me.columnmembertype = New Global.System.Data.DataColumn("membertype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmembertype)
            Me.columnFDBAL = New Global.System.Data.DataColumn("FDBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFDBAL)
            Me.columnFDPRN = New Global.System.Data.DataColumn("FDPRN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFDPRN)
            Me.columnFDINT = New Global.System.Data.DataColumn("FDINT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFDINT)
            Me.columnJLBAL = New Global.System.Data.DataColumn("JLBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJLBAL)
            Me.columnJLPRN = New Global.System.Data.DataColumn("JLPRN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJLPRN)
            Me.columnJLINT = New Global.System.Data.DataColumn("JLINT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJLINT)
            Me.columnLDBAL = New Global.System.Data.DataColumn("LDBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLDBAL)
            Me.columnLDPRN = New Global.System.Data.DataColumn("LDPRN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLDPRN)
            Me.columnLDINT = New Global.System.Data.DataColumn("LDINT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLDINT)
            Me.columnTotalBalance = New Global.System.Data.DataColumn("TotalBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalBalance)
            Me.columnTotalDemand = New Global.System.Data.DataColumn("TotalDemand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDemand)
            Me.columnFromDate = New Global.System.Data.DataColumn("FromDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFromDate)
            Me.columnToDate = New Global.System.Data.DataColumn("ToDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToDate)
            Me.columnLoanNameCode = New Global.System.Data.DataColumn("LoanNameCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanNameCode)
            Me.columnLoanName = New Global.System.Data.DataColumn("LoanName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanName)
            Me.columnDemandType = New Global.System.Data.DataColumn("DemandType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemandType)
            Me.columnMemberName.MaxLength = 50
            Me.columnmembertype.MaxLength = 50
            Me.columnFDBAL.ReadOnly = true
            Me.columnFDPRN.ReadOnly = true
            Me.columnFDINT.ReadOnly = true
            Me.columnJLBAL.ReadOnly = true
            Me.columnJLPRN.ReadOnly = true
            Me.columnJLINT.ReadOnly = true
            Me.columnLDBAL.ReadOnly = true
            Me.columnLDPRN.ReadOnly = true
            Me.columnLDINT.ReadOnly = true
            Me.columnTotalBalance.ReadOnly = true
            Me.columnTotalDemand.ReadOnly = true
            Me.columnFromDate.ReadOnly = true
            Me.columnToDate.ReadOnly = true
            Me.columnLoanName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_LoanDemandRow() As sp_LoanDemandRow
            Return CType(Me.NewRow,sp_LoanDemandRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_LoanDemandRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_LoanDemandRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_LoanDemandRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_LoanDemandRowChanged(Me, New sp_LoanDemandRowChangeEvent(CType(e.Row,sp_LoanDemandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_LoanDemandRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_LoanDemandRowChanging(Me, New sp_LoanDemandRowChangeEvent(CType(e.Row,sp_LoanDemandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_LoanDemandRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_LoanDemandRowDeleted(Me, New sp_LoanDemandRowChangeEvent(CType(e.Row,sp_LoanDemandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_LoanDemandRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_LoanDemandRowDeleting(Me, New sp_LoanDemandRowChangeEvent(CType(e.Row,sp_LoanDemandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_LoanDemandRow(ByVal row As sp_LoanDemandRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_LoanDemandDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_TD_PassBookDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTDPassBookCode As Global.System.Data.DataColumn
        
        Private columnTDDepositDate As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnTDOpeningCode As Global.System.Data.DataColumn
        
        Private columnTDDepositCode As Global.System.Data.DataColumn
        
        Private columnTDInterestCode As Global.System.Data.DataColumn
        
        Private columnTDClosingCode As Global.System.Data.DataColumn
        
        Private columnParticular As Global.System.Data.DataColumn
        
        Private columnDeposit As Global.System.Data.DataColumn
        
        Private columnInterest As Global.System.Data.DataColumn
        
        Private columnInsurance As Global.System.Data.DataColumn
        
        Private columnPayment As Global.System.Data.DataColumn
        
        Private columnBalance As Global.System.Data.DataColumn
        
        Private columnPrinted As Global.System.Data.DataColumn
        
        Private columnPageNumber As Global.System.Data.DataColumn
        
        Private columnLineNumber As Global.System.Data.DataColumn
        
        Private columnRpt As Global.System.Data.DataColumn
        
        Private columnPyt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_TD_PassBook"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDPassBookCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDPassBookCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDDepositDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDDepositDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOpeningCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDOpeningCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDDepositCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDDepositCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDInterestCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDInterestCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDClosingCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDClosingCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParticularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParticular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepositColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeposit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InterestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsuranceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsurance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PageNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPageNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PytColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPyt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_TD_PassBookRow
            Get
                Return CType(Me.Rows(index),sp_TD_PassBookRow)
            End Get
        End Property
        
        Public Event sp_TD_PassBookRowChanging As sp_TD_PassBookRowChangeEventHandler
        
        Public Event sp_TD_PassBookRowChanged As sp_TD_PassBookRowChangeEventHandler
        
        Public Event sp_TD_PassBookRowDeleting As sp_TD_PassBookRowChangeEventHandler
        
        Public Event sp_TD_PassBookRowDeleted As sp_TD_PassBookRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_TD_PassBookRow(ByVal row As sp_TD_PassBookRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_TD_PassBookRow( _
                    ByVal TDDepositDate As Date,  _
                    ByVal MemberCode As Long,  _
                    ByVal TDOpeningCode As Long,  _
                    ByVal TDDepositCode As Integer,  _
                    ByVal TDInterestCode As Integer,  _
                    ByVal TDClosingCode As Integer,  _
                    ByVal Particular As String,  _
                    ByVal Deposit As Decimal,  _
                    ByVal Interest As Decimal,  _
                    ByVal Insurance As Decimal,  _
                    ByVal Payment As Decimal,  _
                    ByVal Balance As Decimal,  _
                    ByVal Printed As Boolean,  _
                    ByVal PageNumber As Integer,  _
                    ByVal LineNumber As Integer,  _
                    ByVal Rpt As Decimal,  _
                    ByVal Pyt As Decimal) As sp_TD_PassBookRow
            Dim rowsp_TD_PassBookRow As sp_TD_PassBookRow = CType(Me.NewRow,sp_TD_PassBookRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TDDepositDate, MemberCode, TDOpeningCode, TDDepositCode, TDInterestCode, TDClosingCode, Particular, Deposit, Interest, Insurance, Payment, Balance, Printed, PageNumber, LineNumber, Rpt, Pyt}
            rowsp_TD_PassBookRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_TD_PassBookRow)
            Return rowsp_TD_PassBookRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_TD_PassBookDataTable = CType(MyBase.Clone,sp_TD_PassBookDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_TD_PassBookDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTDPassBookCode = MyBase.Columns("TDPassBookCode")
            Me.columnTDDepositDate = MyBase.Columns("TDDepositDate")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnTDOpeningCode = MyBase.Columns("TDOpeningCode")
            Me.columnTDDepositCode = MyBase.Columns("TDDepositCode")
            Me.columnTDInterestCode = MyBase.Columns("TDInterestCode")
            Me.columnTDClosingCode = MyBase.Columns("TDClosingCode")
            Me.columnParticular = MyBase.Columns("Particular")
            Me.columnDeposit = MyBase.Columns("Deposit")
            Me.columnInterest = MyBase.Columns("Interest")
            Me.columnInsurance = MyBase.Columns("Insurance")
            Me.columnPayment = MyBase.Columns("Payment")
            Me.columnBalance = MyBase.Columns("Balance")
            Me.columnPrinted = MyBase.Columns("Printed")
            Me.columnPageNumber = MyBase.Columns("PageNumber")
            Me.columnLineNumber = MyBase.Columns("LineNumber")
            Me.columnRpt = MyBase.Columns("Rpt")
            Me.columnPyt = MyBase.Columns("Pyt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTDPassBookCode = New Global.System.Data.DataColumn("TDPassBookCode", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDPassBookCode)
            Me.columnTDDepositDate = New Global.System.Data.DataColumn("TDDepositDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDDepositDate)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnTDOpeningCode = New Global.System.Data.DataColumn("TDOpeningCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOpeningCode)
            Me.columnTDDepositCode = New Global.System.Data.DataColumn("TDDepositCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDDepositCode)
            Me.columnTDInterestCode = New Global.System.Data.DataColumn("TDInterestCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDInterestCode)
            Me.columnTDClosingCode = New Global.System.Data.DataColumn("TDClosingCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDClosingCode)
            Me.columnParticular = New Global.System.Data.DataColumn("Particular", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParticular)
            Me.columnDeposit = New Global.System.Data.DataColumn("Deposit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeposit)
            Me.columnInterest = New Global.System.Data.DataColumn("Interest", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterest)
            Me.columnInsurance = New Global.System.Data.DataColumn("Insurance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsurance)
            Me.columnPayment = New Global.System.Data.DataColumn("Payment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayment)
            Me.columnBalance = New Global.System.Data.DataColumn("Balance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBalance)
            Me.columnPrinted = New Global.System.Data.DataColumn("Printed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinted)
            Me.columnPageNumber = New Global.System.Data.DataColumn("PageNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPageNumber)
            Me.columnLineNumber = New Global.System.Data.DataColumn("LineNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineNumber)
            Me.columnRpt = New Global.System.Data.DataColumn("Rpt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRpt)
            Me.columnPyt = New Global.System.Data.DataColumn("Pyt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPyt)
            Me.columnTDPassBookCode.AutoIncrement = true
            Me.columnTDPassBookCode.AllowDBNull = false
            Me.columnTDPassBookCode.ReadOnly = true
            Me.columnMemberCode.AllowDBNull = false
            Me.columnParticular.MaxLength = 100
            Me.columnRpt.ReadOnly = true
            Me.columnPyt.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_TD_PassBookRow() As sp_TD_PassBookRow
            Return CType(Me.NewRow,sp_TD_PassBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_TD_PassBookRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_TD_PassBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_TD_PassBookRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_TD_PassBookRowChanged(Me, New sp_TD_PassBookRowChangeEvent(CType(e.Row,sp_TD_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_TD_PassBookRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_TD_PassBookRowChanging(Me, New sp_TD_PassBookRowChangeEvent(CType(e.Row,sp_TD_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_TD_PassBookRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_TD_PassBookRowDeleted(Me, New sp_TD_PassBookRowChangeEvent(CType(e.Row,sp_TD_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_TD_PassBookRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_TD_PassBookRowDeleting(Me, New sp_TD_PassBookRowChangeEvent(CType(e.Row,sp_TD_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_TD_PassBookRow(ByVal row As sp_TD_PassBookRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_TD_PassBookDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_Share_PassBookDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSharePassBookCode As Global.System.Data.DataColumn
        
        Private columnShareDepositDate As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnShareOpeningCode As Global.System.Data.DataColumn
        
        Private columnShareDepositCode As Global.System.Data.DataColumn
        
        Private columnShareDividentCode As Global.System.Data.DataColumn
        
        Private columnShareClosingCode As Global.System.Data.DataColumn
        
        Private columnParticular As Global.System.Data.DataColumn
        
        Private columnDeposit As Global.System.Data.DataColumn
        
        Private columnDivident As Global.System.Data.DataColumn
        
        Private columnRefund As Global.System.Data.DataColumn
        
        Private columnPayment As Global.System.Data.DataColumn
        
        Private columnBalance As Global.System.Data.DataColumn
        
        Private columnPrinted As Global.System.Data.DataColumn
        
        Private columnPageNumber As Global.System.Data.DataColumn
        
        Private columnLineNumber As Global.System.Data.DataColumn
        
        Private columnRpt As Global.System.Data.DataColumn
        
        Private columnPyt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_Share_PassBook"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SharePassBookCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSharePassBookCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareDepositDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareDepositDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareOpeningCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareOpeningCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareDepositCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareDepositCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareDividentCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareDividentCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShareClosingCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShareClosingCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParticularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParticular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepositColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeposit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DividentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivident
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefundColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefund
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PageNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPageNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRpt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PytColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPyt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_Share_PassBookRow
            Get
                Return CType(Me.Rows(index),sp_Share_PassBookRow)
            End Get
        End Property
        
        Public Event sp_Share_PassBookRowChanging As sp_Share_PassBookRowChangeEventHandler
        
        Public Event sp_Share_PassBookRowChanged As sp_Share_PassBookRowChangeEventHandler
        
        Public Event sp_Share_PassBookRowDeleting As sp_Share_PassBookRowChangeEventHandler
        
        Public Event sp_Share_PassBookRowDeleted As sp_Share_PassBookRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_Share_PassBookRow(ByVal row As sp_Share_PassBookRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_Share_PassBookRow( _
                    ByVal SharePassBookCode As Decimal,  _
                    ByVal ShareDepositDate As Date,  _
                    ByVal MemberCode As Long,  _
                    ByVal ShareOpeningCode As Long,  _
                    ByVal ShareDepositCode As Integer,  _
                    ByVal ShareDividentCode As Integer,  _
                    ByVal ShareClosingCode As Integer,  _
                    ByVal Particular As String,  _
                    ByVal Deposit As Decimal,  _
                    ByVal Divident As Decimal,  _
                    ByVal Refund As Decimal,  _
                    ByVal Payment As Decimal,  _
                    ByVal Balance As Decimal,  _
                    ByVal Printed As Integer,  _
                    ByVal PageNumber As Integer,  _
                    ByVal LineNumber As Integer,  _
                    ByVal Rpt As Decimal,  _
                    ByVal Pyt As Decimal) As sp_Share_PassBookRow
            Dim rowsp_Share_PassBookRow As sp_Share_PassBookRow = CType(Me.NewRow,sp_Share_PassBookRow)
            Dim columnValuesArray() As Object = New Object() {SharePassBookCode, ShareDepositDate, MemberCode, ShareOpeningCode, ShareDepositCode, ShareDividentCode, ShareClosingCode, Particular, Deposit, Divident, Refund, Payment, Balance, Printed, PageNumber, LineNumber, Rpt, Pyt}
            rowsp_Share_PassBookRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_Share_PassBookRow)
            Return rowsp_Share_PassBookRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_Share_PassBookDataTable = CType(MyBase.Clone,sp_Share_PassBookDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_Share_PassBookDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSharePassBookCode = MyBase.Columns("SharePassBookCode")
            Me.columnShareDepositDate = MyBase.Columns("ShareDepositDate")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnShareOpeningCode = MyBase.Columns("ShareOpeningCode")
            Me.columnShareDepositCode = MyBase.Columns("ShareDepositCode")
            Me.columnShareDividentCode = MyBase.Columns("ShareDividentCode")
            Me.columnShareClosingCode = MyBase.Columns("ShareClosingCode")
            Me.columnParticular = MyBase.Columns("Particular")
            Me.columnDeposit = MyBase.Columns("Deposit")
            Me.columnDivident = MyBase.Columns("Divident")
            Me.columnRefund = MyBase.Columns("Refund")
            Me.columnPayment = MyBase.Columns("Payment")
            Me.columnBalance = MyBase.Columns("Balance")
            Me.columnPrinted = MyBase.Columns("Printed")
            Me.columnPageNumber = MyBase.Columns("PageNumber")
            Me.columnLineNumber = MyBase.Columns("LineNumber")
            Me.columnRpt = MyBase.Columns("Rpt")
            Me.columnPyt = MyBase.Columns("Pyt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSharePassBookCode = New Global.System.Data.DataColumn("SharePassBookCode", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSharePassBookCode)
            Me.columnShareDepositDate = New Global.System.Data.DataColumn("ShareDepositDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareDepositDate)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnShareOpeningCode = New Global.System.Data.DataColumn("ShareOpeningCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareOpeningCode)
            Me.columnShareDepositCode = New Global.System.Data.DataColumn("ShareDepositCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareDepositCode)
            Me.columnShareDividentCode = New Global.System.Data.DataColumn("ShareDividentCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareDividentCode)
            Me.columnShareClosingCode = New Global.System.Data.DataColumn("ShareClosingCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShareClosingCode)
            Me.columnParticular = New Global.System.Data.DataColumn("Particular", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParticular)
            Me.columnDeposit = New Global.System.Data.DataColumn("Deposit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeposit)
            Me.columnDivident = New Global.System.Data.DataColumn("Divident", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivident)
            Me.columnRefund = New Global.System.Data.DataColumn("Refund", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefund)
            Me.columnPayment = New Global.System.Data.DataColumn("Payment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayment)
            Me.columnBalance = New Global.System.Data.DataColumn("Balance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBalance)
            Me.columnPrinted = New Global.System.Data.DataColumn("Printed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinted)
            Me.columnPageNumber = New Global.System.Data.DataColumn("PageNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPageNumber)
            Me.columnLineNumber = New Global.System.Data.DataColumn("LineNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineNumber)
            Me.columnRpt = New Global.System.Data.DataColumn("Rpt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRpt)
            Me.columnPyt = New Global.System.Data.DataColumn("Pyt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPyt)
            Me.columnParticular.MaxLength = 50
            Me.columnRpt.ReadOnly = true
            Me.columnPyt.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_Share_PassBookRow() As sp_Share_PassBookRow
            Return CType(Me.NewRow,sp_Share_PassBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_Share_PassBookRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_Share_PassBookRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_Share_PassBookRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_Share_PassBookRowChanged(Me, New sp_Share_PassBookRowChangeEvent(CType(e.Row,sp_Share_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_Share_PassBookRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_Share_PassBookRowChanging(Me, New sp_Share_PassBookRowChangeEvent(CType(e.Row,sp_Share_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_Share_PassBookRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_Share_PassBookRowDeleted(Me, New sp_Share_PassBookRowChangeEvent(CType(e.Row,sp_Share_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_Share_PassBookRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_Share_PassBookRowDeleting(Me, New sp_Share_PassBookRowChangeEvent(CType(e.Row,sp_Share_PassBookRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_Share_PassBookRow(ByVal row As sp_Share_PassBookRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_Share_PassBookDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_CollectionList_RptDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDemandCode As Global.System.Data.DataColumn
        
        Private columnCollectionNo As Global.System.Data.DataColumn
        
        Private columnCollectionDate As Global.System.Data.DataColumn
        
        Private columnMemberCode As Global.System.Data.DataColumn
        
        Private columnLoanNamecode As Global.System.Data.DataColumn
        
        Private columnLoanCode As Global.System.Data.DataColumn
        
        Private columnmno As Global.System.Data.DataColumn
        
        Private columnYno As Global.System.Data.DataColumn
        
        Private columnTokenNo As Global.System.Data.DataColumn
        
        Private columnROI As Global.System.Data.DataColumn
        
        Private columnPrinciple As Global.System.Data.DataColumn
        
        Private columnInt As Global.System.Data.DataColumn
        
        Private columnBal_OS As Global.System.Data.DataColumn
        
        Private columnPrinted As Global.System.Data.DataColumn
        
        Private columnPageNumber As Global.System.Data.DataColumn
        
        Private columnLineNumber As Global.System.Data.DataColumn
        
        Private columnParticulars As Global.System.Data.DataColumn
        
        Private columnModeofReceipt As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnEmployeeNumber As Global.System.Data.DataColumn
        
        Private columnMemberName As Global.System.Data.DataColumn
        
        Private columnMemberName_Tamil As Global.System.Data.DataColumn
        
        Private columnMemberType As Global.System.Data.DataColumn
        
        Private columnLoanName As Global.System.Data.DataColumn
        
        Private columnLoanNumber As Global.System.Data.DataColumn
        
        Private columnStrLoanNumber As Global.System.Data.DataColumn
        
        Private columnLoanDate As Global.System.Data.DataColumn
        
        Private columnLoanAmount As Global.System.Data.DataColumn
        
        Private columnLoanPeriod As Global.System.Data.DataColumn
        
        Private columnEmi_Amount As Global.System.Data.DataColumn
        
        Private columnDemandType As Global.System.Data.DataColumn
        
        Private columnDemand As Global.System.Data.DataColumn
        
        Private columnDEMANDTYPENAME As Global.System.Data.DataColumn
        
        Private columnFromDate As Global.System.Data.DataColumn
        
        Private columnToDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_CollectionList_Rpt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemandCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemandCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CollectionNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCollectionNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CollectionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCollectionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNamecodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanNamecode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TokenNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTokenNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrincipleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinciple
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bal_OSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBal_OS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PageNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPageNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParticularsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParticulars
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeofReceiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModeofReceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberName_TamilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberName_Tamil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StrLoanNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStrLoanNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanPeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Emi_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmi_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemandTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemandType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEMANDTYPENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEMANDTYPENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FromDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFromDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_CollectionList_RptRow
            Get
                Return CType(Me.Rows(index),sp_CollectionList_RptRow)
            End Get
        End Property
        
        Public Event sp_CollectionList_RptRowChanging As sp_CollectionList_RptRowChangeEventHandler
        
        Public Event sp_CollectionList_RptRowChanged As sp_CollectionList_RptRowChangeEventHandler
        
        Public Event sp_CollectionList_RptRowDeleting As sp_CollectionList_RptRowChangeEventHandler
        
        Public Event sp_CollectionList_RptRowDeleted As sp_CollectionList_RptRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_CollectionList_RptRow(ByVal row As sp_CollectionList_RptRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_CollectionList_RptRow( _
                    ByVal DemandCode As Integer,  _
                    ByVal CollectionNo As Integer,  _
                    ByVal CollectionDate As Date,  _
                    ByVal MemberCode As Integer,  _
                    ByVal LoanNamecode As Integer,  _
                    ByVal LoanCode As Integer,  _
                    ByVal mno As Integer,  _
                    ByVal Yno As Integer,  _
                    ByVal TokenNo As Integer,  _
                    ByVal ROI As Decimal,  _
                    ByVal Principle As Decimal,  _
                    ByVal Int As Decimal,  _
                    ByVal Bal_OS As Decimal,  _
                    ByVal Printed As Boolean,  _
                    ByVal PageNumber As Integer,  _
                    ByVal LineNumber As Integer,  _
                    ByVal Particulars As String,  _
                    ByVal ModeofReceipt As String,  _
                    ByVal Number As Integer,  _
                    ByVal EmployeeNumber As Integer,  _
                    ByVal MemberName As String,  _
                    ByVal MemberName_Tamil As String,  _
                    ByVal MemberType As String,  _
                    ByVal LoanName As String,  _
                    ByVal LoanNumber As String,  _
                    ByVal StrLoanNumber As String,  _
                    ByVal LoanDate As Date,  _
                    ByVal LoanAmount As Decimal,  _
                    ByVal LoanPeriod As Integer,  _
                    ByVal Emi_Amount As Decimal,  _
                    ByVal DemandType As Integer,  _
                    ByVal Demand As Boolean,  _
                    ByVal DEMANDTYPENAME As String,  _
                    ByVal FromDate As Date,  _
                    ByVal ToDate As Date) As sp_CollectionList_RptRow
            Dim rowsp_CollectionList_RptRow As sp_CollectionList_RptRow = CType(Me.NewRow,sp_CollectionList_RptRow)
            Dim columnValuesArray() As Object = New Object() {DemandCode, CollectionNo, CollectionDate, MemberCode, LoanNamecode, LoanCode, mno, Yno, TokenNo, ROI, Principle, Int, Bal_OS, Printed, PageNumber, LineNumber, Particulars, ModeofReceipt, Number, EmployeeNumber, MemberName, MemberName_Tamil, MemberType, LoanName, LoanNumber, StrLoanNumber, LoanDate, LoanAmount, LoanPeriod, Emi_Amount, DemandType, Demand, DEMANDTYPENAME, FromDate, ToDate}
            rowsp_CollectionList_RptRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_CollectionList_RptRow)
            Return rowsp_CollectionList_RptRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCollectionNo(ByVal CollectionNo As Integer) As sp_CollectionList_RptRow
            Return CType(Me.Rows.Find(New Object() {CollectionNo}),sp_CollectionList_RptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_CollectionList_RptDataTable = CType(MyBase.Clone,sp_CollectionList_RptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_CollectionList_RptDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDemandCode = MyBase.Columns("DemandCode")
            Me.columnCollectionNo = MyBase.Columns("CollectionNo")
            Me.columnCollectionDate = MyBase.Columns("CollectionDate")
            Me.columnMemberCode = MyBase.Columns("MemberCode")
            Me.columnLoanNamecode = MyBase.Columns("LoanNamecode")
            Me.columnLoanCode = MyBase.Columns("LoanCode")
            Me.columnmno = MyBase.Columns("mno")
            Me.columnYno = MyBase.Columns("Yno")
            Me.columnTokenNo = MyBase.Columns("TokenNo")
            Me.columnROI = MyBase.Columns("ROI")
            Me.columnPrinciple = MyBase.Columns("Principle")
            Me.columnInt = MyBase.Columns("Int")
            Me.columnBal_OS = MyBase.Columns("Bal_OS")
            Me.columnPrinted = MyBase.Columns("Printed")
            Me.columnPageNumber = MyBase.Columns("PageNumber")
            Me.columnLineNumber = MyBase.Columns("LineNumber")
            Me.columnParticulars = MyBase.Columns("Particulars")
            Me.columnModeofReceipt = MyBase.Columns("ModeofReceipt")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnEmployeeNumber = MyBase.Columns("EmployeeNumber")
            Me.columnMemberName = MyBase.Columns("MemberName")
            Me.columnMemberName_Tamil = MyBase.Columns("MemberName_Tamil")
            Me.columnMemberType = MyBase.Columns("MemberType")
            Me.columnLoanName = MyBase.Columns("LoanName")
            Me.columnLoanNumber = MyBase.Columns("LoanNumber")
            Me.columnStrLoanNumber = MyBase.Columns("StrLoanNumber")
            Me.columnLoanDate = MyBase.Columns("LoanDate")
            Me.columnLoanAmount = MyBase.Columns("LoanAmount")
            Me.columnLoanPeriod = MyBase.Columns("LoanPeriod")
            Me.columnEmi_Amount = MyBase.Columns("Emi_Amount")
            Me.columnDemandType = MyBase.Columns("DemandType")
            Me.columnDemand = MyBase.Columns("Demand")
            Me.columnDEMANDTYPENAME = MyBase.Columns("DEMANDTYPENAME")
            Me.columnFromDate = MyBase.Columns("FromDate")
            Me.columnToDate = MyBase.Columns("ToDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDemandCode = New Global.System.Data.DataColumn("DemandCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemandCode)
            Me.columnCollectionNo = New Global.System.Data.DataColumn("CollectionNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCollectionNo)
            Me.columnCollectionDate = New Global.System.Data.DataColumn("CollectionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCollectionDate)
            Me.columnMemberCode = New Global.System.Data.DataColumn("MemberCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberCode)
            Me.columnLoanNamecode = New Global.System.Data.DataColumn("LoanNamecode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanNamecode)
            Me.columnLoanCode = New Global.System.Data.DataColumn("LoanCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanCode)
            Me.columnmno = New Global.System.Data.DataColumn("mno", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmno)
            Me.columnYno = New Global.System.Data.DataColumn("Yno", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYno)
            Me.columnTokenNo = New Global.System.Data.DataColumn("TokenNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTokenNo)
            Me.columnROI = New Global.System.Data.DataColumn("ROI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROI)
            Me.columnPrinciple = New Global.System.Data.DataColumn("Principle", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinciple)
            Me.columnInt = New Global.System.Data.DataColumn("Int", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInt)
            Me.columnBal_OS = New Global.System.Data.DataColumn("Bal_OS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBal_OS)
            Me.columnPrinted = New Global.System.Data.DataColumn("Printed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinted)
            Me.columnPageNumber = New Global.System.Data.DataColumn("PageNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPageNumber)
            Me.columnLineNumber = New Global.System.Data.DataColumn("LineNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineNumber)
            Me.columnParticulars = New Global.System.Data.DataColumn("Particulars", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParticulars)
            Me.columnModeofReceipt = New Global.System.Data.DataColumn("ModeofReceipt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModeofReceipt)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnEmployeeNumber = New Global.System.Data.DataColumn("EmployeeNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNumber)
            Me.columnMemberName = New Global.System.Data.DataColumn("MemberName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName)
            Me.columnMemberName_Tamil = New Global.System.Data.DataColumn("MemberName_Tamil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberName_Tamil)
            Me.columnMemberType = New Global.System.Data.DataColumn("MemberType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberType)
            Me.columnLoanName = New Global.System.Data.DataColumn("LoanName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanName)
            Me.columnLoanNumber = New Global.System.Data.DataColumn("LoanNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanNumber)
            Me.columnStrLoanNumber = New Global.System.Data.DataColumn("StrLoanNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStrLoanNumber)
            Me.columnLoanDate = New Global.System.Data.DataColumn("LoanDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanDate)
            Me.columnLoanAmount = New Global.System.Data.DataColumn("LoanAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanAmount)
            Me.columnLoanPeriod = New Global.System.Data.DataColumn("LoanPeriod", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanPeriod)
            Me.columnEmi_Amount = New Global.System.Data.DataColumn("Emi_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmi_Amount)
            Me.columnDemandType = New Global.System.Data.DataColumn("DemandType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemandType)
            Me.columnDemand = New Global.System.Data.DataColumn("Demand", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemand)
            Me.columnDEMANDTYPENAME = New Global.System.Data.DataColumn("DEMANDTYPENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEMANDTYPENAME)
            Me.columnFromDate = New Global.System.Data.DataColumn("FromDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFromDate)
            Me.columnToDate = New Global.System.Data.DataColumn("ToDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCollectionNo}, true))
            Me.columnDemandCode.AllowDBNull = false
            Me.columnCollectionNo.AllowDBNull = false
            Me.columnCollectionNo.Unique = true
            Me.columnParticulars.MaxLength = 100
            Me.columnModeofReceipt.MaxLength = 1
            Me.columnMemberName.MaxLength = 50
            Me.columnMemberName_Tamil.MaxLength = 100
            Me.columnMemberType.MaxLength = 50
            Me.columnLoanName.MaxLength = 50
            Me.columnLoanNumber.MaxLength = 50
            Me.columnStrLoanNumber.ReadOnly = true
            Me.columnStrLoanNumber.MaxLength = 50
            Me.columnDEMANDTYPENAME.ReadOnly = true
            Me.columnDEMANDTYPENAME.MaxLength = 12
            Me.columnFromDate.ReadOnly = true
            Me.columnToDate.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_CollectionList_RptRow() As sp_CollectionList_RptRow
            Return CType(Me.NewRow,sp_CollectionList_RptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_CollectionList_RptRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_CollectionList_RptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_CollectionList_RptRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_CollectionList_RptRowChanged(Me, New sp_CollectionList_RptRowChangeEvent(CType(e.Row,sp_CollectionList_RptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_CollectionList_RptRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_CollectionList_RptRowChanging(Me, New sp_CollectionList_RptRowChangeEvent(CType(e.Row,sp_CollectionList_RptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_CollectionList_RptRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_CollectionList_RptRowDeleted(Me, New sp_CollectionList_RptRowChangeEvent(CType(e.Row,sp_CollectionList_RptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_CollectionList_RptRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_CollectionList_RptRowDeleting(Me, New sp_CollectionList_RptRowChangeEvent(CType(e.Row,sp_CollectionList_RptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_CollectionList_RptRow(ByVal row As sp_CollectionList_RptRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LMWDataSet = New LMWDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_CollectionList_RptDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_Company_GetAllRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_Company_GetAll As sp_Company_GetAllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_Company_GetAll = CType(Me.Table,sp_Company_GetAllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As Integer
            Get
                Return CType(Me(Me.tablesp_Company_GetAll.CompanyCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyName() As String
            Get
                Return CType(Me(Me.tablesp_Company_GetAll.CompanyNameColumn),String)
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.CompanyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShortName() As String
            Get
                Return CType(Me(Me.tablesp_Company_GetAll.ShortNameColumn),String)
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.ShortNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.Address1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address1' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.Address2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address2' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tablesp_Company_GetAll.CityColumn),String)
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property District() As String
            Get
                Return CType(Me(Me.tablesp_Company_GetAll.DistrictColumn),String)
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.DistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PinCode() As String
            Get
                Return CType(Me(Me.tablesp_Company_GetAll.PinCodeColumn),String)
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.PinCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhoneNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.PhoneNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PhoneNo' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.PhoneNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MobileNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.MobileNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MobileNo' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.MobileNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Website() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.WebsiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Website' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.WebsiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMail() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.EMailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMail' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.EMailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TINNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.TINNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TINNo' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.TINNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSTNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.CSTNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CSTNo' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.CSTNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StateCode() As Integer
            Get
                Return CType(Me(Me.tablesp_Company_GetAll.StateCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.StateCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsuranceFlag() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.InsuranceFlagColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsuranceFlag' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.InsuranceFlagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypingFont() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.TypingFontColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypingFont' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.TypingFontColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subcentrecode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.subcentrecodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subcentrecode' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.subcentrecodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SighningAuthority() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Company_GetAll.SighningAuthorityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SighningAuthority' in table 'sp_Company_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Company_GetAll.SighningAuthorityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress1Null() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.Address1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress1Null()
            Me(Me.tablesp_Company_GetAll.Address1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress2Null() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.Address2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress2Null()
            Me(Me.tablesp_Company_GetAll.Address2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tablesp_Company_GetAll.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhoneNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.PhoneNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhoneNoNull()
            Me(Me.tablesp_Company_GetAll.PhoneNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMobileNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.MobileNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMobileNoNull()
            Me(Me.tablesp_Company_GetAll.MobileNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWebsiteNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.WebsiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWebsiteNull()
            Me(Me.tablesp_Company_GetAll.WebsiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.EMailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMailNull()
            Me(Me.tablesp_Company_GetAll.EMailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTINNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.TINNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTINNoNull()
            Me(Me.tablesp_Company_GetAll.TINNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSTNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.CSTNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSTNoNull()
            Me(Me.tablesp_Company_GetAll.CSTNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsuranceFlagNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.InsuranceFlagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsuranceFlagNull()
            Me(Me.tablesp_Company_GetAll.InsuranceFlagColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypingFontNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.TypingFontColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypingFontNull()
            Me(Me.tablesp_Company_GetAll.TypingFontColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubcentrecodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.subcentrecodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubcentrecodeNull()
            Me(Me.tablesp_Company_GetAll.subcentrecodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSighningAuthorityNull() As Boolean
            Return Me.IsNull(Me.tablesp_Company_GetAll.SighningAuthorityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSighningAuthorityNull()
            Me(Me.tablesp_Company_GetAll.SighningAuthorityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_DayBook_RptRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_DayBook_Rpt As sp_DayBook_RptDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_DayBook_Rpt = CType(Me.Table,sp_DayBook_RptDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.ReceiptDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptDate' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.ReceiptDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RHeadName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.RHeadNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RHeadName' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.RHeadNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RHead1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.RHead1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RHead1' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.RHead1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RHead2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.RHead2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RHead2' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.RHead2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RLtr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.RLtrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RLtr' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.RLtrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RCash() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.RCashColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RCash' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.RCashColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RAdjustment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.RAdjustmentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RAdjustment' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.RAdjustmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.RTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RTotal' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.RTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rp() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.RpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rp' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.RpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property page() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.pageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'page' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.pageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property receipt() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.receiptColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'receipt' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.receiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.HeadCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HeadCode' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.HeadCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.GroupCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupCode' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.GroupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntryFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.EntryFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntryFrom' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.EntryFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.VoucherCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherCode' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.VoucherCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Rpt.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'sp_DayBook_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Rpt.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.ReceiptDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptDateNull()
            Me(Me.tablesp_DayBook_Rpt.ReceiptDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRHeadNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.RHeadNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRHeadNameNull()
            Me(Me.tablesp_DayBook_Rpt.RHeadNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRHead1Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.RHead1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRHead1Null()
            Me(Me.tablesp_DayBook_Rpt.RHead1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRHead2Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.RHead2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRHead2Null()
            Me(Me.tablesp_DayBook_Rpt.RHead2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRLtrNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.RLtrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRLtrNull()
            Me(Me.tablesp_DayBook_Rpt.RLtrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRCashNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.RCashColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRCashNull()
            Me(Me.tablesp_DayBook_Rpt.RCashColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRAdjustmentNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.RAdjustmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRAdjustmentNull()
            Me(Me.tablesp_DayBook_Rpt.RAdjustmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.RTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRTotalNull()
            Me(Me.tablesp_DayBook_Rpt.RTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRpNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.RpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRpNull()
            Me(Me.tablesp_DayBook_Rpt.RpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspageNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.pageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpageNull()
            Me(Me.tablesp_DayBook_Rpt.pageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreceiptNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.receiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreceiptNull()
            Me(Me.tablesp_DayBook_Rpt.receiptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHeadCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.HeadCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHeadCodeNull()
            Me(Me.tablesp_DayBook_Rpt.HeadCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.GroupCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupCodeNull()
            Me(Me.tablesp_DayBook_Rpt.GroupCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntryFromNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.EntryFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntryFromNull()
            Me(Me.tablesp_DayBook_Rpt.EntryFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.VoucherCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherCodeNull()
            Me(Me.tablesp_DayBook_Rpt.VoucherCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Rpt.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tablesp_DayBook_Rpt.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_Group_GetAllRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_Group_GetAll As sp_Group_GetAllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_Group_GetAll = CType(Me.Table,sp_Group_GetAllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupCode() As Integer
            Get
                Return CType(Me(Me.tablesp_Group_GetAll.GroupCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.GroupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupName() As String
            Get
                Return CType(Me(Me.tablesp_Group_GetAll.GroupNameColumn),String)
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.GroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Group_GetAll.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'sp_Group_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As Integer
            Get
                Return CType(Me(Me.tablesp_Group_GetAll.CompanyCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OnBalanceSheet() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_Group_GetAll.OnBalanceSheetColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OnBalanceSheet' in table 'sp_Group_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.OnBalanceSheetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OnProfitLoss() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_Group_GetAll.OnProfitLossColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OnProfitLoss' in table 'sp_Group_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.OnProfitLossColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OnTrading() As Boolean
            Get
                Return CType(Me(Me.tablesp_Group_GetAll.OnTradingColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.OnTradingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OnReport() As Boolean
            Get
                Return CType(Me(Me.tablesp_Group_GetAll.OnReportColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.OnReportColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccountTypeCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Group_GetAll.AccountTypeCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccountTypeCode' in table 'sp_Group_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.AccountTypeCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DelFlag() As Boolean
            Get
                Return CType(Me(Me.tablesp_Group_GetAll.DelFlagColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_Group_GetAll.DelFlagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablesp_Group_GetAll.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tablesp_Group_GetAll.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOnBalanceSheetNull() As Boolean
            Return Me.IsNull(Me.tablesp_Group_GetAll.OnBalanceSheetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOnBalanceSheetNull()
            Me(Me.tablesp_Group_GetAll.OnBalanceSheetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOnProfitLossNull() As Boolean
            Return Me.IsNull(Me.tablesp_Group_GetAll.OnProfitLossColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOnProfitLossNull()
            Me(Me.tablesp_Group_GetAll.OnProfitLossColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccountTypeCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Group_GetAll.AccountTypeCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccountTypeCodeNull()
            Me(Me.tablesp_Group_GetAll.AccountTypeCodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_Head_GetAllRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_Head_GetAll As sp_Head_GetAllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_Head_GetAll = CType(Me.Table,sp_Head_GetAllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As Integer
            Get
                Return CType(Me(Me.tablesp_Head_GetAll.CompanyCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadCode() As Integer
            Get
                Return CType(Me(Me.tablesp_Head_GetAll.HeadCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.HeadCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadName() As String
            Get
                Return CType(Me(Me.tablesp_Head_GetAll.HeadNameColumn),String)
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.HeadNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupCode() As Integer
            Get
                Return CType(Me(Me.tablesp_Head_GetAll.GroupCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.GroupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Head_GetAll.GroupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupName' in table 'sp_Head_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.GroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OpeningBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_Head_GetAll.OpeningBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OpeningBalance' in table 'sp_Head_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.OpeningBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rp() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_Head_GetAll.RpColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rp' in table 'sp_Head_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.RpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadOpeningCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Head_GetAll.HeadOpeningCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HeadOpeningCode' in table 'sp_Head_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.HeadOpeningCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OnVoucherNumber_YesNo() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_Head_GetAll.OnVoucherNumber_YesNoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OnVoucherNumber_YesNo' in table 'sp_Head_GetAll' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.OnVoucherNumber_YesNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DelFlag() As Boolean
            Get
                Return CType(Me(Me.tablesp_Head_GetAll.DelFlagColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_Head_GetAll.DelFlagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_Head_GetAll.GroupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupNameNull()
            Me(Me.tablesp_Head_GetAll.GroupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpeningBalanceNull() As Boolean
            Return Me.IsNull(Me.tablesp_Head_GetAll.OpeningBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpeningBalanceNull()
            Me(Me.tablesp_Head_GetAll.OpeningBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRpNull() As Boolean
            Return Me.IsNull(Me.tablesp_Head_GetAll.RpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRpNull()
            Me(Me.tablesp_Head_GetAll.RpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHeadOpeningCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Head_GetAll.HeadOpeningCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHeadOpeningCodeNull()
            Me(Me.tablesp_Head_GetAll.HeadOpeningCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOnVoucherNumber_YesNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Head_GetAll.OnVoucherNumber_YesNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOnVoucherNumber_YesNoNull()
            Me(Me.tablesp_Head_GetAll.OnVoucherNumber_YesNoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_LedgerBookRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_LedgerBook As sp_LedgerBookDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_LedgerBook = CType(Me.Table,sp_LedgerBookDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.VoucherDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherDate' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.VoucherDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.HeadNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HeadName' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.HeadNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Head1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.Head1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Head1' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.Head1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Head2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.Head2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Head2' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.Head2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ltr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.LtrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ltr' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.LtrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cash() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.CashColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cash' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.CashColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adjustment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.AdjustmentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adjustment' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.AdjustmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rp() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.RpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rp' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.RpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.HeadCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HeadCode' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.HeadCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.GroupCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupCode' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.GroupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntryFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.EntryFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntryFrom' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.EntryFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.VoucherCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherCode' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.VoucherCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property page() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.pageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'page' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.pageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property receipt() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.receiptColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'receipt' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.receiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MNO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.MNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MNO' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.MNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATE1() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.DATE1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE1' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.DATE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATE2() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.DATE2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE2' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.DATE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPNBALANCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.OPNBALANCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPNBALANCE' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.OPNBALANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPN_RP() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.OPN_RPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPN_RP' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.OPN_RPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REPT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.REPTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPT' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.REPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PYMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.PYMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PYMT' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.PYMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTREPT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.TOTREPTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTREPT' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.TOTREPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTPYMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.TOTPYMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTPYMT' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.TOTPYMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LedgerReceipt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.LedgerReceiptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LedgerReceipt' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.LedgerReceiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LedgerPayment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.LedgerPaymentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LedgerPayment' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.LedgerPaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OnReport() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.OnReportColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OnReport' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.OnReportColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccountTypeCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.AccountTypeCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccountTypeCode' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.AccountTypeCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.GroupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupName' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.GroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupAcTypeCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.GroupAcTypeCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupAcTypeCode' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.GroupAcTypeCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACNO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LedgerBook.ACNOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACNO' in table 'sp_LedgerBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LedgerBook.ACNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.VoucherDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherDateNull()
            Me(Me.tablesp_LedgerBook.VoucherDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHeadNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.HeadNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHeadNameNull()
            Me(Me.tablesp_LedgerBook.HeadNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHead1Null() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.Head1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHead1Null()
            Me(Me.tablesp_LedgerBook.Head1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHead2Null() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.Head2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHead2Null()
            Me(Me.tablesp_LedgerBook.Head2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLtrNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.LtrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLtrNull()
            Me(Me.tablesp_LedgerBook.LtrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.CashColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashNull()
            Me(Me.tablesp_LedgerBook.CashColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustmentNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.AdjustmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustmentNull()
            Me(Me.tablesp_LedgerBook.AdjustmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_LedgerBook.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRpNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.RpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRpNull()
            Me(Me.tablesp_LedgerBook.RpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHeadCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.HeadCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHeadCodeNull()
            Me(Me.tablesp_LedgerBook.HeadCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.GroupCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupCodeNull()
            Me(Me.tablesp_LedgerBook.GroupCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntryFromNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.EntryFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntryFromNull()
            Me(Me.tablesp_LedgerBook.EntryFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.VoucherCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherCodeNull()
            Me(Me.tablesp_LedgerBook.VoucherCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tablesp_LedgerBook.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspageNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.pageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpageNull()
            Me(Me.tablesp_LedgerBook.pageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreceiptNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.receiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreceiptNull()
            Me(Me.tablesp_LedgerBook.receiptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMNONull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.MNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMNONull()
            Me(Me.tablesp_LedgerBook.MNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATE1Null() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.DATE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATE1Null()
            Me(Me.tablesp_LedgerBook.DATE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATE2Null() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.DATE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATE2Null()
            Me(Me.tablesp_LedgerBook.DATE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPNBALANCENull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.OPNBALANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPNBALANCENull()
            Me(Me.tablesp_LedgerBook.OPNBALANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPN_RPNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.OPN_RPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPN_RPNull()
            Me(Me.tablesp_LedgerBook.OPN_RPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREPTNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.REPTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREPTNull()
            Me(Me.tablesp_LedgerBook.REPTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPYMTNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.PYMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPYMTNull()
            Me(Me.tablesp_LedgerBook.PYMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTREPTNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.TOTREPTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTREPTNull()
            Me(Me.tablesp_LedgerBook.TOTREPTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTPYMTNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.TOTPYMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTPYMTNull()
            Me(Me.tablesp_LedgerBook.TOTPYMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLedgerReceiptNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.LedgerReceiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLedgerReceiptNull()
            Me(Me.tablesp_LedgerBook.LedgerReceiptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLedgerPaymentNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.LedgerPaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLedgerPaymentNull()
            Me(Me.tablesp_LedgerBook.LedgerPaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOnReportNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.OnReportColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOnReportNull()
            Me(Me.tablesp_LedgerBook.OnReportColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccountTypeCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.AccountTypeCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccountTypeCodeNull()
            Me(Me.tablesp_LedgerBook.AccountTypeCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.GroupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupNameNull()
            Me(Me.tablesp_LedgerBook.GroupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupAcTypeCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.GroupAcTypeCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupAcTypeCodeNull()
            Me(Me.tablesp_LedgerBook.GroupAcTypeCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACNONull() As Boolean
            Return Me.IsNull(Me.tablesp_LedgerBook.ACNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACNONull()
            Me(Me.tablesp_LedgerBook.ACNOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_DayBook_FINALRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_DayBook_FINAL As sp_DayBook_FINALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_DayBook_FINAL = CType(Me.Table,sp_DayBook_FINALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROWNO() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.ROWNOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROWNO' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.ROWNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VOUCHERDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.VOUCHERDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VOUCHERDATE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.VOUCHERDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.HEADNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADNAME' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.HEADNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEAD1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.HEAD1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEAD1' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.HEAD1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEAD2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.HEAD2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEAD2' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.HEAD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LTR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.LTRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LTR' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.LTRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASH() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.CASHColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CASH' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.CASHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADJUSTMENT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.ADJUSTMENTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADJUSTMENT' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.ADJUSTMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RP() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.RPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RP' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.RPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADCODE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.HEADCODEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADCODE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.HEADCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GROUPCODE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.GROUPCODEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GROUPCODE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.GROUPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPENINGBALANCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.OPENINGBALANCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPENINGBALANCE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.OPENINGBALANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLOSSINGBALANCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.CLOSSINGBALANCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLOSSINGBALANCE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.CLOSSINGBALANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENTRYFROM() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.ENTRYFROMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENTRYFROM' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.ENTRYFROMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMWORD() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.NUMWORDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMWORD' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.NUMWORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VOUCHERCODE() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.VOUCHERCODEColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VOUCHERCODE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.VOUCHERCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMARKS() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.REMARKSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REMARKS' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.REMARKSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PAGEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAGE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIPT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.RECEIPTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIPT' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.RECEIPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROWNO() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PROWNOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROWNO' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PROWNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHEADNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PHEADNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHEADNAME' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PHEADNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHEAD1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PHEAD1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHEAD1' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PHEAD1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHEAD2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PHEAD2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHEAD2' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PHEAD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLTR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PLTRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLTR' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PLTRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PCASH() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PCASHColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PCASH' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PCASHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PADJUSTMENT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PADJUSTMENTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PADJUSTMENT' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PADJUSTMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PTOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PTOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PTOTAL' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRP() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PRPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRP' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PRPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHEADCODE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PHEADCODEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHEADCODE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PHEADCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGROUPCODE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PGROUPCODEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PGROUPCODE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PGROUPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POPENINGBALANCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.POPENINGBALANCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POPENINGBALANCE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.POPENINGBALANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PCLOSSINGBALANCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PCLOSSINGBALANCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PCLOSSINGBALANCE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PCLOSSINGBALANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PENTRYFROM() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PENTRYFROMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PENTRYFROM' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PENTRYFROMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PNUMWORD() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PNUMWORDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PNUMWORD' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PNUMWORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PVOUCHERCODE() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PVOUCHERCODEColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PVOUCHERCODE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PVOUCHERCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREMARKS() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PREMARKSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PREMARKS' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PREMARKSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PPAGE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PPAGEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPAGE' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PPAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECEIPT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_FINAL.PRECEIPTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRECEIPT' in table 'sp_DayBook_FINAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_FINAL.PRECEIPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROWNONull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.ROWNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROWNONull()
            Me(Me.tablesp_DayBook_FINAL.ROWNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVOUCHERDATENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.VOUCHERDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVOUCHERDATENull()
            Me(Me.tablesp_DayBook_FINAL.VOUCHERDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADNAMENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.HEADNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADNAMENull()
            Me(Me.tablesp_DayBook_FINAL.HEADNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEAD1Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.HEAD1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEAD1Null()
            Me(Me.tablesp_DayBook_FINAL.HEAD1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEAD2Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.HEAD2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEAD2Null()
            Me(Me.tablesp_DayBook_FINAL.HEAD2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLTRNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.LTRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLTRNull()
            Me(Me.tablesp_DayBook_FINAL.LTRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASHNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.CASHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASHNull()
            Me(Me.tablesp_DayBook_FINAL.CASHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADJUSTMENTNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.ADJUSTMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADJUSTMENTNull()
            Me(Me.tablesp_DayBook_FINAL.ADJUSTMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALNull()
            Me(Me.tablesp_DayBook_FINAL.TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRPNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.RPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRPNull()
            Me(Me.tablesp_DayBook_FINAL.RPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADCODENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.HEADCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADCODENull()
            Me(Me.tablesp_DayBook_FINAL.HEADCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.GROUPCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGROUPCODENull()
            Me(Me.tablesp_DayBook_FINAL.GROUPCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPENINGBALANCENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.OPENINGBALANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPENINGBALANCENull()
            Me(Me.tablesp_DayBook_FINAL.OPENINGBALANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLOSSINGBALANCENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.CLOSSINGBALANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLOSSINGBALANCENull()
            Me(Me.tablesp_DayBook_FINAL.CLOSSINGBALANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENTRYFROMNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.ENTRYFROMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENTRYFROMNull()
            Me(Me.tablesp_DayBook_FINAL.ENTRYFROMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMWORDNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.NUMWORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMWORDNull()
            Me(Me.tablesp_DayBook_FINAL.NUMWORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVOUCHERCODENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.VOUCHERCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVOUCHERCODENull()
            Me(Me.tablesp_DayBook_FINAL.VOUCHERCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.REMARKSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMARKSNull()
            Me(Me.tablesp_DayBook_FINAL.REMARKSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAGENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAGENull()
            Me(Me.tablesp_DayBook_FINAL.PAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIPTNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.RECEIPTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIPTNull()
            Me(Me.tablesp_DayBook_FINAL.RECEIPTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROWNONull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PROWNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROWNONull()
            Me(Me.tablesp_DayBook_FINAL.PROWNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHEADNAMENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PHEADNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHEADNAMENull()
            Me(Me.tablesp_DayBook_FINAL.PHEADNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHEAD1Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PHEAD1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHEAD1Null()
            Me(Me.tablesp_DayBook_FINAL.PHEAD1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHEAD2Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PHEAD2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHEAD2Null()
            Me(Me.tablesp_DayBook_FINAL.PHEAD2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLTRNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PLTRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLTRNull()
            Me(Me.tablesp_DayBook_FINAL.PLTRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPCASHNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PCASHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPCASHNull()
            Me(Me.tablesp_DayBook_FINAL.PCASHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPADJUSTMENTNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PADJUSTMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPADJUSTMENTNull()
            Me(Me.tablesp_DayBook_FINAL.PADJUSTMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPTOTALNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPTOTALNull()
            Me(Me.tablesp_DayBook_FINAL.PTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRPNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PRPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRPNull()
            Me(Me.tablesp_DayBook_FINAL.PRPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHEADCODENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PHEADCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHEADCODENull()
            Me(Me.tablesp_DayBook_FINAL.PHEADCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PGROUPCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPGROUPCODENull()
            Me(Me.tablesp_DayBook_FINAL.PGROUPCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOPENINGBALANCENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.POPENINGBALANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOPENINGBALANCENull()
            Me(Me.tablesp_DayBook_FINAL.POPENINGBALANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPCLOSSINGBALANCENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PCLOSSINGBALANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPCLOSSINGBALANCENull()
            Me(Me.tablesp_DayBook_FINAL.PCLOSSINGBALANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPENTRYFROMNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PENTRYFROMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPENTRYFROMNull()
            Me(Me.tablesp_DayBook_FINAL.PENTRYFROMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPNUMWORDNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PNUMWORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPNUMWORDNull()
            Me(Me.tablesp_DayBook_FINAL.PNUMWORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPVOUCHERCODENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PVOUCHERCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPVOUCHERCODENull()
            Me(Me.tablesp_DayBook_FINAL.PVOUCHERCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREMARKSNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PREMARKSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREMARKSNull()
            Me(Me.tablesp_DayBook_FINAL.PREMARKSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPPAGENull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PPAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPPAGENull()
            Me(Me.tablesp_DayBook_FINAL.PPAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECEIPTNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_FINAL.PRECEIPTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECEIPTNull()
            Me(Me.tablesp_DayBook_FINAL.PRECEIPTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_DayBook_PytRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_DayBook_Pyt As sp_DayBook_PytDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_DayBook_Pyt = CType(Me.Table,sp_DayBook_PytDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paymentDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.paymentDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'paymentDate' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.paymentDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHeadName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.PHeadNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHeadName' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.PHeadNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHead1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.PHead1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHead1' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.PHead1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHead2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.PHead2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHead2' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.PHead2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLtr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.PLtrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLtr' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.PLtrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PCash() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.PCashColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PCash' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.PCashColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAdjustment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.PAdjustmentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAdjustment' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.PAdjustmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.PTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PTotal' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.PTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rp() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.RpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rp' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.RpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property page() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.pageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'page' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.pageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.HeadCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HeadCode' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.HeadCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.GroupCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupCode' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.GroupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntryFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.EntryFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntryFrom' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.EntryFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.VoucherCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherCode' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.VoucherCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property receipt() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook_Pyt.receiptColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'receipt' in table 'sp_DayBook_Pyt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook_Pyt.receiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspaymentDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.paymentDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpaymentDateNull()
            Me(Me.tablesp_DayBook_Pyt.paymentDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHeadNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.PHeadNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHeadNameNull()
            Me(Me.tablesp_DayBook_Pyt.PHeadNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHead1Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.PHead1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHead1Null()
            Me(Me.tablesp_DayBook_Pyt.PHead1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHead2Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.PHead2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHead2Null()
            Me(Me.tablesp_DayBook_Pyt.PHead2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLtrNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.PLtrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLtrNull()
            Me(Me.tablesp_DayBook_Pyt.PLtrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPCashNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.PCashColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPCashNull()
            Me(Me.tablesp_DayBook_Pyt.PCashColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAdjustmentNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.PAdjustmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAdjustmentNull()
            Me(Me.tablesp_DayBook_Pyt.PAdjustmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.PTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPTotalNull()
            Me(Me.tablesp_DayBook_Pyt.PTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRpNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.RpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRpNull()
            Me(Me.tablesp_DayBook_Pyt.RpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspageNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.pageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpageNull()
            Me(Me.tablesp_DayBook_Pyt.pageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHeadCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.HeadCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHeadCodeNull()
            Me(Me.tablesp_DayBook_Pyt.HeadCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.GroupCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupCodeNull()
            Me(Me.tablesp_DayBook_Pyt.GroupCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntryFromNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.EntryFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntryFromNull()
            Me(Me.tablesp_DayBook_Pyt.EntryFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.VoucherCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherCodeNull()
            Me(Me.tablesp_DayBook_Pyt.VoucherCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tablesp_DayBook_Pyt.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreceiptNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook_Pyt.receiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreceiptNull()
            Me(Me.tablesp_DayBook_Pyt.receiptColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_TDCollectionRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_TDCollection As sp_TDCollectionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_TDCollection = CType(Me.Table,sp_TDCollectionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowNo() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.RowNoColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowNo' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.RowNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_TDCollection.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_TDCollection.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Return CType(Me(Me.tablesp_TDCollection.EmployeeNumberColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_TDCollection.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Membername() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.MembernameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Membername' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.MembernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Return CType(Me(Me.tablesp_TDCollection.NumberColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_TDCollection.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOpening() As Decimal
            Get
                Return CType(Me(Me.tablesp_TDCollection.TDOpeningColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_TDCollection.TDOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APril() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.APrilColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APril' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.APrilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property May() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.MayColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'May' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.MayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property June() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.JuneColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'June' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.JuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property July() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.JulyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'July' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.JulyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property August() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.AugustColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'August' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.AugustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property September() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.SeptemberColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'September' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.SeptemberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property October() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.OctoberColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'October' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.OctoberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property November() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.NovemberColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'November' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.NovemberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property December() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.DecemberColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'December' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.DecemberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property January() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.JanuaryColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'January' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.JanuaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property February() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.FebruaryColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'February' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.FebruaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property March() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.MarchColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'March' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.MarchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCollection() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.TotalCollectionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalCollection' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.TotalCollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClossingBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.ClossingBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClossingBalance' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.ClossingBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property companycode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.companycodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'companycode' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.companycodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property intonopening() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.intonopeningColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'intonopening' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.intonopeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property intoncollection() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.intoncollectionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'intoncollection' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.intoncollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Insurance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.InsuranceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Insurance' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.InsuranceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Payment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDCollection.PaymentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Payment' in table 'sp_TDCollection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDCollection.PaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.RowNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowNoNull()
            Me(Me.tablesp_TDCollection.RowNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMembernameNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.MembernameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMembernameNull()
            Me(Me.tablesp_TDCollection.MembernameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPrilNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.APrilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPrilNull()
            Me(Me.tablesp_TDCollection.APrilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMayNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.MayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMayNull()
            Me(Me.tablesp_TDCollection.MayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJuneNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.JuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJuneNull()
            Me(Me.tablesp_TDCollection.JuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJulyNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.JulyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJulyNull()
            Me(Me.tablesp_TDCollection.JulyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAugustNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.AugustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAugustNull()
            Me(Me.tablesp_TDCollection.AugustColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeptemberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.SeptemberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeptemberNull()
            Me(Me.tablesp_TDCollection.SeptemberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOctoberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.OctoberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOctoberNull()
            Me(Me.tablesp_TDCollection.OctoberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNovemberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.NovemberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNovemberNull()
            Me(Me.tablesp_TDCollection.NovemberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDecemberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.DecemberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDecemberNull()
            Me(Me.tablesp_TDCollection.DecemberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJanuaryNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.JanuaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJanuaryNull()
            Me(Me.tablesp_TDCollection.JanuaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFebruaryNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.FebruaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFebruaryNull()
            Me(Me.tablesp_TDCollection.FebruaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarchNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.MarchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarchNull()
            Me(Me.tablesp_TDCollection.MarchColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCollectionNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.TotalCollectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCollectionNull()
            Me(Me.tablesp_TDCollection.TotalCollectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClossingBalanceNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.ClossingBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClossingBalanceNull()
            Me(Me.tablesp_TDCollection.ClossingBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscompanycodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.companycodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcompanycodeNull()
            Me(Me.tablesp_TDCollection.companycodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsintonopeningNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.intonopeningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetintonopeningNull()
            Me(Me.tablesp_TDCollection.intonopeningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsintoncollectionNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.intoncollectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetintoncollectionNull()
            Me(Me.tablesp_TDCollection.intoncollectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsuranceNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.InsuranceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsuranceNull()
            Me(Me.tablesp_TDCollection.InsuranceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDCollection.PaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentNull()
            Me(Me.tablesp_TDCollection.PaymentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_Member_GetAllRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_Member_GetAll As sp_Member_GetAllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_Member_GetAll = CType(Me.Table,sp_Member_GetAllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_Member_GetAll.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Return CType(Me(Me.tablesp_Member_GetAll.NumberColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Return CType(Me(Me.tablesp_Member_GetAll.EmployeeNumberColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOpening() As Decimal
            Get
                Return CType(Me(Me.tablesp_Member_GetAll.TDOpeningColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.TDOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strEmpNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.strEmpNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strEmpNo' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.strEmpNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.MemberNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.MemberNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Boolean
            Get
                Return CType(Me(Me.tablesp_Member_GetAll.StatusColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEMBERTYPE1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.MEMBERTYPE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEMBERTYPE1' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.MEMBERTYPE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.Address1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address1' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.Address2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address2' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.Address3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address3' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address4() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.Address4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address4' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.Address4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MobileNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.MobileNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MobileNo' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.MobileNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberType() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.MemberTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberType' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.MemberTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareOpening() As Decimal
            Get
                Return CType(Me(Me.tablesp_Member_GetAll.ShareOpeningColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.ShareOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName_Tamil() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.MemberName_TamilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName_Tamil' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.MemberName_TamilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address_Tamil1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.Address_Tamil1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address_Tamil1' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.Address_Tamil1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address_Tamil2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.Address_Tamil2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address_Tamil2' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.Address_Tamil2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address_Tamil3() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.Address_Tamil3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address_Tamil3' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.Address_Tamil3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address_Tamil4() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.Address_Tamil4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address_Tamil4' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.Address_Tamil4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Photo_Image() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesp_Member_GetAll.Photo_ImageColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Photo_Image' in table 'sp_Member_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Member_GetAll.Photo_ImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrEmpNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.strEmpNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrEmpNoNull()
            Me(Me.tablesp_Member_GetAll.strEmpNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.MemberNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberNameNull()
            Me(Me.tablesp_Member_GetAll.MemberNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEMBERTYPE1Null() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.MEMBERTYPE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEMBERTYPE1Null()
            Me(Me.tablesp_Member_GetAll.MEMBERTYPE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress1Null() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.Address1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress1Null()
            Me(Me.tablesp_Member_GetAll.Address1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress2Null() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.Address2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress2Null()
            Me(Me.tablesp_Member_GetAll.Address2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress3Null() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.Address3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress3Null()
            Me(Me.tablesp_Member_GetAll.Address3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress4Null() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.Address4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress4Null()
            Me(Me.tablesp_Member_GetAll.Address4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMobileNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.MobileNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMobileNoNull()
            Me(Me.tablesp_Member_GetAll.MobileNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberTypeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.MemberTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberTypeNull()
            Me(Me.tablesp_Member_GetAll.MemberTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberName_TamilNull() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.MemberName_TamilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberName_TamilNull()
            Me(Me.tablesp_Member_GetAll.MemberName_TamilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress_Tamil1Null() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.Address_Tamil1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress_Tamil1Null()
            Me(Me.tablesp_Member_GetAll.Address_Tamil1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress_Tamil2Null() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.Address_Tamil2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress_Tamil2Null()
            Me(Me.tablesp_Member_GetAll.Address_Tamil2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress_Tamil3Null() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.Address_Tamil3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress_Tamil3Null()
            Me(Me.tablesp_Member_GetAll.Address_Tamil3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress_Tamil4Null() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.Address_Tamil4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress_Tamil4Null()
            Me(Me.tablesp_Member_GetAll.Address_Tamil4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhoto_ImageNull() As Boolean
            Return Me.IsNull(Me.tablesp_Member_GetAll.Photo_ImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhoto_ImageNull()
            Me(Me.tablesp_Member_GetAll.Photo_ImageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_DayBookRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_DayBook As sp_DayBookDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_DayBook = CType(Me.Table,sp_DayBookDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowId() As Long
            Get
                Return CType(Me(Me.tablesp_DayBook.RowIdColumn),Long)
            End Get
            Set
                Me(Me.tablesp_DayBook.RowIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.VoucherDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherDate' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.VoucherDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.HeadNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HeadName' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.HeadNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Head1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.Head1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Head1' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.Head1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Head2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.Head2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Head2' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.Head2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ltr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.LtrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ltr' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.LtrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cash() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.CashColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cash' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.CashColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adjustment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.AdjustmentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adjustment' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.AdjustmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rp() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.RpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rp' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.RpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.HeadCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HeadCode' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.HeadCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.GroupCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupCode' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.GroupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OpeningBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.OpeningBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OpeningBalance' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.OpeningBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClossingBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.ClossingBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClossingBalance' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.ClossingBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntryFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.EntryFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntryFrom' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.EntryFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numword() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.numwordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'numword' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.numwordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.VoucherCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherCode' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.VoucherCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property page() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.pageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'page' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.pageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property receipt() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.receiptColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'receipt' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.receiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RptAdjs() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.RptAdjsColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RptAdjs' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.RptAdjsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PytAdjs() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_DayBook.PytAdjsColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PytAdjs' in table 'sp_DayBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_DayBook.PytAdjsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.VoucherDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherDateNull()
            Me(Me.tablesp_DayBook.VoucherDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHeadNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.HeadNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHeadNameNull()
            Me(Me.tablesp_DayBook.HeadNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHead1Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.Head1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHead1Null()
            Me(Me.tablesp_DayBook.Head1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHead2Null() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.Head2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHead2Null()
            Me(Me.tablesp_DayBook.Head2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLtrNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.LtrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLtrNull()
            Me(Me.tablesp_DayBook.LtrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.CashColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashNull()
            Me(Me.tablesp_DayBook.CashColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustmentNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.AdjustmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustmentNull()
            Me(Me.tablesp_DayBook.AdjustmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_DayBook.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRpNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.RpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRpNull()
            Me(Me.tablesp_DayBook.RpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHeadCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.HeadCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHeadCodeNull()
            Me(Me.tablesp_DayBook.HeadCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.GroupCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupCodeNull()
            Me(Me.tablesp_DayBook.GroupCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpeningBalanceNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.OpeningBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpeningBalanceNull()
            Me(Me.tablesp_DayBook.OpeningBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClossingBalanceNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.ClossingBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClossingBalanceNull()
            Me(Me.tablesp_DayBook.ClossingBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntryFromNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.EntryFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntryFromNull()
            Me(Me.tablesp_DayBook.EntryFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumwordNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.numwordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumwordNull()
            Me(Me.tablesp_DayBook.numwordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.VoucherCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherCodeNull()
            Me(Me.tablesp_DayBook.VoucherCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tablesp_DayBook.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspageNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.pageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpageNull()
            Me(Me.tablesp_DayBook.pageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreceiptNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.receiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreceiptNull()
            Me(Me.tablesp_DayBook.receiptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRptAdjsNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.RptAdjsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRptAdjsNull()
            Me(Me.tablesp_DayBook.RptAdjsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPytAdjsNull() As Boolean
            Return Me.IsNull(Me.tablesp_DayBook.PytAdjsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPytAdjsNull()
            Me(Me.tablesp_DayBook.PytAdjsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_TDClossing_GetAllRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_TDClossing_GetAll As sp_TDClossing_GetAllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_TDClossing_GetAll = CType(Me.Table,sp_TDClossing_GetAllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDClossingCode() As Integer
            Get
                Return CType(Me(Me.tablesp_TDClossing_GetAll.TDClossingCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.TDClossingCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDClossingDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.TDClossingDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDClossingDate' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.TDClossingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_TDClossing_GetAll.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OpeningAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.OpeningAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OpeningAmt' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.OpeningAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDCollection() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.TDCollectionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDCollection' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.TDCollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntonOpening() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.IntonOpeningColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IntonOpening' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.IntonOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntonCollection() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.IntonCollectionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IntonCollection' in table 'sp_TDClossing_GetAll' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.IntonCollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPayment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.TotalPaymentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalPayment' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.TotalPaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.NumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.EmployeeNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeNumber' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOpening() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.TDOpeningColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDOpening' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.TDOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.MemberNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.MemberNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.StatusColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.ROIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROI' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.ROIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherReceipt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDClossing_GetAll.OtherReceiptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherReceipt' in table 'sp_TDClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDClossing_GetAll.OtherReceiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDClossingDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.TDClossingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDClossingDateNull()
            Me(Me.tablesp_TDClossing_GetAll.TDClossingDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpeningAmtNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.OpeningAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpeningAmtNull()
            Me(Me.tablesp_TDClossing_GetAll.OpeningAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDCollectionNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.TDCollectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDCollectionNull()
            Me(Me.tablesp_TDClossing_GetAll.TDCollectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntonOpeningNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.IntonOpeningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntonOpeningNull()
            Me(Me.tablesp_TDClossing_GetAll.IntonOpeningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntonCollectionNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.IntonCollectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntonCollectionNull()
            Me(Me.tablesp_TDClossing_GetAll.IntonCollectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPaymentNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.TotalPaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPaymentNull()
            Me(Me.tablesp_TDClossing_GetAll.TotalPaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me.tablesp_TDClossing_GetAll.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.EmployeeNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNumberNull()
            Me(Me.tablesp_TDClossing_GetAll.EmployeeNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDOpeningNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.TDOpeningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDOpeningNull()
            Me(Me.tablesp_TDClossing_GetAll.TDOpeningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.MemberNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberNameNull()
            Me(Me.tablesp_TDClossing_GetAll.MemberNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tablesp_TDClossing_GetAll.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROINull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.ROIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROINull()
            Me(Me.tablesp_TDClossing_GetAll.ROIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherReceiptNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDClossing_GetAll.OtherReceiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherReceiptNull()
            Me(Me.tablesp_TDClossing_GetAll.OtherReceiptColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_TDRefund_GetAllRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_TDRefund_GetAll As sp_TDRefund_GetAllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_TDRefund_GetAll = CType(Me.Table,sp_TDRefund_GetAllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefundCode() As Integer
            Get
                Return CType(Me(Me.tablesp_TDRefund_GetAll.RefundCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.RefundCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefundDate() As Date
            Get
                Return CType(Me(Me.tablesp_TDRefund_GetAll.RefundDateColumn),Date)
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.RefundDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_TDRefund_GetAll.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OpeningAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDRefund_GetAll.OpeningAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OpeningAmt' in table 'sp_TDRefund_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.OpeningAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDCollection() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDRefund_GetAll.TDCollectionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDCollection' in table 'sp_TDRefund_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.TDCollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDRefund_GetAll.NumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'sp_TDRefund_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDRefund_GetAll.EmployeeNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeNumber' in table 'sp_TDRefund_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOpening() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDRefund_GetAll.TDOpeningColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDOpening' in table 'sp_TDRefund_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.TDOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDRefund_GetAll.MemberNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName' in table 'sp_TDRefund_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.MemberNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDRefund_GetAll.StatusColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'sp_TDRefund_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefundAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TDRefund_GetAll.RefundAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefundAmount' in table 'sp_TDRefund_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TDRefund_GetAll.RefundAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpeningAmtNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDRefund_GetAll.OpeningAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpeningAmtNull()
            Me(Me.tablesp_TDRefund_GetAll.OpeningAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDCollectionNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDRefund_GetAll.TDCollectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDCollectionNull()
            Me(Me.tablesp_TDRefund_GetAll.TDCollectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDRefund_GetAll.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me.tablesp_TDRefund_GetAll.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDRefund_GetAll.EmployeeNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNumberNull()
            Me(Me.tablesp_TDRefund_GetAll.EmployeeNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDOpeningNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDRefund_GetAll.TDOpeningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDOpeningNull()
            Me(Me.tablesp_TDRefund_GetAll.TDOpeningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDRefund_GetAll.MemberNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberNameNull()
            Me(Me.tablesp_TDRefund_GetAll.MemberNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDRefund_GetAll.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tablesp_TDRefund_GetAll.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefundAmountNull() As Boolean
            Return Me.IsNull(Me.tablesp_TDRefund_GetAll.RefundAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefundAmountNull()
            Me(Me.tablesp_TDRefund_GetAll.RefundAmountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_TrailBalanceRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_TrailBalance As sp_TrailBalanceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_TrailBalance = CType(Me.Table,sp_TrailBalanceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orderno() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.OrdernoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Orderno' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.OrdernoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupCode() As Integer
            Get
                Return CType(Me(Me.tablesp_TrailBalance.GroupCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_TrailBalance.GroupCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.GroupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupName' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.GroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property opnDebit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.opnDebitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'opnDebit' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.opnDebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property opnCredit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.opnCreditColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'opnCredit' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.opnCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VDebit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.VDebitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VDebit' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.VDebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VCredit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.VCreditColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VCredit' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.VCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDebit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.CDebitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CDebit' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.CDebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCredit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.CCreditColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCredit' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.CCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FromDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.FromDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FromDate' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.FromDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Todate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_TrailBalance.TodateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Todate' in table 'sp_TrailBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TrailBalance.TodateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadCode() As Integer
            Get
                Return CType(Me(Me.tablesp_TrailBalance.HeadCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_TrailBalance.HeadCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HeadName() As String
            Get
                Return CType(Me(Me.tablesp_TrailBalance.HeadNameColumn),String)
            End Get
            Set
                Me(Me.tablesp_TrailBalance.HeadNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdernoNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.OrdernoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdernoNull()
            Me(Me.tablesp_TrailBalance.OrdernoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.GroupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupNameNull()
            Me(Me.tablesp_TrailBalance.GroupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsopnDebitNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.opnDebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetopnDebitNull()
            Me(Me.tablesp_TrailBalance.opnDebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsopnCreditNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.opnCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetopnCreditNull()
            Me(Me.tablesp_TrailBalance.opnCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVDebitNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.VDebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVDebitNull()
            Me(Me.tablesp_TrailBalance.VDebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVCreditNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.VCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVCreditNull()
            Me(Me.tablesp_TrailBalance.VCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDebitNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.CDebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDebitNull()
            Me(Me.tablesp_TrailBalance.CDebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCreditNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.CCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCreditNull()
            Me(Me.tablesp_TrailBalance.CCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFromDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.FromDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFromDateNull()
            Me(Me.tablesp_TrailBalance.FromDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTodateNull() As Boolean
            Return Me.IsNull(Me.tablesp_TrailBalance.TodateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTodateNull()
            Me(Me.tablesp_TrailBalance.TodateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_ShareCollection_rptRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_ShareCollection_rpt As sp_ShareCollection_rptDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_ShareCollection_rpt = CType(Me.Table,sp_ShareCollection_rptDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property companycode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.companycodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'companycode' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.companycodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowNo() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.RowNoColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowNo' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.RowNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_ShareCollection_rpt.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Return CType(Me(Me.tablesp_ShareCollection_rpt.EmployeeNumberColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Membername() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.MembernameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Membername' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.MembernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Return CType(Me(Me.tablesp_ShareCollection_rpt.NumberColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOpening() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.TDOpeningColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDOpening' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.TDOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APril() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.APrilColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APril' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.APrilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property May() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.MayColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'May' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.MayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property June() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.JuneColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'June' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.JuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property July() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.JulyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'July' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.JulyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property August() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.AugustColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'August' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.AugustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property September() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.SeptemberColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'September' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.SeptemberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property October() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.OctoberColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'October' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.OctoberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property November() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.NovemberColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'November' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.NovemberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property December() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.DecemberColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'December' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.DecemberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property January() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.JanuaryColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'January' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.JanuaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property February() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.FebruaryColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'February' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.FebruaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property March() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.MarchColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'March' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.MarchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCollection() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.TotalCollectionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalCollection' in table 'sp_ShareCollection_rpt' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.TotalCollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property intonopening() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.intonopeningColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'intonopening' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.intonopeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property intoncollection() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.intoncollectionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'intoncollection' in table 'sp_ShareCollection_rpt' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.intoncollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property insurance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.insuranceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'insurance' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.insuranceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClossingBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.ClossingBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClossingBalance' in table 'sp_ShareCollection_rpt' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.ClossingBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property payment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareCollection_rpt.paymentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'payment' in table 'sp_ShareCollection_rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareCollection_rpt.paymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscompanycodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.companycodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcompanycodeNull()
            Me(Me.tablesp_ShareCollection_rpt.companycodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.RowNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowNoNull()
            Me(Me.tablesp_ShareCollection_rpt.RowNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMembernameNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.MembernameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMembernameNull()
            Me(Me.tablesp_ShareCollection_rpt.MembernameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDOpeningNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.TDOpeningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDOpeningNull()
            Me(Me.tablesp_ShareCollection_rpt.TDOpeningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPrilNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.APrilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPrilNull()
            Me(Me.tablesp_ShareCollection_rpt.APrilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMayNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.MayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMayNull()
            Me(Me.tablesp_ShareCollection_rpt.MayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJuneNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.JuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJuneNull()
            Me(Me.tablesp_ShareCollection_rpt.JuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJulyNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.JulyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJulyNull()
            Me(Me.tablesp_ShareCollection_rpt.JulyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAugustNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.AugustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAugustNull()
            Me(Me.tablesp_ShareCollection_rpt.AugustColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeptemberNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.SeptemberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeptemberNull()
            Me(Me.tablesp_ShareCollection_rpt.SeptemberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOctoberNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.OctoberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOctoberNull()
            Me(Me.tablesp_ShareCollection_rpt.OctoberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNovemberNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.NovemberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNovemberNull()
            Me(Me.tablesp_ShareCollection_rpt.NovemberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDecemberNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.DecemberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDecemberNull()
            Me(Me.tablesp_ShareCollection_rpt.DecemberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJanuaryNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.JanuaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJanuaryNull()
            Me(Me.tablesp_ShareCollection_rpt.JanuaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFebruaryNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.FebruaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFebruaryNull()
            Me(Me.tablesp_ShareCollection_rpt.FebruaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarchNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.MarchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarchNull()
            Me(Me.tablesp_ShareCollection_rpt.MarchColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCollectionNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.TotalCollectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCollectionNull()
            Me(Me.tablesp_ShareCollection_rpt.TotalCollectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsintonopeningNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.intonopeningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetintonopeningNull()
            Me(Me.tablesp_ShareCollection_rpt.intonopeningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsintoncollectionNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.intoncollectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetintoncollectionNull()
            Me(Me.tablesp_ShareCollection_rpt.intoncollectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinsuranceNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.insuranceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinsuranceNull()
            Me(Me.tablesp_ShareCollection_rpt.insuranceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClossingBalanceNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.ClossingBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClossingBalanceNull()
            Me(Me.tablesp_ShareCollection_rpt.ClossingBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspaymentNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareCollection_rpt.paymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpaymentNull()
            Me(Me.tablesp_ShareCollection_rpt.paymentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_ShareClossing_GetAllRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_ShareClossing_GetAll As sp_ShareClossing_GetAllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_ShareClossing_GetAll = CType(Me.Table,sp_ShareClossing_GetAllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareClossingCode() As Integer
            Get
                Return CType(Me(Me.tablesp_ShareClossing_GetAll.ShareClossingCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.ShareClossingCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareClossingDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.ShareClossingDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShareClossingDate' in table 'sp_ShareClossing_GetAll' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.ShareClossingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_ShareClossing_GetAll.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OpeningAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.OpeningAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OpeningAmt' in table 'sp_ShareClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.OpeningAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDCollection() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.TDCollectionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDCollection' in table 'sp_ShareClossing_GetAll' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.TDCollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntonOpening() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.IntonOpeningColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IntonOpening' in table 'sp_ShareClossing_GetAll' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.IntonOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntonCollection() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.IntonCollectionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IntonCollection' in table 'sp_ShareClossing_GetAll' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.IntonCollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPayment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.TotalPaymentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalPayment' in table 'sp_ShareClossing_GetAll' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.TotalPaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.NumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'sp_ShareClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.EmployeeNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeNumber' in table 'sp_ShareClossing_GetAll' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOpening() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.TDOpeningColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDOpening' in table 'sp_ShareClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.TDOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.MemberNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName' in table 'sp_ShareClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.MemberNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.StatusColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'sp_ShareClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareClossing_GetAll.ROIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROI' in table 'sp_ShareClossing_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareClossing_GetAll.ROIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShareClossingDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.ShareClossingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShareClossingDateNull()
            Me(Me.tablesp_ShareClossing_GetAll.ShareClossingDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpeningAmtNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.OpeningAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpeningAmtNull()
            Me(Me.tablesp_ShareClossing_GetAll.OpeningAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDCollectionNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.TDCollectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDCollectionNull()
            Me(Me.tablesp_ShareClossing_GetAll.TDCollectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntonOpeningNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.IntonOpeningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntonOpeningNull()
            Me(Me.tablesp_ShareClossing_GetAll.IntonOpeningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntonCollectionNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.IntonCollectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntonCollectionNull()
            Me(Me.tablesp_ShareClossing_GetAll.IntonCollectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPaymentNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.TotalPaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPaymentNull()
            Me(Me.tablesp_ShareClossing_GetAll.TotalPaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me.tablesp_ShareClossing_GetAll.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.EmployeeNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNumberNull()
            Me(Me.tablesp_ShareClossing_GetAll.EmployeeNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDOpeningNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.TDOpeningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDOpeningNull()
            Me(Me.tablesp_ShareClossing_GetAll.TDOpeningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.MemberNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberNameNull()
            Me(Me.tablesp_ShareClossing_GetAll.MemberNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tablesp_ShareClossing_GetAll.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROINull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareClossing_GetAll.ROIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROINull()
            Me(Me.tablesp_ShareClossing_GetAll.ROIColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_MemberLoan_RptGetallRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_MemberLoan_RptGetall As sp_MemberLoan_RptGetallDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_MemberLoan_RptGetall = CType(Me.Table,sp_MemberLoan_RptGetallDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanCode() As Integer
            Get
                Return CType(Me(Me.tablesp_MemberLoan_RptGetall.LoanCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.LoanCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_MemberLoan_RptGetall.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.NumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'sp_MemberLoan_RptGetall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.EmployeeNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeNumber' in table 'sp_MemberLoan_RptGetall' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.MemberNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName' in table 'sp_MemberLoan_RptGetall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.MemberNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName_Tamil() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.MemberName_TamilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName_Tamil' in table 'sp_MemberLoan_RptGetall' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.MemberName_TamilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberType() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.MemberTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberType' in table 'sp_MemberLoan_RptGetall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.MemberTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanNamecode() As Integer
            Get
                Return CType(Me(Me.tablesp_MemberLoan_RptGetall.LoanNamecodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.LoanNamecodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.LoanNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanName' in table 'sp_MemberLoan_RptGetall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.LoanNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanNumber() As String
            Get
                Return CType(Me(Me.tablesp_MemberLoan_RptGetall.LoanNumberColumn),String)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.LoanNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StrLoanNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.StrLoanNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StrLoanNumber' in table 'sp_MemberLoan_RptGetall' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.StrLoanNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanDate() As Date
            Get
                Return CType(Me(Me.tablesp_MemberLoan_RptGetall.LoanDateColumn),Date)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.LoanDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROI() As Decimal
            Get
                Return CType(Me(Me.tablesp_MemberLoan_RptGetall.ROIColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.ROIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanAmount() As Decimal
            Get
                Return CType(Me(Me.tablesp_MemberLoan_RptGetall.LoanAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.LoanAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanPeriod() As Integer
            Get
                Return CType(Me(Me.tablesp_MemberLoan_RptGetall.LoanPeriodColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.LoanPeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.LastPaidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaidDate' in table 'sp_MemberLoan_RptGetall' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.LastPaidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Emi_Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.Emi_AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Emi_Amount' in table 'sp_MemberLoan_RptGetall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.Emi_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paymode() As Integer
            Get
                Return CType(Me(Me.tablesp_MemberLoan_RptGetall.paymodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.paymodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanOutStanding() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.LoanOutStandingColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanOutStanding' in table 'sp_MemberLoan_RptGetall' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.LoanOutStandingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Principal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.PrincipalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal' in table 'sp_MemberLoan_RptGetall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.PrincipalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ODPrincipal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.ODPrincipalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ODPrincipal' in table 'sp_MemberLoan_RptGetall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.ODPrincipalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Interest() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.InterestColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Interest' in table 'sp_MemberLoan_RptGetall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.InterestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ODInterest() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_RptGetall.ODInterestColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ODInterest' in table 'sp_MemberLoan_RptGetall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_RptGetall.ODInterestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me.tablesp_MemberLoan_RptGetall.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.EmployeeNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNumberNull()
            Me(Me.tablesp_MemberLoan_RptGetall.EmployeeNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.MemberNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberNameNull()
            Me(Me.tablesp_MemberLoan_RptGetall.MemberNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberName_TamilNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.MemberName_TamilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberName_TamilNull()
            Me(Me.tablesp_MemberLoan_RptGetall.MemberName_TamilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberTypeNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.MemberTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberTypeNull()
            Me(Me.tablesp_MemberLoan_RptGetall.MemberTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.LoanNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanNameNull()
            Me(Me.tablesp_MemberLoan_RptGetall.LoanNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStrLoanNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.StrLoanNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStrLoanNumberNull()
            Me(Me.tablesp_MemberLoan_RptGetall.StrLoanNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.LastPaidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidDateNull()
            Me(Me.tablesp_MemberLoan_RptGetall.LastPaidDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmi_AmountNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.Emi_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmi_AmountNull()
            Me(Me.tablesp_MemberLoan_RptGetall.Emi_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanOutStandingNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.LoanOutStandingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanOutStandingNull()
            Me(Me.tablesp_MemberLoan_RptGetall.LoanOutStandingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrincipalNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.PrincipalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrincipalNull()
            Me(Me.tablesp_MemberLoan_RptGetall.PrincipalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsODPrincipalNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.ODPrincipalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetODPrincipalNull()
            Me(Me.tablesp_MemberLoan_RptGetall.ODPrincipalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInterestNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.InterestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInterestNull()
            Me(Me.tablesp_MemberLoan_RptGetall.InterestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsODInterestNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_RptGetall.ODInterestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetODInterestNull()
            Me(Me.tablesp_MemberLoan_RptGetall.ODInterestColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_ShareDivident_GetAllRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_ShareDivident_GetAll As sp_ShareDivident_GetAllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_ShareDivident_GetAll = CType(Me.Table,sp_ShareDivident_GetAllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareDividentCode() As Integer
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.ShareDividentCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.ShareDividentCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDFromDate() As Date
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.TDFromDateColumn),Date)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.TDFromDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDToDate() As Date
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.TDToDateColumn),Date)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.TDToDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OpeningAmount() As Decimal
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.OpeningAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.OpeningAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDCollection() As Decimal
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.TDCollectionColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.TDCollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntOnOpening() As Decimal
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.IntOnOpeningColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.IntOnOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntonCollection() As Decimal
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.IntonCollectionColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.IntonCollectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPayment() As Decimal
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.TotalPaymentColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.TotalPaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NettTotal() As Decimal
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.NettTotalColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.NettTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROI() As Decimal
            Get
                Return CType(Me(Me.tablesp_ShareDivident_GetAll.ROIColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.ROIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareDivident_GetAll.NumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'sp_ShareDivident_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareDivident_GetAll.EmployeeNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeNumber' in table 'sp_ShareDivident_GetAll' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName_Tamil() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareDivident_GetAll.MemberName_TamilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName_Tamil' in table 'sp_ShareDivident_GetAll' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.MemberName_TamilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareOpening() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareDivident_GetAll.ShareOpeningColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShareOpening' in table 'sp_ShareDivident_GetAll' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.ShareOpeningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareDivident_GetAll.MemberNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName' in table 'sp_ShareDivident_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.MemberNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareClossingDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_ShareDivident_GetAll.ShareClossingDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShareClossingDate' in table 'sp_ShareDivident_GetAll' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ShareDivident_GetAll.ShareClossingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareDivident_GetAll.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me.tablesp_ShareDivident_GetAll.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareDivident_GetAll.EmployeeNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNumberNull()
            Me(Me.tablesp_ShareDivident_GetAll.EmployeeNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberName_TamilNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareDivident_GetAll.MemberName_TamilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberName_TamilNull()
            Me(Me.tablesp_ShareDivident_GetAll.MemberName_TamilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShareOpeningNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareDivident_GetAll.ShareOpeningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShareOpeningNull()
            Me(Me.tablesp_ShareDivident_GetAll.ShareOpeningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareDivident_GetAll.MemberNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberNameNull()
            Me(Me.tablesp_ShareDivident_GetAll.MemberNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShareClossingDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_ShareDivident_GetAll.ShareClossingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShareClossingDateNull()
            Me(Me.tablesp_ShareDivident_GetAll.ShareClossingDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_PassBookRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_PassBook As sp_PassBookDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_PassBook = CType(Me.Table,sp_PassBookDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CollectionDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.CollectionDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CollectionDate' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.CollectionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Particulars() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.ParticularsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Particulars' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.ParticularsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Principle() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.PrincipleColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principle' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.PrincipleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Int() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.IntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Int' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.IntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bal_OS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.Bal_OSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bal_OS' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.Bal_OSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.LoanCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanCode' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.LoanCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.MemberCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberCode' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.ROIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROI' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.ROIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PageNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.PageNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PageNo' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.PageNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.LNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LNo' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.LNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sno() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_PassBook.snoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sno' in table 'sp_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_PassBook.snoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCollectionDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.CollectionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCollectionDateNull()
            Me(Me.tablesp_PassBook.CollectionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParticularsNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.ParticularsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParticularsNull()
            Me(Me.tablesp_PassBook.ParticularsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrincipleNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.PrincipleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrincipleNull()
            Me(Me.tablesp_PassBook.PrincipleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.IntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntNull()
            Me(Me.tablesp_PassBook.IntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBal_OSNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.Bal_OSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBal_OSNull()
            Me(Me.tablesp_PassBook.Bal_OSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.LoanCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanCodeNull()
            Me(Me.tablesp_PassBook.LoanCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.MemberCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberCodeNull()
            Me(Me.tablesp_PassBook.MemberCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROINull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.ROIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROINull()
            Me(Me.tablesp_PassBook.ROIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.PageNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPageNoNull()
            Me(Me.tablesp_PassBook.PageNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.LNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLNoNull()
            Me(Me.tablesp_PassBook.LNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssnoNull() As Boolean
            Return Me.IsNull(Me.tablesp_PassBook.snoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsnoNull()
            Me(Me.tablesp_PassBook.snoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_MemberLoan_GetAllRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_MemberLoan_GetAll As sp_MemberLoan_GetAllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_MemberLoan_GetAll = CType(Me.Table,sp_MemberLoan_GetAllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanCode() As Integer
            Get
                Return CType(Me(Me.tablesp_MemberLoan_GetAll.LoanCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LoanCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_MemberLoan_GetAll.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.NumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.EmployeeNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeNumber' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.MemberNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.MemberNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName_Tamil() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.MemberName_TamilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName_Tamil' in table 'sp_MemberLoan_GetAll' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.MemberName_TamilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberType() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.MemberTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberType' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.MemberTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanNamecode() As Integer
            Get
                Return CType(Me(Me.tablesp_MemberLoan_GetAll.LoanNamecodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LoanNamecodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.LoanNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanName' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LoanNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanNumber() As String
            Get
                Return CType(Me(Me.tablesp_MemberLoan_GetAll.LoanNumberColumn),String)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LoanNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StrLoanNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.StrLoanNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StrLoanNumber' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.StrLoanNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanDate() As Date
            Get
                Return CType(Me(Me.tablesp_MemberLoan_GetAll.LoanDateColumn),Date)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LoanDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROI() As Decimal
            Get
                Return CType(Me(Me.tablesp_MemberLoan_GetAll.ROIColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.ROIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanAmount() As Decimal
            Get
                Return CType(Me(Me.tablesp_MemberLoan_GetAll.LoanAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LoanAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanPeriod() As Integer
            Get
                Return CType(Me(Me.tablesp_MemberLoan_GetAll.LoanPeriodColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LoanPeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastPaidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.LastPaidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastPaidDate' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LastPaidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Emi_Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.Emi_AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Emi_Amount' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.Emi_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paymode() As Integer
            Get
                Return CType(Me(Me.tablesp_MemberLoan_GetAll.paymodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.paymodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanOutstanding() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.LoanOutstandingColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanOutstanding' in table 'sp_MemberLoan_GetAll' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LoanOutstandingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Principal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.PrincipalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principal' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.PrincipalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ODPrincipal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.ODPrincipalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ODPrincipal' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.ODPrincipalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Interest() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.InterestColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Interest' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.InterestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ODInterest() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.ODInterestColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ODInterest' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.ODInterestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaturityDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.MaturityDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaturityDate' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanClossedStatus() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.LoanClossedStatusColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanClossedStatus' in table 'sp_MemberLoan_GetAll' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.LoanClossedStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Demand() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.DemandColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Demand' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DemandType() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_MemberLoan_GetAll.DemandTypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DemandType' in table 'sp_MemberLoan_GetAll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_MemberLoan_GetAll.DemandTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me.tablesp_MemberLoan_GetAll.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.EmployeeNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNumberNull()
            Me(Me.tablesp_MemberLoan_GetAll.EmployeeNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.MemberNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberNameNull()
            Me(Me.tablesp_MemberLoan_GetAll.MemberNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberName_TamilNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.MemberName_TamilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberName_TamilNull()
            Me(Me.tablesp_MemberLoan_GetAll.MemberName_TamilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberTypeNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.MemberTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberTypeNull()
            Me(Me.tablesp_MemberLoan_GetAll.MemberTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.LoanNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanNameNull()
            Me(Me.tablesp_MemberLoan_GetAll.LoanNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStrLoanNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.StrLoanNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStrLoanNumberNull()
            Me(Me.tablesp_MemberLoan_GetAll.StrLoanNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastPaidDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.LastPaidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastPaidDateNull()
            Me(Me.tablesp_MemberLoan_GetAll.LastPaidDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmi_AmountNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.Emi_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmi_AmountNull()
            Me(Me.tablesp_MemberLoan_GetAll.Emi_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanOutstandingNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.LoanOutstandingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanOutstandingNull()
            Me(Me.tablesp_MemberLoan_GetAll.LoanOutstandingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrincipalNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.PrincipalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrincipalNull()
            Me(Me.tablesp_MemberLoan_GetAll.PrincipalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsODPrincipalNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.ODPrincipalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetODPrincipalNull()
            Me(Me.tablesp_MemberLoan_GetAll.ODPrincipalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInterestNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.InterestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInterestNull()
            Me(Me.tablesp_MemberLoan_GetAll.InterestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsODInterestNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.ODInterestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetODInterestNull()
            Me(Me.tablesp_MemberLoan_GetAll.ODInterestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaturityDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.MaturityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaturityDateNull()
            Me(Me.tablesp_MemberLoan_GetAll.MaturityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanClossedStatusNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.LoanClossedStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanClossedStatusNull()
            Me(Me.tablesp_MemberLoan_GetAll.LoanClossedStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemandNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemandNull()
            Me(Me.tablesp_MemberLoan_GetAll.DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemandTypeNull() As Boolean
            Return Me.IsNull(Me.tablesp_MemberLoan_GetAll.DemandTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemandTypeNull()
            Me(Me.tablesp_MemberLoan_GetAll.DemandTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_LoanDemandRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_LoanDemand As sp_LoanDemandDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_LoanDemand = CType(Me.Table,sp_LoanDemandDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.EmployeeNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeNumber' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.MemberCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberCode' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.MemberNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.MemberNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.numberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'number' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.numberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property membertype() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.membertypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'membertype' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.membertypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FDBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.FDBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FDBAL' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.FDBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FDPRN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.FDPRNColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FDPRN' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.FDPRNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FDINT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.FDINTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FDINT' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.FDINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JLBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.JLBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JLBAL' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.JLBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JLPRN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.JLPRNColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JLPRN' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.JLPRNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JLINT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.JLINTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JLINT' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.JLINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LDBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.LDBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LDBAL' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.LDBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LDPRN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.LDPRNColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LDPRN' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.LDPRNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LDINT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.LDINTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LDINT' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.LDINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.TotalBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalBalance' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.TotalBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDemand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.TotalDemandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalDemand' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.TotalDemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FromDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.FromDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FromDate' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.FromDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.ToDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToDate' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.ToDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanNameCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.LoanNameCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanNameCode' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.LoanNameCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.LoanNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanName' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.LoanNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DemandType() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_LoanDemand.DemandTypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DemandType' in table 'sp_LoanDemand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_LoanDemand.DemandTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.EmployeeNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNumberNull()
            Me(Me.tablesp_LoanDemand.EmployeeNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.MemberCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberCodeNull()
            Me(Me.tablesp_LoanDemand.MemberCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.MemberNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberNameNull()
            Me(Me.tablesp_LoanDemand.MemberNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.numberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumberNull()
            Me(Me.tablesp_LoanDemand.numberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmembertypeNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.membertypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmembertypeNull()
            Me(Me.tablesp_LoanDemand.membertypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFDBALNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.FDBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFDBALNull()
            Me(Me.tablesp_LoanDemand.FDBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFDPRNNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.FDPRNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFDPRNNull()
            Me(Me.tablesp_LoanDemand.FDPRNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFDINTNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.FDINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFDINTNull()
            Me(Me.tablesp_LoanDemand.FDINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJLBALNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.JLBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJLBALNull()
            Me(Me.tablesp_LoanDemand.JLBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJLPRNNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.JLPRNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJLPRNNull()
            Me(Me.tablesp_LoanDemand.JLPRNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJLINTNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.JLINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJLINTNull()
            Me(Me.tablesp_LoanDemand.JLINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLDBALNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.LDBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLDBALNull()
            Me(Me.tablesp_LoanDemand.LDBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLDPRNNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.LDPRNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLDPRNNull()
            Me(Me.tablesp_LoanDemand.LDPRNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLDINTNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.LDINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLDINTNull()
            Me(Me.tablesp_LoanDemand.LDINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalBalanceNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.TotalBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalBalanceNull()
            Me(Me.tablesp_LoanDemand.TotalBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalDemandNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.TotalDemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalDemandNull()
            Me(Me.tablesp_LoanDemand.TotalDemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFromDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.FromDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFromDateNull()
            Me(Me.tablesp_LoanDemand.FromDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.ToDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToDateNull()
            Me(Me.tablesp_LoanDemand.ToDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanNameCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.LoanNameCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanNameCodeNull()
            Me(Me.tablesp_LoanDemand.LoanNameCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.LoanNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanNameNull()
            Me(Me.tablesp_LoanDemand.LoanNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemandTypeNull() As Boolean
            Return Me.IsNull(Me.tablesp_LoanDemand.DemandTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemandTypeNull()
            Me(Me.tablesp_LoanDemand.DemandTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_TD_PassBookRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_TD_PassBook As sp_TD_PassBookDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_TD_PassBook = CType(Me.Table,sp_TD_PassBookDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDPassBookCode() As Decimal
            Get
                Return CType(Me(Me.tablesp_TD_PassBook.TDPassBookCodeColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.TDPassBookCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDDepositDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.TDDepositDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDDepositDate' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.TDDepositDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Return CType(Me(Me.tablesp_TD_PassBook.MemberCodeColumn),Long)
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOpeningCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.TDOpeningCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDOpeningCode' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.TDOpeningCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDDepositCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.TDDepositCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDDepositCode' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.TDDepositCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDInterestCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.TDInterestCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDInterestCode' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.TDInterestCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDClosingCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.TDClosingCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDClosingCode' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.TDClosingCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Particular() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.ParticularColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Particular' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.ParticularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deposit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.DepositColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deposit' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.DepositColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Interest() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.InterestColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Interest' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.InterestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Insurance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.InsuranceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Insurance' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.InsuranceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Payment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.PaymentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Payment' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.PaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Balance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.BalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Balance' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.BalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Printed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.PrintedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Printed' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.PrintedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PageNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.PageNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PageNumber' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.PageNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.LineNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineNumber' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.LineNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rpt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.RptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rpt' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.RptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pyt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_TD_PassBook.PytColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pyt' in table 'sp_TD_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_TD_PassBook.PytColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDDepositDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.TDDepositDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDDepositDateNull()
            Me(Me.tablesp_TD_PassBook.TDDepositDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDOpeningCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.TDOpeningCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDOpeningCodeNull()
            Me(Me.tablesp_TD_PassBook.TDOpeningCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDDepositCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.TDDepositCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDDepositCodeNull()
            Me(Me.tablesp_TD_PassBook.TDDepositCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDInterestCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.TDInterestCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDInterestCodeNull()
            Me(Me.tablesp_TD_PassBook.TDInterestCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDClosingCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.TDClosingCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDClosingCodeNull()
            Me(Me.tablesp_TD_PassBook.TDClosingCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParticularNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.ParticularColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParticularNull()
            Me(Me.tablesp_TD_PassBook.ParticularColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepositNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.DepositColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepositNull()
            Me(Me.tablesp_TD_PassBook.DepositColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInterestNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.InterestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInterestNull()
            Me(Me.tablesp_TD_PassBook.InterestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsuranceNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.InsuranceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsuranceNull()
            Me(Me.tablesp_TD_PassBook.InsuranceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.PaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentNull()
            Me(Me.tablesp_TD_PassBook.PaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBalanceNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.BalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBalanceNull()
            Me(Me.tablesp_TD_PassBook.BalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintedNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.PrintedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintedNull()
            Me(Me.tablesp_TD_PassBook.PrintedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPageNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.PageNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPageNumberNull()
            Me(Me.tablesp_TD_PassBook.PageNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.LineNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineNumberNull()
            Me(Me.tablesp_TD_PassBook.LineNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRptNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.RptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRptNull()
            Me(Me.tablesp_TD_PassBook.RptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPytNull() As Boolean
            Return Me.IsNull(Me.tablesp_TD_PassBook.PytColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPytNull()
            Me(Me.tablesp_TD_PassBook.PytColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_Share_PassBookRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_Share_PassBook As sp_Share_PassBookDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_Share_PassBook = CType(Me.Table,sp_Share_PassBookDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SharePassBookCode() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.SharePassBookCodeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SharePassBookCode' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.SharePassBookCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareDepositDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.ShareDepositDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShareDepositDate' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.ShareDepositDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.MemberCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberCode' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareOpeningCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.ShareOpeningCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShareOpeningCode' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.ShareOpeningCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareDepositCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.ShareDepositCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShareDepositCode' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.ShareDepositCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareDividentCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.ShareDividentCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShareDividentCode' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.ShareDividentCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShareClosingCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.ShareClosingCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShareClosingCode' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.ShareClosingCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Particular() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.ParticularColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Particular' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.ParticularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deposit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.DepositColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deposit' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.DepositColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Divident() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.DividentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Divident' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.DividentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Refund() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.RefundColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Refund' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.RefundColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Payment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.PaymentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Payment' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.PaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Balance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.BalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Balance' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.BalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Printed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.PrintedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Printed' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.PrintedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PageNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.PageNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PageNumber' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.PageNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.LineNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineNumber' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.LineNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rpt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.RptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rpt' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.RptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pyt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_Share_PassBook.PytColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pyt' in table 'sp_Share_PassBook' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Share_PassBook.PytColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSharePassBookCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.SharePassBookCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSharePassBookCodeNull()
            Me(Me.tablesp_Share_PassBook.SharePassBookCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShareDepositDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.ShareDepositDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShareDepositDateNull()
            Me(Me.tablesp_Share_PassBook.ShareDepositDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.MemberCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberCodeNull()
            Me(Me.tablesp_Share_PassBook.MemberCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShareOpeningCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.ShareOpeningCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShareOpeningCodeNull()
            Me(Me.tablesp_Share_PassBook.ShareOpeningCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShareDepositCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.ShareDepositCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShareDepositCodeNull()
            Me(Me.tablesp_Share_PassBook.ShareDepositCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShareDividentCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.ShareDividentCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShareDividentCodeNull()
            Me(Me.tablesp_Share_PassBook.ShareDividentCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShareClosingCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.ShareClosingCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShareClosingCodeNull()
            Me(Me.tablesp_Share_PassBook.ShareClosingCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParticularNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.ParticularColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParticularNull()
            Me(Me.tablesp_Share_PassBook.ParticularColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepositNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.DepositColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepositNull()
            Me(Me.tablesp_Share_PassBook.DepositColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDividentNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.DividentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDividentNull()
            Me(Me.tablesp_Share_PassBook.DividentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefundNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.RefundColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefundNull()
            Me(Me.tablesp_Share_PassBook.RefundColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.PaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentNull()
            Me(Me.tablesp_Share_PassBook.PaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBalanceNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.BalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBalanceNull()
            Me(Me.tablesp_Share_PassBook.BalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintedNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.PrintedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintedNull()
            Me(Me.tablesp_Share_PassBook.PrintedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPageNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.PageNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPageNumberNull()
            Me(Me.tablesp_Share_PassBook.PageNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.LineNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineNumberNull()
            Me(Me.tablesp_Share_PassBook.LineNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRptNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.RptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRptNull()
            Me(Me.tablesp_Share_PassBook.RptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPytNull() As Boolean
            Return Me.IsNull(Me.tablesp_Share_PassBook.PytColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPytNull()
            Me(Me.tablesp_Share_PassBook.PytColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_CollectionList_RptRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_CollectionList_Rpt As sp_CollectionList_RptDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_CollectionList_Rpt = CType(Me.Table,sp_CollectionList_RptDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DemandCode() As Integer
            Get
                Return CType(Me(Me.tablesp_CollectionList_Rpt.DemandCodeColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.DemandCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CollectionNo() As Integer
            Get
                Return CType(Me(Me.tablesp_CollectionList_Rpt.CollectionNoColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.CollectionNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CollectionDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.CollectionDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CollectionDate' in table 'sp_CollectionList_Rpt' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.CollectionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.MemberCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberCode' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.MemberCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanNamecode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.LoanNamecodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanNamecode' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.LoanNamecodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.LoanCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanCode' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.LoanCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mno() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.mnoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mno' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.mnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Yno() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.YnoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Yno' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.YnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TokenNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.TokenNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TokenNo' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.TokenNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.ROIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROI' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.ROIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Principle() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.PrincipleColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Principle' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.PrincipleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Int() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.IntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Int' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.IntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bal_OS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.Bal_OSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bal_OS' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.Bal_OSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Printed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.PrintedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Printed' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.PrintedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PageNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.PageNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PageNumber' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.PageNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.LineNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineNumber' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.LineNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Particulars() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.ParticularsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Particulars' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.ParticularsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModeofReceipt() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.ModeofReceiptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModeofReceipt' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.ModeofReceiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.NumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.EmployeeNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeNumber' in table 'sp_CollectionList_Rpt' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.EmployeeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.MemberNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.MemberNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberName_Tamil() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.MemberName_TamilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberName_Tamil' in table 'sp_CollectionList_Rpt' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.MemberName_TamilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberType() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.MemberTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MemberType' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.MemberTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.LoanNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanName' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.LoanNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.LoanNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanNumber' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.LoanNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StrLoanNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.StrLoanNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StrLoanNumber' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.StrLoanNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.LoanDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanDate' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.LoanDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.LoanAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanAmount' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.LoanAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanPeriod() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.LoanPeriodColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanPeriod' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.LoanPeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Emi_Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.Emi_AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Emi_Amount' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.Emi_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DemandType() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.DemandTypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DemandType' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.DemandTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Demand() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.DemandColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Demand' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEMANDTYPENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.DEMANDTYPENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEMANDTYPENAME' in table 'sp_CollectionList_Rpt' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.DEMANDTYPENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FromDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.FromDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FromDate' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.FromDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_CollectionList_Rpt.ToDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToDate' in table 'sp_CollectionList_Rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_CollectionList_Rpt.ToDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCollectionDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.CollectionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCollectionDateNull()
            Me(Me.tablesp_CollectionList_Rpt.CollectionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.MemberCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberCodeNull()
            Me(Me.tablesp_CollectionList_Rpt.MemberCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanNamecodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.LoanNamecodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanNamecodeNull()
            Me(Me.tablesp_CollectionList_Rpt.LoanNamecodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanCodeNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.LoanCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanCodeNull()
            Me(Me.tablesp_CollectionList_Rpt.LoanCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmnoNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.mnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmnoNull()
            Me(Me.tablesp_CollectionList_Rpt.mnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYnoNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.YnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYnoNull()
            Me(Me.tablesp_CollectionList_Rpt.YnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTokenNoNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.TokenNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTokenNoNull()
            Me(Me.tablesp_CollectionList_Rpt.TokenNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROINull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.ROIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROINull()
            Me(Me.tablesp_CollectionList_Rpt.ROIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrincipleNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.PrincipleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrincipleNull()
            Me(Me.tablesp_CollectionList_Rpt.PrincipleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.IntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntNull()
            Me(Me.tablesp_CollectionList_Rpt.IntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBal_OSNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.Bal_OSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBal_OSNull()
            Me(Me.tablesp_CollectionList_Rpt.Bal_OSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintedNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.PrintedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintedNull()
            Me(Me.tablesp_CollectionList_Rpt.PrintedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPageNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.PageNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPageNumberNull()
            Me(Me.tablesp_CollectionList_Rpt.PageNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.LineNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineNumberNull()
            Me(Me.tablesp_CollectionList_Rpt.LineNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParticularsNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.ParticularsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParticularsNull()
            Me(Me.tablesp_CollectionList_Rpt.ParticularsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeofReceiptNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.ModeofReceiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeofReceiptNull()
            Me(Me.tablesp_CollectionList_Rpt.ModeofReceiptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me.tablesp_CollectionList_Rpt.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.EmployeeNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNumberNull()
            Me(Me.tablesp_CollectionList_Rpt.EmployeeNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.MemberNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberNameNull()
            Me(Me.tablesp_CollectionList_Rpt.MemberNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberName_TamilNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.MemberName_TamilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberName_TamilNull()
            Me(Me.tablesp_CollectionList_Rpt.MemberName_TamilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemberTypeNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.MemberTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemberTypeNull()
            Me(Me.tablesp_CollectionList_Rpt.MemberTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanNameNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.LoanNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanNameNull()
            Me(Me.tablesp_CollectionList_Rpt.LoanNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.LoanNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanNumberNull()
            Me(Me.tablesp_CollectionList_Rpt.LoanNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStrLoanNumberNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.StrLoanNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStrLoanNumberNull()
            Me(Me.tablesp_CollectionList_Rpt.StrLoanNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.LoanDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanDateNull()
            Me(Me.tablesp_CollectionList_Rpt.LoanDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanAmountNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.LoanAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanAmountNull()
            Me(Me.tablesp_CollectionList_Rpt.LoanAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanPeriodNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.LoanPeriodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanPeriodNull()
            Me(Me.tablesp_CollectionList_Rpt.LoanPeriodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmi_AmountNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.Emi_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmi_AmountNull()
            Me(Me.tablesp_CollectionList_Rpt.Emi_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemandTypeNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.DemandTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemandTypeNull()
            Me(Me.tablesp_CollectionList_Rpt.DemandTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemandNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemandNull()
            Me(Me.tablesp_CollectionList_Rpt.DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEMANDTYPENAMENull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.DEMANDTYPENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEMANDTYPENAMENull()
            Me(Me.tablesp_CollectionList_Rpt.DEMANDTYPENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFromDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.FromDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFromDateNull()
            Me(Me.tablesp_CollectionList_Rpt.FromDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToDateNull() As Boolean
            Return Me.IsNull(Me.tablesp_CollectionList_Rpt.ToDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToDateNull()
            Me(Me.tablesp_CollectionList_Rpt.ToDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_Company_GetAllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_Company_GetAllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_Company_GetAllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_Company_GetAllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_DayBook_RptRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_DayBook_RptRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_DayBook_RptRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_DayBook_RptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_Group_GetAllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_Group_GetAllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_Group_GetAllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_Group_GetAllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_Head_GetAllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_Head_GetAllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_Head_GetAllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_Head_GetAllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_LedgerBookRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_LedgerBookRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_LedgerBookRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_LedgerBookRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_DayBook_FINALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_DayBook_FINALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_DayBook_FINALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_DayBook_FINALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_DayBook_PytRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_DayBook_PytRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_DayBook_PytRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_DayBook_PytRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_TDCollectionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_TDCollectionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_TDCollectionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_TDCollectionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_Member_GetAllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_Member_GetAllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_Member_GetAllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_Member_GetAllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_DayBookRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_DayBookRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_DayBookRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_DayBookRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_TDClossing_GetAllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_TDClossing_GetAllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_TDClossing_GetAllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_TDClossing_GetAllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_TDRefund_GetAllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_TDRefund_GetAllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_TDRefund_GetAllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_TDRefund_GetAllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_TrailBalanceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_TrailBalanceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_TrailBalanceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_TrailBalanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_ShareCollection_rptRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_ShareCollection_rptRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_ShareCollection_rptRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_ShareCollection_rptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_ShareClossing_GetAllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_ShareClossing_GetAllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_ShareClossing_GetAllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_ShareClossing_GetAllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_MemberLoan_RptGetallRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_MemberLoan_RptGetallRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_MemberLoan_RptGetallRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_MemberLoan_RptGetallRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_ShareDivident_GetAllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_ShareDivident_GetAllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_ShareDivident_GetAllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_ShareDivident_GetAllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_PassBookRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_PassBookRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_PassBookRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_PassBookRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_MemberLoan_GetAllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_MemberLoan_GetAllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_MemberLoan_GetAllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_MemberLoan_GetAllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_LoanDemandRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_LoanDemandRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_LoanDemandRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_LoanDemandRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_TD_PassBookRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_TD_PassBookRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_TD_PassBookRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_TD_PassBookRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_Share_PassBookRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_Share_PassBookRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_Share_PassBookRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_Share_PassBookRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_CollectionList_RptRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_CollectionList_RptRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_CollectionList_RptRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_CollectionList_RptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace LMWDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_Company_GetAllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_Company_GetAll"
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            tableMapping.ColumnMappings.Add("ShortName", "ShortName")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("District", "District")
            tableMapping.ColumnMappings.Add("PinCode", "PinCode")
            tableMapping.ColumnMappings.Add("Logo", "Logo")
            tableMapping.ColumnMappings.Add("PhoneNo", "PhoneNo")
            tableMapping.ColumnMappings.Add("MobileNo", "MobileNo")
            tableMapping.ColumnMappings.Add("Website", "Website")
            tableMapping.ColumnMappings.Add("EMail", "EMail")
            tableMapping.ColumnMappings.Add("TINNo", "TINNo")
            tableMapping.ColumnMappings.Add("CSTNo", "CSTNo")
            tableMapping.ColumnMappings.Add("StateCode", "StateCode")
            tableMapping.ColumnMappings.Add("InsuranceFlag", "InsuranceFlag")
            tableMapping.ColumnMappings.Add("TypingFont", "TypingFont")
            tableMapping.ColumnMappings.Add("subcentrecode", "subcentrecode")
            tableMapping.ColumnMappings.Add("SighningAuthority", "SighningAuthority")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rptDataSet
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Company_GetAll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CompanyCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_Company_GetAllDataTable, ByVal CompanyCode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CompanyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CompanyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CompanyCode As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_Company_GetAllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CompanyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CompanyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_Company_GetAllDataTable = New LMWDataSet.sp_Company_GetAllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_DayBook_RptTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_DayBook_Rpt"
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate")
            tableMapping.ColumnMappings.Add("RHeadName", "RHeadName")
            tableMapping.ColumnMappings.Add("RHead1", "RHead1")
            tableMapping.ColumnMappings.Add("RHead2", "RHead2")
            tableMapping.ColumnMappings.Add("RLtr", "RLtr")
            tableMapping.ColumnMappings.Add("RCash", "RCash")
            tableMapping.ColumnMappings.Add("RAdjustment", "RAdjustment")
            tableMapping.ColumnMappings.Add("RTotal", "RTotal")
            tableMapping.ColumnMappings.Add("Rp", "Rp")
            tableMapping.ColumnMappings.Add("page", "page")
            tableMapping.ColumnMappings.Add("receipt", "receipt")
            tableMapping.ColumnMappings.Add("HeadCode", "HeadCode")
            tableMapping.ColumnMappings.Add("GroupCode", "GroupCode")
            tableMapping.ColumnMappings.Add("EntryFrom", "EntryFrom")
            tableMapping.ColumnMappings.Add("VoucherCode", "VoucherCode")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rptDataSet
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_DayBook_Rpt"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_DayBook_RptDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As LMWDataSet.sp_DayBook_RptDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As LMWDataSet.sp_DayBook_RptDataTable = New LMWDataSet.sp_DayBook_RptDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_Group_GetAllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_Group_GetAll"
            tableMapping.ColumnMappings.Add("GroupCode", "GroupCode")
            tableMapping.ColumnMappings.Add("GroupName", "GroupName")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            tableMapping.ColumnMappings.Add("OnBalanceSheet", "OnBalanceSheet")
            tableMapping.ColumnMappings.Add("OnProfitLoss", "OnProfitLoss")
            tableMapping.ColumnMappings.Add("OnTrading", "OnTrading")
            tableMapping.ColumnMappings.Add("OnReport", "OnReport")
            tableMapping.ColumnMappings.Add("AccountTypeCode", "AccountTypeCode")
            tableMapping.ColumnMappings.Add("DelFlag", "DelFlag")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rptDataSet
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Group_GetAll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GroupCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@companyCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_Group_GetAllDataTable, ByVal GroupCode As Global.System.Nullable(Of Integer), ByVal companyCode As Global.System.Nullable(Of Integer), ByVal status As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GroupCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GroupCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (companyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(companyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal GroupCode As Global.System.Nullable(Of Integer), ByVal companyCode As Global.System.Nullable(Of Integer), ByVal status As Global.System.Nullable(Of Boolean)) As LMWDataSet.sp_Group_GetAllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GroupCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GroupCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (companyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(companyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_Group_GetAllDataTable = New LMWDataSet.sp_Group_GetAllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_Head_GetAllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_Head_GetAll"
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            tableMapping.ColumnMappings.Add("HeadCode", "HeadCode")
            tableMapping.ColumnMappings.Add("HeadName", "HeadName")
            tableMapping.ColumnMappings.Add("GroupCode", "GroupCode")
            tableMapping.ColumnMappings.Add("GroupName", "GroupName")
            tableMapping.ColumnMappings.Add("OpeningBalance", "OpeningBalance")
            tableMapping.ColumnMappings.Add("Rp", "Rp")
            tableMapping.ColumnMappings.Add("HeadOpeningCode", "HeadOpeningCode")
            tableMapping.ColumnMappings.Add("OnVoucherNumber_YesNo", "OnVoucherNumber_YesNo")
            tableMapping.ColumnMappings.Add("DelFlag", "DelFlag")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rptDataSet
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Head_GetAll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HeadCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RP", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CompanyCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_Head_GetAllDataTable, ByVal HeadCode As Global.System.Nullable(Of Integer), ByVal RP As String, ByVal CompanyCode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (HeadCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(HeadCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (RP Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(RP,String)
            End If
            If (CompanyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(CompanyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal HeadCode As Global.System.Nullable(Of Integer), ByVal RP As String, ByVal CompanyCode As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_Head_GetAllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (HeadCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(HeadCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (RP Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(RP,String)
            End If
            If (CompanyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(CompanyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_Head_GetAllDataTable = New LMWDataSet.sp_Head_GetAllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_LedgerBookTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_LedgerBook"
            tableMapping.ColumnMappings.Add("VoucherDate", "VoucherDate")
            tableMapping.ColumnMappings.Add("HeadName", "HeadName")
            tableMapping.ColumnMappings.Add("Head1", "Head1")
            tableMapping.ColumnMappings.Add("Head2", "Head2")
            tableMapping.ColumnMappings.Add("Ltr", "Ltr")
            tableMapping.ColumnMappings.Add("Cash", "Cash")
            tableMapping.ColumnMappings.Add("Adjustment", "Adjustment")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("Rp", "Rp")
            tableMapping.ColumnMappings.Add("HeadCode", "HeadCode")
            tableMapping.ColumnMappings.Add("GroupCode", "GroupCode")
            tableMapping.ColumnMappings.Add("EntryFrom", "EntryFrom")
            tableMapping.ColumnMappings.Add("VoucherCode", "VoucherCode")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("page", "page")
            tableMapping.ColumnMappings.Add("receipt", "receipt")
            tableMapping.ColumnMappings.Add("MNO", "MNO")
            tableMapping.ColumnMappings.Add("DATE1", "DATE1")
            tableMapping.ColumnMappings.Add("DATE2", "DATE2")
            tableMapping.ColumnMappings.Add("OPNBALANCE", "OPNBALANCE")
            tableMapping.ColumnMappings.Add("OPN_RP", "OPN_RP")
            tableMapping.ColumnMappings.Add("REPT", "REPT")
            tableMapping.ColumnMappings.Add("PYMT", "PYMT")
            tableMapping.ColumnMappings.Add("TOTREPT", "TOTREPT")
            tableMapping.ColumnMappings.Add("TOTPYMT", "TOTPYMT")
            tableMapping.ColumnMappings.Add("LedgerReceipt", "LedgerReceipt")
            tableMapping.ColumnMappings.Add("LedgerPayment", "LedgerPayment")
            tableMapping.ColumnMappings.Add("OnReport", "OnReport")
            tableMapping.ColumnMappings.Add("AccountTypeCode", "AccountTypeCode")
            tableMapping.ColumnMappings.Add("GroupName", "GroupName")
            tableMapping.ColumnMappings.Add("GroupAcTypeCode", "GroupAcTypeCode")
            tableMapping.ColumnMappings.Add("ACNO", "ACNO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_LedgerBook"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HeadCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FYCODE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GroupCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPANYCODE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_LedgerBookDataTable, ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal HeadCode As Global.System.Nullable(Of Integer), ByVal FYCODE As Global.System.Nullable(Of Integer), ByVal GroupCode As Global.System.Nullable(Of Integer), ByVal COMPANYCODE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (HeadCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(HeadCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FYCODE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FYCODE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GroupCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(GroupCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (COMPANYCODE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COMPANYCODE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal HeadCode As Global.System.Nullable(Of Integer), ByVal FYCODE As Global.System.Nullable(Of Integer), ByVal GroupCode As Global.System.Nullable(Of Integer), ByVal COMPANYCODE As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_LedgerBookDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (HeadCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(HeadCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FYCODE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FYCODE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GroupCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(GroupCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (COMPANYCODE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COMPANYCODE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_LedgerBookDataTable = New LMWDataSet.sp_LedgerBookDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_DayBook_FINALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_DayBook_FINAL"
            tableMapping.ColumnMappings.Add("ROWNO", "ROWNO")
            tableMapping.ColumnMappings.Add("VOUCHERDATE", "VOUCHERDATE")
            tableMapping.ColumnMappings.Add("HEADNAME", "HEADNAME")
            tableMapping.ColumnMappings.Add("HEAD1", "HEAD1")
            tableMapping.ColumnMappings.Add("HEAD2", "HEAD2")
            tableMapping.ColumnMappings.Add("LTR", "LTR")
            tableMapping.ColumnMappings.Add("CASH", "CASH")
            tableMapping.ColumnMappings.Add("ADJUSTMENT", "ADJUSTMENT")
            tableMapping.ColumnMappings.Add("TOTAL", "TOTAL")
            tableMapping.ColumnMappings.Add("RP", "RP")
            tableMapping.ColumnMappings.Add("HEADCODE", "HEADCODE")
            tableMapping.ColumnMappings.Add("GROUPCODE", "GROUPCODE")
            tableMapping.ColumnMappings.Add("OPENINGBALANCE", "OPENINGBALANCE")
            tableMapping.ColumnMappings.Add("CLOSSINGBALANCE", "CLOSSINGBALANCE")
            tableMapping.ColumnMappings.Add("ENTRYFROM", "ENTRYFROM")
            tableMapping.ColumnMappings.Add("NUMWORD", "NUMWORD")
            tableMapping.ColumnMappings.Add("VOUCHERCODE", "VOUCHERCODE")
            tableMapping.ColumnMappings.Add("REMARKS", "REMARKS")
            tableMapping.ColumnMappings.Add("PAGE", "PAGE")
            tableMapping.ColumnMappings.Add("RECEIPT", "RECEIPT")
            tableMapping.ColumnMappings.Add("PROWNO", "PROWNO")
            tableMapping.ColumnMappings.Add("PHEADNAME", "PHEADNAME")
            tableMapping.ColumnMappings.Add("PHEAD1", "PHEAD1")
            tableMapping.ColumnMappings.Add("PHEAD2", "PHEAD2")
            tableMapping.ColumnMappings.Add("PLTR", "PLTR")
            tableMapping.ColumnMappings.Add("PCASH", "PCASH")
            tableMapping.ColumnMappings.Add("PADJUSTMENT", "PADJUSTMENT")
            tableMapping.ColumnMappings.Add("PTOTAL", "PTOTAL")
            tableMapping.ColumnMappings.Add("PRP", "PRP")
            tableMapping.ColumnMappings.Add("PHEADCODE", "PHEADCODE")
            tableMapping.ColumnMappings.Add("PGROUPCODE", "PGROUPCODE")
            tableMapping.ColumnMappings.Add("POPENINGBALANCE", "POPENINGBALANCE")
            tableMapping.ColumnMappings.Add("PCLOSSINGBALANCE", "PCLOSSINGBALANCE")
            tableMapping.ColumnMappings.Add("PENTRYFROM", "PENTRYFROM")
            tableMapping.ColumnMappings.Add("PNUMWORD", "PNUMWORD")
            tableMapping.ColumnMappings.Add("PVOUCHERCODE", "PVOUCHERCODE")
            tableMapping.ColumnMappings.Add("PREMARKS", "PREMARKS")
            tableMapping.ColumnMappings.Add("PPAGE", "PPAGE")
            tableMapping.ColumnMappings.Add("PRECEIPT", "PRECEIPT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rptDataSet
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_DayBook_FINAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CompanyCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_DayBook_FINALDataTable, ByVal CompanyCode As Global.System.Nullable(Of Integer), ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CompanyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CompanyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CompanyCode As Global.System.Nullable(Of Integer), ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As LMWDataSet.sp_DayBook_FINALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CompanyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CompanyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_DayBook_FINALDataTable = New LMWDataSet.sp_DayBook_FINALDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_DayBook_PytTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_DayBook_Pyt"
            tableMapping.ColumnMappings.Add("paymentDate", "paymentDate")
            tableMapping.ColumnMappings.Add("PHeadName", "PHeadName")
            tableMapping.ColumnMappings.Add("PHead1", "PHead1")
            tableMapping.ColumnMappings.Add("PHead2", "PHead2")
            tableMapping.ColumnMappings.Add("PLtr", "PLtr")
            tableMapping.ColumnMappings.Add("PCash", "PCash")
            tableMapping.ColumnMappings.Add("PAdjustment", "PAdjustment")
            tableMapping.ColumnMappings.Add("PTotal", "PTotal")
            tableMapping.ColumnMappings.Add("Rp", "Rp")
            tableMapping.ColumnMappings.Add("page", "page")
            tableMapping.ColumnMappings.Add("HeadCode", "HeadCode")
            tableMapping.ColumnMappings.Add("GroupCode", "GroupCode")
            tableMapping.ColumnMappings.Add("EntryFrom", "EntryFrom")
            tableMapping.ColumnMappings.Add("VoucherCode", "VoucherCode")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("receipt", "receipt")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rptDataSet
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_DayBook_Pyt"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_DayBook_PytDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As LMWDataSet.sp_DayBook_PytDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As LMWDataSet.sp_DayBook_PytDataTable = New LMWDataSet.sp_DayBook_PytDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_TDCollectionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_TDCollection"
            tableMapping.ColumnMappings.Add("RowNo", "RowNo")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("Membername", "Membername")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("TDOpening", "TDOpening")
            tableMapping.ColumnMappings.Add("APril", "APril")
            tableMapping.ColumnMappings.Add("May", "May")
            tableMapping.ColumnMappings.Add("June", "June")
            tableMapping.ColumnMappings.Add("July", "July")
            tableMapping.ColumnMappings.Add("August", "August")
            tableMapping.ColumnMappings.Add("September", "September")
            tableMapping.ColumnMappings.Add("October", "October")
            tableMapping.ColumnMappings.Add("November", "November")
            tableMapping.ColumnMappings.Add("December", "December")
            tableMapping.ColumnMappings.Add("January", "January")
            tableMapping.ColumnMappings.Add("February", "February")
            tableMapping.ColumnMappings.Add("March", "March")
            tableMapping.ColumnMappings.Add("TotalCollection", "TotalCollection")
            tableMapping.ColumnMappings.Add("ClossingBalance", "ClossingBalance")
            tableMapping.ColumnMappings.Add("companycode", "companycode")
            tableMapping.ColumnMappings.Add("intonopening", "intonopening")
            tableMapping.ColumnMappings.Add("intoncollection", "intoncollection")
            tableMapping.ColumnMappings.Add("Insurance", "Insurance")
            tableMapping.ColumnMappings.Add("Payment", "Payment")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rptDataSet
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_TDCollection"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearNumber", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearNumber1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthFrom", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthTo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmpNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_TDCollectionDataTable, ByVal YearNumber As Global.System.Nullable(Of Integer), ByVal YearNumber1 As Global.System.Nullable(Of Integer), ByVal MonthFrom As Global.System.Nullable(Of Integer), ByVal MonthTo As Global.System.Nullable(Of Integer), ByVal EmpNo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (YearNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(YearNumber.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (YearNumber1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(YearNumber1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MonthFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(MonthFrom.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MonthTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(MonthTo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (EmpNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(EmpNo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal YearNumber As Global.System.Nullable(Of Integer), ByVal YearNumber1 As Global.System.Nullable(Of Integer), ByVal MonthFrom As Global.System.Nullable(Of Integer), ByVal MonthTo As Global.System.Nullable(Of Integer), ByVal EmpNo As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_TDCollectionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (YearNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(YearNumber.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (YearNumber1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(YearNumber1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MonthFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(MonthFrom.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MonthTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(MonthTo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (EmpNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(EmpNo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_TDCollectionDataTable = New LMWDataSet.sp_TDCollectionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_Member_GetAllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_Member_GetAll"
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("TDOpening", "TDOpening")
            tableMapping.ColumnMappings.Add("strEmpNo", "strEmpNo")
            tableMapping.ColumnMappings.Add("MemberName", "MemberName")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("MEMBERTYPE1", "MEMBERTYPE1")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("Address4", "Address4")
            tableMapping.ColumnMappings.Add("MobileNo", "MobileNo")
            tableMapping.ColumnMappings.Add("MemberType", "MemberType")
            tableMapping.ColumnMappings.Add("ShareOpening", "ShareOpening")
            tableMapping.ColumnMappings.Add("MemberName_Tamil", "MemberName_Tamil")
            tableMapping.ColumnMappings.Add("Address_Tamil1", "Address_Tamil1")
            tableMapping.ColumnMappings.Add("Address_Tamil2", "Address_Tamil2")
            tableMapping.ColumnMappings.Add("Address_Tamil3", "Address_Tamil3")
            tableMapping.ColumnMappings.Add("Address_Tamil4", "Address_Tamil4")
            tableMapping.ColumnMappings.Add("Photo_Image", "Photo_Image")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rptDataSet
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Member_GetAll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberCode", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 19, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmployeeNumber", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Companycode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_Member_GetAllDataTable, ByVal MemberCode As Global.System.Nullable(Of Long), ByVal Status As Global.System.Nullable(Of Boolean), ByVal EmployeeNumber As Global.System.Nullable(Of Integer), ByVal Companycode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MemberCode.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (EmployeeNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(EmployeeNumber.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Companycode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Companycode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal MemberCode As Global.System.Nullable(Of Long), ByVal Status As Global.System.Nullable(Of Boolean), ByVal EmployeeNumber As Global.System.Nullable(Of Integer), ByVal Companycode As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_Member_GetAllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MemberCode.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (EmployeeNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(EmployeeNumber.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Companycode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Companycode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_Member_GetAllDataTable = New LMWDataSet.sp_Member_GetAllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_DayBookTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_DayBook"
            tableMapping.ColumnMappings.Add("RowId", "RowId")
            tableMapping.ColumnMappings.Add("VoucherDate", "VoucherDate")
            tableMapping.ColumnMappings.Add("HeadName", "HeadName")
            tableMapping.ColumnMappings.Add("Head1", "Head1")
            tableMapping.ColumnMappings.Add("Head2", "Head2")
            tableMapping.ColumnMappings.Add("Ltr", "Ltr")
            tableMapping.ColumnMappings.Add("Cash", "Cash")
            tableMapping.ColumnMappings.Add("Adjustment", "Adjustment")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("Rp", "Rp")
            tableMapping.ColumnMappings.Add("HeadCode", "HeadCode")
            tableMapping.ColumnMappings.Add("GroupCode", "GroupCode")
            tableMapping.ColumnMappings.Add("OpeningBalance", "OpeningBalance")
            tableMapping.ColumnMappings.Add("ClossingBalance", "ClossingBalance")
            tableMapping.ColumnMappings.Add("EntryFrom", "EntryFrom")
            tableMapping.ColumnMappings.Add("numword", "numword")
            tableMapping.ColumnMappings.Add("VoucherCode", "VoucherCode")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("page", "page")
            tableMapping.ColumnMappings.Add("receipt", "receipt")
            tableMapping.ColumnMappings.Add("RptAdjs", "RptAdjs")
            tableMapping.ColumnMappings.Add("PytAdjs", "PytAdjs")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rptDataSet
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_DayBook"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CompanyCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_DayBookDataTable, ByVal CompanyCode As Global.System.Nullable(Of Integer), ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CompanyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CompanyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CompanyCode As Global.System.Nullable(Of Integer), ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As LMWDataSet.sp_DayBookDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CompanyCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CompanyCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_DayBookDataTable = New LMWDataSet.sp_DayBookDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_TDClossing_GetAllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_TDClossing_GetAll"
            tableMapping.ColumnMappings.Add("TDClossingCode", "TDClossingCode")
            tableMapping.ColumnMappings.Add("TDClossingDate", "TDClossingDate")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("OpeningAmt", "OpeningAmt")
            tableMapping.ColumnMappings.Add("TDCollection", "TDCollection")
            tableMapping.ColumnMappings.Add("IntonOpening", "IntonOpening")
            tableMapping.ColumnMappings.Add("IntonCollection", "IntonCollection")
            tableMapping.ColumnMappings.Add("TotalPayment", "TotalPayment")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("TDOpening", "TDOpening")
            tableMapping.ColumnMappings.Add("MemberName", "MemberName")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("ROI", "ROI")
            tableMapping.ColumnMappings.Add("OtherReceipt", "OtherReceipt")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_TDClossing_GetAll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDClossingCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_TDClossing_GetAllDataTable, ByVal TDClossingCode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TDClossingCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TDClossingCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal TDClossingCode As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_TDClossing_GetAllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TDClossingCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TDClossingCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_TDClossing_GetAllDataTable = New LMWDataSet.sp_TDClossing_GetAllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_TDRefund_GetAllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_TDRefund_GetAll"
            tableMapping.ColumnMappings.Add("RefundCode", "RefundCode")
            tableMapping.ColumnMappings.Add("RefundDate", "RefundDate")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("OpeningAmt", "OpeningAmt")
            tableMapping.ColumnMappings.Add("TDCollection", "TDCollection")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("TDOpening", "TDOpening")
            tableMapping.ColumnMappings.Add("MemberName", "MemberName")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("RefundAmount", "RefundAmount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_TDRefund_GetAll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RefundCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fromdate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Todate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Membercode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_TDRefund_GetAllDataTable, ByVal RefundCode As Global.System.Nullable(Of Integer), ByVal Fromdate As Global.System.Nullable(Of Date), ByVal Todate As Global.System.Nullable(Of Date), ByVal Membercode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RefundCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RefundCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Todate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Todate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Membercode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Membercode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal RefundCode As Global.System.Nullable(Of Integer), ByVal Fromdate As Global.System.Nullable(Of Date), ByVal Todate As Global.System.Nullable(Of Date), ByVal Membercode As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_TDRefund_GetAllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RefundCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RefundCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Todate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Todate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Membercode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Membercode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_TDRefund_GetAllDataTable = New LMWDataSet.sp_TDRefund_GetAllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_TrailBalanceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_TrailBalance"
            tableMapping.ColumnMappings.Add("Orderno", "Orderno")
            tableMapping.ColumnMappings.Add("GroupCode", "GroupCode")
            tableMapping.ColumnMappings.Add("GroupName", "GroupName")
            tableMapping.ColumnMappings.Add("opnDebit", "opnDebit")
            tableMapping.ColumnMappings.Add("opnCredit", "opnCredit")
            tableMapping.ColumnMappings.Add("VDebit", "VDebit")
            tableMapping.ColumnMappings.Add("VCredit", "VCredit")
            tableMapping.ColumnMappings.Add("CDebit", "CDebit")
            tableMapping.ColumnMappings.Add("CCredit", "CCredit")
            tableMapping.ColumnMappings.Add("FromDate", "FromDate")
            tableMapping.ColumnMappings.Add("Todate", "Todate")
            tableMapping.ColumnMappings.Add("HeadCode", "HeadCode")
            tableMapping.ColumnMappings.Add("HeadName", "HeadName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_TrailBalance"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fromdate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fycode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_TrailBalanceDataTable, ByVal Fromdate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal Fycode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Fycode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Fycode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Fromdate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal Fycode As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_TrailBalanceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Fycode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Fycode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_TrailBalanceDataTable = New LMWDataSet.sp_TrailBalanceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_ShareCollection_rptTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_ShareCollection_rpt"
            tableMapping.ColumnMappings.Add("companycode", "companycode")
            tableMapping.ColumnMappings.Add("RowNo", "RowNo")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("Membername", "Membername")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("TDOpening", "TDOpening")
            tableMapping.ColumnMappings.Add("APril", "APril")
            tableMapping.ColumnMappings.Add("May", "May")
            tableMapping.ColumnMappings.Add("June", "June")
            tableMapping.ColumnMappings.Add("July", "July")
            tableMapping.ColumnMappings.Add("August", "August")
            tableMapping.ColumnMappings.Add("September", "September")
            tableMapping.ColumnMappings.Add("October", "October")
            tableMapping.ColumnMappings.Add("November", "November")
            tableMapping.ColumnMappings.Add("December", "December")
            tableMapping.ColumnMappings.Add("January", "January")
            tableMapping.ColumnMappings.Add("February", "February")
            tableMapping.ColumnMappings.Add("March", "March")
            tableMapping.ColumnMappings.Add("TotalCollection", "TotalCollection")
            tableMapping.ColumnMappings.Add("intonopening", "intonopening")
            tableMapping.ColumnMappings.Add("intoncollection", "intoncollection")
            tableMapping.ColumnMappings.Add("insurance", "insurance")
            tableMapping.ColumnMappings.Add("ClossingBalance", "ClossingBalance")
            tableMapping.ColumnMappings.Add("payment", "payment")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_ShareCollection_rpt"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearNumber", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearNumber1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthFrom", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthTo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmpNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_ShareCollection_rptDataTable, ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal YearNumber As Global.System.Nullable(Of Integer), ByVal YearNumber1 As Global.System.Nullable(Of Integer), ByVal MonthFrom As Global.System.Nullable(Of Integer), ByVal MonthTo As Global.System.Nullable(Of Integer), ByVal EmpNo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (YearNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(YearNumber.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (YearNumber1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(YearNumber1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MonthFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(MonthFrom.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MonthTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(MonthTo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (EmpNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(EmpNo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal YearNumber As Global.System.Nullable(Of Integer), ByVal YearNumber1 As Global.System.Nullable(Of Integer), ByVal MonthFrom As Global.System.Nullable(Of Integer), ByVal MonthTo As Global.System.Nullable(Of Integer), ByVal EmpNo As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_ShareCollection_rptDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (YearNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(YearNumber.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (YearNumber1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(YearNumber1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MonthFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(MonthFrom.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MonthTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(MonthTo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (EmpNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(EmpNo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_ShareCollection_rptDataTable = New LMWDataSet.sp_ShareCollection_rptDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_ShareClossing_GetAllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_ShareClossing_GetAll"
            tableMapping.ColumnMappings.Add("ShareClossingCode", "ShareClossingCode")
            tableMapping.ColumnMappings.Add("ShareClossingDate", "ShareClossingDate")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("OpeningAmt", "OpeningAmt")
            tableMapping.ColumnMappings.Add("TDCollection", "TDCollection")
            tableMapping.ColumnMappings.Add("IntonOpening", "IntonOpening")
            tableMapping.ColumnMappings.Add("IntonCollection", "IntonCollection")
            tableMapping.ColumnMappings.Add("TotalPayment", "TotalPayment")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("TDOpening", "TDOpening")
            tableMapping.ColumnMappings.Add("MemberName", "MemberName")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("ROI", "ROI")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_ShareClossing_GetAll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ShareClossingCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fromdate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Todate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Membercode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_ShareClossing_GetAllDataTable, ByVal ShareClossingCode As Global.System.Nullable(Of Integer), ByVal Fromdate As Global.System.Nullable(Of Date), ByVal Todate As Global.System.Nullable(Of Date), ByVal Membercode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ShareClossingCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ShareClossingCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Todate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Todate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Membercode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Membercode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ShareClossingCode As Global.System.Nullable(Of Integer), ByVal Fromdate As Global.System.Nullable(Of Date), ByVal Todate As Global.System.Nullable(Of Date), ByVal Membercode As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_ShareClossing_GetAllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ShareClossingCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ShareClossingCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Todate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Todate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Membercode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Membercode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_ShareClossing_GetAllDataTable = New LMWDataSet.sp_ShareClossing_GetAllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_MemberLoan_RptGetallTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_MemberLoan_RptGetall"
            tableMapping.ColumnMappings.Add("LoanCode", "LoanCode")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("MemberName", "MemberName")
            tableMapping.ColumnMappings.Add("MemberName_Tamil", "MemberName_Tamil")
            tableMapping.ColumnMappings.Add("MemberType", "MemberType")
            tableMapping.ColumnMappings.Add("LoanNamecode", "LoanNamecode")
            tableMapping.ColumnMappings.Add("LoanName", "LoanName")
            tableMapping.ColumnMappings.Add("LoanNumber", "LoanNumber")
            tableMapping.ColumnMappings.Add("StrLoanNumber", "StrLoanNumber")
            tableMapping.ColumnMappings.Add("LoanDate", "LoanDate")
            tableMapping.ColumnMappings.Add("ROI", "ROI")
            tableMapping.ColumnMappings.Add("LoanAmount", "LoanAmount")
            tableMapping.ColumnMappings.Add("LoanPeriod", "LoanPeriod")
            tableMapping.ColumnMappings.Add("LastPaidDate", "LastPaidDate")
            tableMapping.ColumnMappings.Add("Emi_Amount", "Emi_Amount")
            tableMapping.ColumnMappings.Add("paymode", "paymode")
            tableMapping.ColumnMappings.Add("LoanOutStanding", "LoanOutStanding")
            tableMapping.ColumnMappings.Add("Principal", "Principal")
            tableMapping.ColumnMappings.Add("ODPrincipal", "ODPrincipal")
            tableMapping.ColumnMappings.Add("Interest", "Interest")
            tableMapping.ColumnMappings.Add("ODInterest", "ODInterest")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_MemberLoan_RptGetall"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoanCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoanNameCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fromdate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_MemberLoan_RptGetallDataTable, ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal LoanNameCode As Global.System.Nullable(Of Integer), ByVal Fromdate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LoanNameCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(LoanNameCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal LoanNameCode As Global.System.Nullable(Of Integer), ByVal Fromdate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As LMWDataSet.sp_MemberLoan_RptGetallDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LoanNameCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(LoanNameCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_MemberLoan_RptGetallDataTable = New LMWDataSet.sp_MemberLoan_RptGetallDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_ShareDivident_GetAllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_ShareDivident_GetAll"
            tableMapping.ColumnMappings.Add("ShareDividentCode", "ShareDividentCode")
            tableMapping.ColumnMappings.Add("TDFromDate", "TDFromDate")
            tableMapping.ColumnMappings.Add("TDToDate", "TDToDate")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("OpeningAmount", "OpeningAmount")
            tableMapping.ColumnMappings.Add("TDCollection", "TDCollection")
            tableMapping.ColumnMappings.Add("IntOnOpening", "IntOnOpening")
            tableMapping.ColumnMappings.Add("IntonCollection", "IntonCollection")
            tableMapping.ColumnMappings.Add("TotalPayment", "TotalPayment")
            tableMapping.ColumnMappings.Add("NettTotal", "NettTotal")
            tableMapping.ColumnMappings.Add("ROI", "ROI")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("MemberName_Tamil", "MemberName_Tamil")
            tableMapping.ColumnMappings.Add("ShareOpening", "ShareOpening")
            tableMapping.ColumnMappings.Add("MemberName", "MemberName")
            tableMapping.ColumnMappings.Add("ShareClossingDate", "ShareClossingDate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_ShareDivident_GetAll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ShareDividentCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ShareDepositDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromdate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Todate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_ShareDivident_GetAllDataTable, ByVal ShareDividentCode As Global.System.Nullable(Of Integer), ByVal Status As Global.System.Nullable(Of Boolean), ByVal ShareDepositDate As Global.System.Nullable(Of Date), ByVal fromdate As Global.System.Nullable(Of Date), ByVal Todate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ShareDividentCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ShareDividentCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ShareDepositDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ShareDepositDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Todate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Todate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ShareDividentCode As Global.System.Nullable(Of Integer), ByVal Status As Global.System.Nullable(Of Boolean), ByVal ShareDepositDate As Global.System.Nullable(Of Date), ByVal fromdate As Global.System.Nullable(Of Date), ByVal Todate As Global.System.Nullable(Of Date)) As LMWDataSet.sp_ShareDivident_GetAllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ShareDividentCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ShareDividentCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ShareDepositDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ShareDepositDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Todate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Todate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_ShareDivident_GetAllDataTable = New LMWDataSet.sp_ShareDivident_GetAllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_PassBookTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_PassBook"
            tableMapping.ColumnMappings.Add("CollectionDate", "CollectionDate")
            tableMapping.ColumnMappings.Add("Particulars", "Particulars")
            tableMapping.ColumnMappings.Add("Principle", "Principle")
            tableMapping.ColumnMappings.Add("Int", "Int")
            tableMapping.ColumnMappings.Add("Bal_OS", "Bal_OS")
            tableMapping.ColumnMappings.Add("LoanCode", "LoanCode")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("ROI", "ROI")
            tableMapping.ColumnMappings.Add("PageNo", "PageNo")
            tableMapping.ColumnMappings.Add("LNo", "LNo")
            tableMapping.ColumnMappings.Add("sno", "sno")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_PassBook"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoanCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_PassBookDataTable, ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As LMWDataSet.sp_PassBookDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_PassBookDataTable = New LMWDataSet.sp_PassBookDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_MemberLoan_GetAllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_MemberLoan_GetAll"
            tableMapping.ColumnMappings.Add("LoanCode", "LoanCode")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("MemberName", "MemberName")
            tableMapping.ColumnMappings.Add("MemberName_Tamil", "MemberName_Tamil")
            tableMapping.ColumnMappings.Add("MemberType", "MemberType")
            tableMapping.ColumnMappings.Add("LoanNamecode", "LoanNamecode")
            tableMapping.ColumnMappings.Add("LoanName", "LoanName")
            tableMapping.ColumnMappings.Add("LoanNumber", "LoanNumber")
            tableMapping.ColumnMappings.Add("StrLoanNumber", "StrLoanNumber")
            tableMapping.ColumnMappings.Add("LoanDate", "LoanDate")
            tableMapping.ColumnMappings.Add("ROI", "ROI")
            tableMapping.ColumnMappings.Add("LoanAmount", "LoanAmount")
            tableMapping.ColumnMappings.Add("LoanPeriod", "LoanPeriod")
            tableMapping.ColumnMappings.Add("LastPaidDate", "LastPaidDate")
            tableMapping.ColumnMappings.Add("Emi_Amount", "Emi_Amount")
            tableMapping.ColumnMappings.Add("paymode", "paymode")
            tableMapping.ColumnMappings.Add("LoanOutstanding", "LoanOutstanding")
            tableMapping.ColumnMappings.Add("Principal", "Principal")
            tableMapping.ColumnMappings.Add("ODPrincipal", "ODPrincipal")
            tableMapping.ColumnMappings.Add("Interest", "Interest")
            tableMapping.ColumnMappings.Add("ODInterest", "ODInterest")
            tableMapping.ColumnMappings.Add("MaturityDate", "MaturityDate")
            tableMapping.ColumnMappings.Add("LoanClossedStatus", "LoanClossedStatus")
            tableMapping.ColumnMappings.Add("Demand", "Demand")
            tableMapping.ColumnMappings.Add("DemandType", "DemandType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_MemberLoan_GetAll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoanCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoanNameCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberType", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_MemberLoan_GetAllDataTable, ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal LoanNameCode As Global.System.Nullable(Of Integer), ByVal MemberType As String, ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LoanNameCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(LoanNameCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MemberType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(MemberType,String)
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal LoanNameCode As Global.System.Nullable(Of Integer), ByVal MemberType As String, ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As LMWDataSet.sp_MemberLoan_GetAllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LoanNameCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(LoanNameCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MemberType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(MemberType,String)
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_MemberLoan_GetAllDataTable = New LMWDataSet.sp_MemberLoan_GetAllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_LoanDemandTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_LoanDemand"
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("MemberName", "MemberName")
            tableMapping.ColumnMappings.Add("number", "number")
            tableMapping.ColumnMappings.Add("membertype", "membertype")
            tableMapping.ColumnMappings.Add("FDBAL", "FDBAL")
            tableMapping.ColumnMappings.Add("FDPRN", "FDPRN")
            tableMapping.ColumnMappings.Add("FDINT", "FDINT")
            tableMapping.ColumnMappings.Add("JLBAL", "JLBAL")
            tableMapping.ColumnMappings.Add("JLPRN", "JLPRN")
            tableMapping.ColumnMappings.Add("JLINT", "JLINT")
            tableMapping.ColumnMappings.Add("LDBAL", "LDBAL")
            tableMapping.ColumnMappings.Add("LDPRN", "LDPRN")
            tableMapping.ColumnMappings.Add("LDINT", "LDINT")
            tableMapping.ColumnMappings.Add("TotalBalance", "TotalBalance")
            tableMapping.ColumnMappings.Add("TotalDemand", "TotalDemand")
            tableMapping.ColumnMappings.Add("FromDate", "FromDate")
            tableMapping.ColumnMappings.Add("ToDate", "ToDate")
            tableMapping.ColumnMappings.Add("LoanNameCode", "LoanNameCode")
            tableMapping.ColumnMappings.Add("LoanName", "LoanName")
            tableMapping.ColumnMappings.Add("DemandType", "DemandType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_LoanDemand"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fromdate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StaffLoan", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DemandType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoanCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MonthNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_LoanDemandDataTable, ByVal Fromdate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal StaffLoan As Global.System.Nullable(Of Boolean), ByVal DemandType As Global.System.Nullable(Of Integer), ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal MonthNo As Global.System.Nullable(Of Integer), ByVal YearNo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (StaffLoan.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(StaffLoan.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DemandType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(DemandType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (MonthNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(MonthNo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (YearNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(YearNo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Fromdate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal StaffLoan As Global.System.Nullable(Of Boolean), ByVal DemandType As Global.System.Nullable(Of Integer), ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal MonthNo As Global.System.Nullable(Of Integer), ByVal YearNo As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_LoanDemandDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Fromdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Fromdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (StaffLoan.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(StaffLoan.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DemandType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(DemandType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (MonthNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(MonthNo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (YearNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(YearNo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_LoanDemandDataTable = New LMWDataSet.sp_LoanDemandDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_TD_PassBookTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_TD_PassBook"
            tableMapping.ColumnMappings.Add("TDPassBookCode", "TDPassBookCode")
            tableMapping.ColumnMappings.Add("TDDepositDate", "TDDepositDate")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("TDOpeningCode", "TDOpeningCode")
            tableMapping.ColumnMappings.Add("TDDepositCode", "TDDepositCode")
            tableMapping.ColumnMappings.Add("TDInterestCode", "TDInterestCode")
            tableMapping.ColumnMappings.Add("TDClosingCode", "TDClosingCode")
            tableMapping.ColumnMappings.Add("Particular", "Particular")
            tableMapping.ColumnMappings.Add("Deposit", "Deposit")
            tableMapping.ColumnMappings.Add("Interest", "Interest")
            tableMapping.ColumnMappings.Add("Insurance", "Insurance")
            tableMapping.ColumnMappings.Add("Payment", "Payment")
            tableMapping.ColumnMappings.Add("Balance", "Balance")
            tableMapping.ColumnMappings.Add("Printed", "Printed")
            tableMapping.ColumnMappings.Add("PageNumber", "PageNumber")
            tableMapping.ColumnMappings.Add("LineNumber", "LineNumber")
            tableMapping.ColumnMappings.Add("Rpt", "Rpt")
            tableMapping.ColumnMappings.Add("Pyt", "Pyt")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_TD_PassBook"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_TD_PassBookDataTable, ByVal MemberCode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal MemberCode As Global.System.Nullable(Of Integer)) As LMWDataSet.sp_TD_PassBookDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_TD_PassBookDataTable = New LMWDataSet.sp_TD_PassBookDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_Share_PassBookTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_Share_PassBook"
            tableMapping.ColumnMappings.Add("SharePassBookCode", "SharePassBookCode")
            tableMapping.ColumnMappings.Add("ShareDepositDate", "ShareDepositDate")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("ShareOpeningCode", "ShareOpeningCode")
            tableMapping.ColumnMappings.Add("ShareDepositCode", "ShareDepositCode")
            tableMapping.ColumnMappings.Add("ShareDividentCode", "ShareDividentCode")
            tableMapping.ColumnMappings.Add("ShareClosingCode", "ShareClosingCode")
            tableMapping.ColumnMappings.Add("Particular", "Particular")
            tableMapping.ColumnMappings.Add("Deposit", "Deposit")
            tableMapping.ColumnMappings.Add("Divident", "Divident")
            tableMapping.ColumnMappings.Add("Refund", "Refund")
            tableMapping.ColumnMappings.Add("Payment", "Payment")
            tableMapping.ColumnMappings.Add("Balance", "Balance")
            tableMapping.ColumnMappings.Add("Printed", "Printed")
            tableMapping.ColumnMappings.Add("PageNumber", "PageNumber")
            tableMapping.ColumnMappings.Add("LineNumber", "LineNumber")
            tableMapping.ColumnMappings.Add("Rpt", "Rpt")
            tableMapping.ColumnMappings.Add("Pyt", "Pyt")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Share_PassBook"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_Share_PassBookDataTable, ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date)) As LMWDataSet.sp_Share_PassBookDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LMWDataSet.sp_Share_PassBookDataTable = New LMWDataSet.sp_Share_PassBookDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_CollectionList_RptTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_CollectionList_Rpt"
            tableMapping.ColumnMappings.Add("DemandCode", "DemandCode")
            tableMapping.ColumnMappings.Add("CollectionNo", "CollectionNo")
            tableMapping.ColumnMappings.Add("CollectionDate", "CollectionDate")
            tableMapping.ColumnMappings.Add("MemberCode", "MemberCode")
            tableMapping.ColumnMappings.Add("LoanNamecode", "LoanNamecode")
            tableMapping.ColumnMappings.Add("LoanCode", "LoanCode")
            tableMapping.ColumnMappings.Add("mno", "mno")
            tableMapping.ColumnMappings.Add("Yno", "Yno")
            tableMapping.ColumnMappings.Add("TokenNo", "TokenNo")
            tableMapping.ColumnMappings.Add("ROI", "ROI")
            tableMapping.ColumnMappings.Add("Principle", "Principle")
            tableMapping.ColumnMappings.Add("Int", "Int")
            tableMapping.ColumnMappings.Add("Bal_OS", "Bal_OS")
            tableMapping.ColumnMappings.Add("Printed", "Printed")
            tableMapping.ColumnMappings.Add("PageNumber", "PageNumber")
            tableMapping.ColumnMappings.Add("LineNumber", "LineNumber")
            tableMapping.ColumnMappings.Add("Particulars", "Particulars")
            tableMapping.ColumnMappings.Add("ModeofReceipt", "ModeofReceipt")
            tableMapping.ColumnMappings.Add("Number", "Number")
            tableMapping.ColumnMappings.Add("EmployeeNumber", "EmployeeNumber")
            tableMapping.ColumnMappings.Add("MemberName", "MemberName")
            tableMapping.ColumnMappings.Add("MemberName_Tamil", "MemberName_Tamil")
            tableMapping.ColumnMappings.Add("MemberType", "MemberType")
            tableMapping.ColumnMappings.Add("LoanName", "LoanName")
            tableMapping.ColumnMappings.Add("LoanNumber", "LoanNumber")
            tableMapping.ColumnMappings.Add("StrLoanNumber", "StrLoanNumber")
            tableMapping.ColumnMappings.Add("LoanDate", "LoanDate")
            tableMapping.ColumnMappings.Add("LoanAmount", "LoanAmount")
            tableMapping.ColumnMappings.Add("LoanPeriod", "LoanPeriod")
            tableMapping.ColumnMappings.Add("Emi_Amount", "Emi_Amount")
            tableMapping.ColumnMappings.Add("DemandType", "DemandType")
            tableMapping.ColumnMappings.Add("Demand", "Demand")
            tableMapping.ColumnMappings.Add("DEMANDTYPENAME", "DEMANDTYPENAME")
            tableMapping.ColumnMappings.Add("FromDate", "FromDate")
            tableMapping.ColumnMappings.Add("ToDate", "ToDate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.LMW.My.MySettings.Default.rpt_ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_CollectionList_Rpt"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberType", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoanCode", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DemandType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModeofReceipt", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LMWDataSet.sp_CollectionList_RptDataTable, ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal MemberType As String, ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal DemandType As Global.System.Nullable(Of Integer), ByVal ModeofReceipt As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MemberType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(MemberType,String)
            End If
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DemandType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(DemandType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ModeofReceipt Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ModeofReceipt,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal MemberCode As Global.System.Nullable(Of Integer), ByVal MemberType As String, ByVal LoanCode As Global.System.Nullable(Of Integer), ByVal DemandType As Global.System.Nullable(Of Integer), ByVal ModeofReceipt As String) As LMWDataSet.sp_CollectionList_RptDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FromDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FromDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MemberCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(MemberCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MemberType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(MemberType,String)
            End If
            If (LoanCode.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(LoanCode.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DemandType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(DemandType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ModeofReceipt Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ModeofReceipt,String)
            End If
            Dim dataTable As LMWDataSet.sp_CollectionList_RptDataTable = New LMWDataSet.sp_CollectionList_RptDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class QueriesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private _commandCollection() As Global.System.Data.IDbCommand
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.IDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.LMW.My.MySettings.Default.rptDataSet)
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_MonthlyRD"
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FystartingDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_MonthlyRD(ByVal FromDate As Global.System.Nullable(Of Date), ByVal ToDate As Global.System.Nullable(Of Date), ByVal FystartingDate As Global.System.Nullable(Of Date)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(0),Global.System.Data.SqlClient.SqlCommand)
            If (FromDate.HasValue = true) Then
                command.Parameters(1).Value = CType(FromDate.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ToDate.HasValue = true) Then
                command.Parameters(2).Value = CType(ToDate.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FystartingDate.HasValue = true) Then
                command.Parameters(3).Value = CType(FystartingDate.Value,Date)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As LMWDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As LMWDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As LMWDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As LMWDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
